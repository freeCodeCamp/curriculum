From 39cb13380b898752cc54cabc3e97372126447252 Mon Sep 17 00:00:00 2001
From: Vimal Raghubir <vraghubir0418@gmail.com>
Date: Sun, 10 Jun 2018 19:45:18 -0400
Subject: [PATCH 1/4] fix: added new test and fixed incorrect variable (#17471)

* Added new test and fixed incorrect variable

* Fix: Incorrect sentences and descriptions

* Update es6.json
---
 .../es6.json                                  | 22 +++++++++++--------
 1 file changed, 13 insertions(+), 9 deletions(-)

diff --git a/seed/challenges/02-javascript-algorithms-and-data-structures/es6.json b/seed/challenges/02-javascript-algorithms-and-data-structures/es6.json
index 941222890..5d45abf56 100644
--- a/seed/challenges/02-javascript-algorithms-and-data-structures/es6.json
+++ b/seed/challenges/02-javascript-algorithms-and-data-structures/es6.json
@@ -127,22 +127,26 @@
         "<code>let</code> is not the only new way to declare variables. In ES6, you can also declare variables using the <code>const</code> keyword.",
         "<code>const</code> has all the awesome features that <code>let</code> has, with the added bonus that variables declared using <code>const</code> are read-only. They are a constant value, which means that once a variable is assigned with <code>const</code>, it cannot be reassigned.",
         "<blockquote>\"use strict\"<br>const FAV_PET = \"Cats\";<br>FAV_PET = \"Dogs\"; // returns error</blockquote>",
-        "As you can see, trying to reassign a variable declared with <code>const</code> will throw an error. You should always name variables you don't want to reassign using the <code>const</code> keyword. This helps when you accidentally attempt to reassign a variable that is meant to stay constant. A common practice is to name your constants in all upper-cases and with an underscore to separate words (e.g. <code>EXAMPLE_VARIABLE</code>).",
+        "As you can see, trying to reassign a variable declared with <code>const</code> will throw an error. You should always name variables you don't want to reassign using the <code>const</code> keyword. This helps when you accidentally attempt to reassign a variable that is meant to stay constant. A common practice when naming constants is to use all uppercase letters, with words separated by an underscore.",
         "<hr>",
-        "Change the code so that all variables are declared using <code>let</code> or <code>const</code>. Use <code>let</code> when you want the variable to change, and <code>const</code> when you want the variable to remain constant. Also, rename variables declared with <code>const</code> to conform to common practices, meaning constants should be in all caps"
+        "Change the code so that all variables are declared using <code>let</code> or <code>const</code>. Use <code>let</code> when you want the variable to change, and <code>const</code> when you want the variable to remain constant. Also, rename variables declared with <code>const</code> to conform to common practices, meaning constants should be in all caps."
       ],
       "tests": [
         {
-          "text": "<code>var</code> does not exist in code.",
-          "testString": "getUserInput => assert(!getUserInput('index').match(/var/g),'<code>var</code> does not exist in code.');"
+          "text": "<code>var</code> does not exist in your code.",
+          "testString": "getUserInput => assert(!getUserInput('index').match(/var/g),'<code>var</code> does not exist in your code.');"
+        },
+        {
+          "text": "<code>SENTENCE</code> should be a constant variable declared with <code>const</code>.",
+          "testString": "getUserInput => assert(getUserInput('index').match(/(const SENTENCE)/g), '<code>SENTENCE</code> should be a constant variable declared with <code>const</code>.');"
         },
         {
-          "text": "<code>SENTENCE</code> should be a constant variable (by using <code>const</code>).",
-          "testString": "getUserInput => assert(getUserInput('index').match(/(const SENTENCE)/g), '<code>SENTENCE</code> should be a constant variable (by using <code>const</code>).');"
+          "text": "<code>i</code> should be declared with <code>let</code>.",
+          "testString": "getUserInput => assert(getUserInput('index').match(/(let i)/g), '<code>i</code> should be declared with <code>let</code>.');"
         },
         {
-          "text": "<code>i</code> should be a variable only defined within the for loop scope (by using<code>let</code>).",
-          "testString": "getUserInput => assert(getUserInput('index').match(/(let i)/g), '<code>i</code> should be a variable only defined within the for loop scope (by using<code>let</code>).');"
+          "text": "<code>console.log</code> should be changed to print the <code>SENTENCE</code> variable.",
+          "testString": "getUserInput => assert(getUserInput('index').match(/console.log/(/s*?SENTENCE/s*?/)/s*?;/g), '<code>console.log</code> should be adjusted to print the variable <code>SENTENCE</code>.');"
         }
       ],
       "releasedOn": "Feb 17, 2017",
@@ -161,7 +165,7 @@
             "",
             "  var sentence = str + \" is cool!\";",
             "  for(var i = 0; i < str.length; i+=2) {",
-            "    console.log(str);",
+            "    console.log(sentence);",
             "  }",
             "",
             "  // change code above this line",
-- 
2.17.1


From b6f963bb9805d3fc3bd3724fffc0751f905f2620 Mon Sep 17 00:00:00 2001
From: bogadodiegoh <diegobogado@live.com.ar>
Date: Sun, 10 Jun 2018 20:46:46 -0300
Subject: [PATCH 2/4] fix(seed): updated basic javascript URLs for hints
 (#17445)

* Updated json file with right url values

* Updated url links after review

* Updated another broken url link after review
---
 .../basic-javascript.json                                   | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/seed/challenges/02-javascript-algorithms-and-data-structures/basic-javascript.json b/seed/challenges/02-javascript-algorithms-and-data-structures/basic-javascript.json
index edce769e2..0a2a90a22 100644
--- a/seed/challenges/02-javascript-algorithms-and-data-structures/basic-javascript.json
+++ b/seed/challenges/02-javascript-algorithms-and-data-structures/basic-javascript.json
@@ -6757,9 +6757,9 @@
         "If <code>prop</code> is <code>\"tracks\"</code> but the album doesn't have a <code>\"tracks\"</code> property, create an empty array before adding the new value to the album's corresponding property.",
         "If <code>prop</code> is <code>\"tracks\"</code> and <code>value</code> isn't empty (<code>\"\"</code>), push the <code>value</code> onto the end of the album's existing <code>tracks</code> array.",
         "If <code>value</code> is empty (<code>\"\"</code>), delete the given <code>prop</code> property from the album.",
-        "<strong>Hints</strong><br>Use <code>bracket notation</code> when <a href=\"accessing-objects-properties-with-variables\" target=\"_blank\">accessing object properties with variables</a>.",
+        "<strong>Hints</strong><br>Use <code>bracket notation</code> when <a href=\"javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables\" target=\"_blank\">accessing object properties with variables</a>.",
         "Push is an array method you can read about on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" target=\"_blank\">Mozilla Developer Network</a>.",
-        "You may refer back to <a href=\"manipulating-complex-objects\" target=\"_blank\">Manipulating Complex Objects</a> Introducing JavaScript Object Notation (JSON) for a refresher."
+        "You may refer back to <a href=\"javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects\" target=\"_blank\">Manipulating Complex Objects</a> Introducing JavaScript Object Notation (JSON) for a refresher."
       ],
       "releasedOn": "January 1, 2016",
       "solutions": [
@@ -6807,7 +6807,7 @@
             "Si la propiedad <code>prop</code> es <code>\"tracks\"</code> y <code>value</code> no está en blanco, empuja (<em>push</em>) el valor <code>value</code> al final del vector <code>tracks</code>.",
             "Si el valor <code>value</code> está en blanco, elimina esa <code>prop</code>.",
             "Siempre retorna el objeto <code>collection</code> entero.",
-            "<strong>Nota</strong><br>No olvides usar <code>notación corchete</code> cuando <a href=\"accessing-objects-properties-with-variables\" target=\"_blank\">accedes a propiedades de objetos con variables</a>."
+            "<strong>Nota</strong><br>No olvides usar <code>notación corchete</code> cuando <a href=\"javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables\" target=\"_blank\">accedes a propiedades de objetos con variables</a>."
           ]
         }
       },
-- 
2.17.1


From 8f4e8bb3dd918bd3872db71c52a41f3061445cc5 Mon Sep 17 00:00:00 2001
From: Jarek Wojciechowski <jarekwojo@gmail.com>
Date: Sun, 10 Jun 2018 20:02:32 -0400
Subject: [PATCH 3/4] fix(challenges): add info about ReactDOM.render in an
 early react challenge (#17186) (#17473)

---
 seed/challenges/03-front-end-libraries/react.json | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/seed/challenges/03-front-end-libraries/react.json b/seed/challenges/03-front-end-libraries/react.json
index 6b5e529ad..998106189 100644
--- a/seed/challenges/03-front-end-libraries/react.json
+++ b/seed/challenges/03-front-end-libraries/react.json
@@ -22,6 +22,7 @@
         "React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.",
         "For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: <code>{ 'this is treated as JavaScript code' }</code>. Keep this in mind, since it's used in several future challenges.",
         "However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail.",
+        "It's worth noting that under the hood the challenges are calling <code>ReactDOM.render(JSX, document.getElementById('root'))</code>. This function call is what places your JSX into React's own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM.",
         "<hr>",
         "<strong>Instructions:</strong> The current code uses JSX to assign a <code>div</code> element to the constant <code>JSX</code>. Replace the <code>div</code> with an <code>h1</code> element and add the text <code>Hello JSX!</code> inside it."
       ],
@@ -3673,4 +3674,4 @@
       "react": true
     }
   ]
-}
\ No newline at end of file
+}
-- 
2.17.1


From 5ba9c1d5c07152a60e926161f21bf5204a43ff66 Mon Sep 17 00:00:00 2001
From: Bhanu Pratap Singh Rathore <bhanur05@gmail.com>
Date: Mon, 11 Jun 2018 05:33:55 +0530
Subject: [PATCH 4/4] feat(interview-prep): Porting Rosetta problems (#17480)

* feat(interview-prep): Porting Rosetta problems

* Changes done

* Update rosetta-code.json

* Update rosetta-code.json
---
 .../rosetta-code.json                         | 169 ++++++++++++++++++
 1 file changed, 169 insertions(+)

diff --git a/seed/challenges/08-coding-interview-prep/rosetta-code.json b/seed/challenges/08-coding-interview-prep/rosetta-code.json
index fd929119d..692b37816 100644
--- a/seed/challenges/08-coding-interview-prep/rosetta-code.json
+++ b/seed/challenges/08-coding-interview-prep/rosetta-code.json
@@ -3954,6 +3954,175 @@
         }
       }
     },
+    {
+      "title": "Generator/Exponential",
+      "description": ["A generator is an executable entity (like a function or procedure) that contains code that yields a sequence of values, one at a time, so that each time you call the generator, the next value in the sequence is provided.", "Generators are often built on top of coroutines or objects so that the internal state of the object is handled “naturally”.", "Generators are often used in situations where a sequence is potentially infinite, and where it is possible to construct the next value of the sequence with only minimal state.", "Write a function that uses generators to generate squares and cubes. Create a new generator that filters all cubes from the generator of squares.", "The function should return the \\( n^{th} \\) value of the filtered generator.", "For example for \\(n=7\\), the function should return 81 as the sequence would be 4,9,16,25,36,49,81. Here 64 is filtered out, as it is a cube."],
+      "solutions": ["function exponentialGenerator(n){\n  function* PowersGenerator(m) {\n  \tvar n=0;\n  \twhile(1) {\n  \t\tyield Math.pow(n, m);\n  \t\tn += 1;\n  \t}\n  }\n\n  function* FilteredGenerator(g, f){\n  \tvar value = g.next().value;\n  \tvar filter = f.next().value;\n  \twhile(1) {\n  \t\tif( value < filter ) {\n  \t\t\tyield value;\n  \t\t\tvalue = g.next().value;\n  \t\t} else if ( value > filter ) {\n  \t\t\tfilter = f.next().value;\n  \t\t} else {\n  \t\t\tvalue = g.next().value;\n  \t\t\tfilter = f.next().value;\n  \t\t}\n  \t}\n  }\n\n  var squares = PowersGenerator(2);\n  var cubes = PowersGenerator(3);\n\n  var filtered = FilteredGenerator(squares, cubes);\n\n  var curr=0;\n  for(var i=0;i<n;i++) curr=filtered.next();\n\n  return curr.value;\n}\n"],
+      "tests": [{
+        "text": "'<code>exponentialGenerator</code> should be a function.'",
+        "testString": "assert(typeof exponentialGenerator=='function','<code>exponentialGenerator</code> should be a function.');"
+      }, {
+        "text": "'<code>exponentialGenerator()</code> should return a number.'",
+        "testString": "assert(typeof exponentialGenerator(10)=='number','<code>exponentialGenerator()</code> should return a number.');"
+      }, {
+        "text": "'<code>exponentialGenerator(10)</code> should return <code>144</code>.'",
+        "testString": "assert.equal(exponentialGenerator(10),144,'<code>exponentialGenerator(10)</code> should return <code>144</code>.');"
+      }, {
+        "text": "'<code>exponentialGenerator(12)</code> should return <code>196</code>.'",
+        "testString": "assert.equal(exponentialGenerator(12),196,'<code>exponentialGenerator(12)</code> should return <code>196</code>.');"
+      }, {
+        "text": "'<code>exponentialGenerator(14)</code> should return <code>256</code>.'",
+        "testString": "assert.equal(exponentialGenerator(14),256,'<code>exponentialGenerator(14)</code> should return <code>256</code>.');"
+      }, {
+        "text": "'<code>exponentialGenerator(20)</code> should return <code>484</code>.'",
+        "testString": "assert.equal(exponentialGenerator(20),484,'<code>exponentialGenerator(20)</code> should return <code>484</code>.');"
+      }, {
+        "text": "'<code>exponentialGenerator(25)</code> should return <code>784</code>.'",
+        "testString": "assert.equal(exponentialGenerator(25),784,'<code>exponentialGenerator(25)</code> should return <code>784</code>.');"
+      }],
+      "id": "5a23c84252665b21eecc7e7b",
+      "challengeType": 5,
+      "releasedOn": "June 7, 2018",
+      "files": {
+        "indexjs": {
+          "key": "indexjs",
+          "ext": "js",
+          "name": "index",
+          "contents": ["function exponentialGenerator (n) {", "  // Good luck!", "}"],
+          "head": [],
+          "tail": []
+        }
+      }
+    },
+    {
+      "title": "Gray code",
+      "description": ["<a href=\"https://en.wikipedia.org/wiki/Gray code\">Gray code</a> is a form of binary encoding where transitions between consecutive numbers differ by only one bit.", "This is a useful encoding for reducing hardware data hazards with values that change rapidly and/or connect to slower hardware as inputs. ", "It is also useful for generating inputs for <a href=\"https://en.wikipedia.org/wiki/Karnaugh map\">Karnaugh maps</a> in order from left to right or top to bottom. ", "Create a function to encode a number to and decode a number from Gray code. The function should will have 2 parameters. ", "The first would be a boolean. The function should encode for true and decode for false. The second parameter would be the number to be encoded/decoded.", "Display the normal binary representations, Gray code representations, and decoded Gray code values for all 5-bit binary numbers (0-31 inclusive, leading 0's not necessary).", "There are many possible Gray codes. The following encodes what is called \"binary reflected Gray code.\"<br>Encoding (MSB is bit 0, b is binary, g is Gray code): ", "<code><br>if b[i-1] = 1<br><span style=\"padding-left:1em\">g[i] = not b[i]</span><br>else<br><span style=\"padding-left:1em\">g[i] = b[i]</span><br>", "</code>  Or: <br><code> g = b xor (b logically right shifted 1 time)</code><br>Decoding (MSB is bit 0, b is binary, g is Gray code): <br>", "<code>b[0] = g[0]<br>for other bits:<br>b[i] = g[i] xor b[i-1]<br></code>"],
+      "solutions": ["function gray(enc, number){\n  if(enc){\n      return number ^ (number >> 1);\n  }else{\n      let n = number;\n\n      while (number >>= 1) {\n          n ^= number;\n      }\n      return n;\n  }\n}\n"],
+      "tests": [{
+        "text": "'<code>gray</code> should be a function.'",
+        "testString": "assert(typeof gray=='function','<code>gray</code> should be a function.');"
+      }, {
+        "text": "'<code>gray(true,177)</code> should return a number.'",
+        "testString": "assert(typeof gray(true,177)=='number','<code>gray(true,177)</code> should return a number.');"
+      }, {
+        "text": "'<code>gray(true,177)</code> should return <code>233</code>.'",
+        "testString": "assert.equal(gray(true,177),233,'<code>gray(true,177)</code> should return <code>233</code>.');"
+      }, {
+        "text": "'<code>gray(true,425)</code> should return <code>381</code>.'",
+        "testString": "assert.equal(gray(true,425),381,'<code>gray(true,425)</code> should return <code>381</code>.');"
+      }, {
+        "text": "'<code>gray(true,870)</code> should return <code>725</code>.'",
+        "testString": "assert.equal(gray(true,870),725,'<code>gray(true,870)</code> should return <code>725</code>.');"
+      }, {
+        "text": "'<code>gray(false,233)</code> should return <code>177</code>.'",
+        "testString": "assert.equal(gray(false,233),177,'<code>gray(false,233)</code> should return <code>177</code>.');"
+      }, {
+        "text": "'<code>gray(false,381)</code> should return <code>425</code>.'",
+        "testString": "assert.equal(gray(false,381),425,'<code>gray(false,381)</code> should return <code>425</code>.');"
+      }, {
+        "text": "'<code>gray(false,725)</code> should return <code>870</code>.'",
+        "testString": "assert.equal(gray(false,725),870,'<code>gray(false,725)</code> should return <code>870</code>.');"
+      }],
+      "id": "5a23c84252665b21eecc7e80",
+      "challengeType": 5,
+      "releasedOn": "June 7, 2018",
+      "files": {
+        "indexjs": {
+          "key": "indexjs",
+          "ext": "js",
+          "name": "index",
+          "contents": ["function gray(enc, number) {", " // Good luck!", "}"],
+          "head": [],
+          "tail": []
+        }
+      }
+    },
+    {
+      "title": "Greatest common divisor",
+      "description": ["Write a function that returns the greatest common divisor of two integers."],
+      "solutions": ["function gcd(a, b) {\n  return b==0 ? Math.abs(a):gcd(b, a % b);\n}\n"],
+      "tests": [{
+        "text": "'<code>gcd</code> should be a function.'",
+        "testString": "assert(typeof gcd=='function','<code>gcd</code> should be a function.');"
+      }, {
+        "text": "'<code>gcd(24,36)</code> should return a number.'",
+        "testString": "assert(typeof gcd(24,36)=='number','<code>gcd(24,36)</code> should return a number.');"
+      }, {
+        "text": "'<code>gcd(24,36)</code> should return <code>12</code>.'",
+        "testString": "assert.equal(gcd(24,36),12,'<code>gcd(24,36)</code> should return <code>12</code>.');"
+      }, {
+        "text": "'<code>gcd(30,48)</code> should return <code>6</code>.'",
+        "testString": "assert.equal(gcd(30,48),6,'<code>gcd(30,48)</code> should return <code>6</code>.');"
+      }, {
+        "text": "'<code>gcd(10,15)</code> should return <code>5</code>.'",
+        "testString": "assert.equal(gcd(10,15),5,'<code>gcd(10,15)</code> should return <code>5</code>.');"
+      }, {
+        "text": "'<code>gcd(100,25)</code> should return <code>25</code>.'",
+        "testString": "assert.equal(gcd(100,25),25,'<code>gcd(100,25)</code> should return <code>25</code>.');"
+      }, {
+        "text": "'<code>gcd(13,250)</code> should return <code>1</code>.'",
+        "testString": "assert.equal(gcd(13,250),1,'<code>gcd(13,250)</code> should return <code>1</code>.');"
+      }, {
+        "text": "'<code>gcd(1300,250)</code> should return <code>50</code>.'",
+        "testString": "assert.equal(gcd(1300,250),50,'<code>gcd(1300,250)</code> should return <code>50</code>.');"
+      }],
+      "id": "5a23c84252665b21eecc7e82",
+      "challengeType": 5,
+      "releasedOn": "June 7, 2018",
+      "files": {
+        "indexjs": {
+          "key": "indexjs",
+          "ext": "js",
+          "name": "index",
+          "contents": ["function gcd(a, b) {", "  // Good luck!", "}"],
+          "head": [],
+          "tail": []
+        }
+      }
+    },
+    {
+      "title": "Greatest subsequential sum",
+      "description": ["Given a sequence of integers, find a continuous subsequence which maximizes the sum of its elements, that is, the elements of no other single subsequence add up to a value larger than this one.", "An empty subsequence is considered to have the sum of \\( 0 \\);  thus if all elements are negative, the result must be the empty sequence."],
+      "solutions": ["function maximumSubsequence(population) {\n  function sumValues(arr) {\n      var result = 0;\n      for (var i = 0, len = arr.length; i < len; i++) {\n          result += arr[i];\n      }\n      return result;\n  }\n  var greatest;\n  var maxValue = 0;\n  var subsequence = [];\n\n  for (var i = 0, len = population.length; i < len; i++) {\n      for (var j = i; j <= len; j++) {\n          var subsequence = population.slice(i, j);\n          var value = sumValues(subsequence);\n          if (value > maxValue) {\n              maxValue = value;\n              greatest = subsequence;\n          };\n      }\n  }\n\n  return greatest;\n}\n\n\n"],
+      "tests": [{
+        "text": "'<code>maximumSubsequence</code> should be a function.'",
+        "testString": "assert(typeof maximumSubsequence=='function','<code>maximumSubsequence</code> should be a function.');"
+      }, {
+        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return an array.'",
+        "testString": "assert(Array.isArray(maximumSubsequence(tests[0])),'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return an array.');"
+      }, {
+        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.'",
+        "testString": "assert.deepEqual(maximumSubsequence(tests[0]),results[0],'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.');"
+      }, {
+        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.'",
+        "testString": "assert.deepEqual(maximumSubsequence(tests[1]),results[1],'<code>maximumSubsequence('+JSON.stringify(tests[1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.');"
+      }, {
+        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[2])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.'",
+        "testString": "assert.deepEqual(maximumSubsequence(tests[2]),results[2],'<code>maximumSubsequence('+JSON.stringify(tests[2])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.');"
+      }, {
+        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[3])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.'",
+        "testString": "assert.deepEqual(maximumSubsequence(tests[3]),results[3],'<code>maximumSubsequence('+JSON.stringify(tests[3])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.');"
+      }, {
+        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[4])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.'",
+        "testString": "assert.deepEqual(maximumSubsequence(tests[4]),results[4],'<code>maximumSubsequence('+JSON.stringify(tests[4])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.');"
+      }, {
+        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[5])+')</code> should return <code>'+JSON.stringify(results[5])+'</code>.'",
+        "testString": "assert.deepEqual(maximumSubsequence(tests[5]),results[5],'<code>maximumSubsequence('+JSON.stringify(tests[5])+')</code> should return <code>'+JSON.stringify(results[5])+'</code>.');"
+      }],
+      "id": "5a23c84252665b21eecc7e84",
+      "challengeType": 5,
+      "releasedOn": "June 7, 2018",
+      "files": {
+        "indexjs": {
+          "key": "indexjs",
+          "ext": "js",
+          "name": "index",
+          "contents": ["function maximumSubsequence (population) {", "  // Good luck!", "}"],
+          "head": [],
+          "tail": ["let tests=[ [1,2,-1,3,10,-10],", "            [0, 8, 10, -2, -4, -1, -5, -3],", "            [9, 9, -10, 1],", "            [7, 1, -5, -3, -8, 1],", "            [-3, 6, -1, 4, -4, -6],", "            [-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1]]", "let results=[ [ 1, 2, -1, 3, 10 ],", "          [ 0, 8, 10 ],", "          [ 9, 9 ],", "          [ 7, 1 ],", "          [ 6, -1, 4 ],", "          [ 3, 5, 6, -2, -1, 4 ] ]"]
+        }
+      }
+    },
     {
       "title": "Hailstone sequence",
       "description": [
-- 
2.17.1

