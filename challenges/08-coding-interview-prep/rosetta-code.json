{
  "name": "Rosetta Code",
  "order": 5,
  "time": "",
  "helpRoom": "",
  "nChallenges": 437,
  "challenges": [
    {
      "title": "100 doors",
      "description": [
        "<p>There are 100 doors in a row that are all initially closed. You make 100 passes by the doors. The first time through, visit every door and 'toggle' the door (if the door is closed, open it; if it is open, close it). The second time, only visit every 2nd door (i.e., door #2, #4, #6, ...) and toggle it. The third time, visit every 3rd door (i.e., door #3, #6, #9, ...), etc., until you only visit the 100th door.</p>",
        "<p>Implement a function to determine the state of the doors after the last pass. Return the final result in an array, with only the door number included in the array if it is open.</p>"
      ],
      "solutions": [
        "function getFinalOpenedDoors (numDoors) {\n  // this is the final pattern (always squares).\n  // thus, the most efficient solution simply returns an array of squares up to numDoors).\n  const finalState = [];\n  let i = 1;\n  while (Math.pow(i, 2) <= numDoors) {\n    finalState.push(Math.pow(i, 2));\n    i++;\n  }\n  return finalState;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>getFinalOpenedDoors</code> is a function.",
          "testString": "assert(typeof getFinalOpenedDoors === 'function', '<code>getFinalOpenedDoors</code> is a function.');"
        },
        {
          "text": "<code>getFinalOpenedDoors</code> should return an array.",
          "testString": "assert(Array.isArray(getFinalOpenedDoors(100)), '<code>getFinalOpenedDoors</code> should return an array.');"
        },
        {
          "text": "<code>getFinalOpenedDoors</code> did not produce the correct results.",
          "testString": "assert.deepEqual(getFinalOpenedDoors(100), solution, '<code>getFinalOpenedDoors</code> did not produce the correct results.');"
        }
      ],
      "id": "594810f028c0303b75339acb",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function getFinalOpenedDoors (numDoors) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const solution = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100];"
          ]
        }
      }
    },
    {
      "title": "24 game",
      "description": [
        "<p>Implement a function that takes a string of four digits as its argument, with each digit from 1 ──► 9 (inclusive) with repetitions allowed, and returns an arithmetic expression that evaluates to the number 24. If no such solution exists, return \"no solution exists.\"</p>",
        "<p>Rules:</p>",
        " Only the following operators/functions are allowed: multiplication, division, addition, subtraction",
        " Division should use floating point or rational arithmetic, etc, to preserve remainders.",
        " Forming multiple digit numbers from the supplied digits is disallowed. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong).",
        " The order of the digits when given does not have to be preserved.",
        "<p>Example inputs:</p>",
        "<code>solve24(\"4878\");</code>",
        "<code>solve24(\"1234\");</code>",
        "<code>solve24(\"6789\");</code>",
        "<code>solve24(\"1127\");</code>",
        "<p>Example outputs (strings):</p>",
        "<code>(7-8/8)*4</code>",
        "<code>3*1*4*2</code>",
        "<code>(6*8)/(9-7)</code>",
        "<code>(1+7)*(2+1)</code>"
      ],
      "solutions": [
        "// noprotect\n\nfunction solve24 (numStr) {\n  const digitsArr = numStr.split('');\n  const answers = [];\n\n  const digitPermutations = [];\n  const operatorPermutations = [];\n\n  function generateDigitPermutations (digits, permutations = []) {\n    if (digits.length === 0) {\n      digitPermutations.push(permutations);\n    }\n    else {\n      for (let i = 0; i < digits.length; i++) {\n        const curr = digits.slice();\n        const next = curr.splice(i, 1);\n        generateDigitPermutations(curr.slice(), permutations.concat(next));\n      }\n    }\n  }\n\n  function generateOperatorPermutations (permutations = []) {\n    const operators = ['+', '-', '*', '/'];\n    if (permutations.length === 3) {\n      operatorPermutations.push(permutations);\n    }\n    else {\n      for (let i = 0; i < operators.length; i++) {\n        const curr = permutations.slice();\n        curr.push(operators[i]);\n        generateOperatorPermutations(curr);\n      }\n    }\n  }\n\n  generateDigitPermutations(digitsArr);\n  generateOperatorPermutations();\n\n  interleave();\n\n  return answers[0];\n\n  function interleave () {\n    for (let i = 0; i < digitPermutations.length; i++) {\n      for (let j = 0; j < operatorPermutations.length; j++) {\n        const d = digitPermutations[i];\n        const o = operatorPermutations[j];\n        const perm = [\n          `${d[0]}${o[0]}${d[1]}${o[1]}${d[2]}${o[2]}${d[3]}`,\n          `(${d[0]}${o[0]}${d[1]})${o[1]}${d[2]}${o[2]}${d[3]}`,\n          `${d[0]}${o[0]}(${d[1]}${o[1]}${d[2]})${o[2]}${d[3]}`,\n          `${d[0]}${o[0]}${d[1]}${o[1]}(${d[2]}${o[2]}${d[3]})`,\n          `${d[0]}${o[0]}(${d[1]}${o[1]}${d[2]}${o[2]}${d[3]})`,\n          `(${d[0]}${o[0]}${d[1]}${o[1]}${d[2]})${o[2]}${d[3]}`,\n          `(${d[0]}${o[0]}${d[1]})${o[1]}(${d[2]}${o[2]}${d[3]})`\n        ];\n\n        perm.forEach(combination => {\n          const res = eval(combination);\n\n          if (res === 24) {\n            return answers.push(combination);\n          }\n        });\n      }\n    }\n  }\n}\n"
      ],
      "tests": [
        {
          "text": "<code>solve24</code> is a function.",
          "testString": "assert(typeof solve24 === 'function', '<code>solve24</code> is a function.');"
        },
        {
          "text": "<code>solve24(\"4878\")</code> should return <code>(7-8/8)*4</code> or <code>4*(7-8/8)</code>",
          "testString": "assert(include(answers[0], solve24(testCases[0])), '<code>solve24(\"4878\")</code> should return <code>(7-8/8)*4</code> or <code>4*(7-8/8)</code>');"
        },
        {
          "text": "<code>solve24(\"1234\")</code> should return any arrangement of <code>1*2*3*4</code>",
          "testString": "assert(include(answers[1], solve24(testCases[1])), '<code>solve24(\"1234\")</code> should return any arrangement of <code>1*2*3*4</code>');"
        },
        {
          "text": "<code>solve24(\"6789\")</code> should return <code>(6*8)/(9-7)</code> or <code>(8*6)/(9-7)</code>",
          "testString": "assert(include(answers[2], solve24(testCases[2])), '<code>solve24(\"6789\")</code> should return <code>(6*8)/(9-7)</code> or <code>(8*6)/(9-7)</code>');"
        },
        {
          "text": "<code>solve24(\"1127\")</code> should return a permutation of <code>(1+7)*(1*2)</code>",
          "testString": "assert(include(answers[3], solve24(testCases[3])), '<code>solve24(\"1127\")</code> should return a permutation of <code>(1+7)*(1*2)</code>');"
        }
      ],
      "id": "5951e88f64ebf159166a1176",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function solve24 (numStr) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = [",
            "  '4878',",
            "  '1234',",
            "  '6789',",
            "  '1127'",
            "];",
            "",
            "const answers = [",
            "  ['(7-8/8)*4', '4*(7-8/8)', '(4-8+7)*8', '(4+7-8)*8', '(7+4-8)*8', '(7-8+4)*8', '8*(4-8+7)', '8*(4+7-8)', '8*(7+4-8)', '8*(7-8+4)'],",
            "  ['1*2*3*4', '1*2*4*3', '1*3*2*4', '1*3*4*2', '1*4*2*3', '1*4*3*2', '2*1*3*4', '2*1*4*3', '2*3*1*4', '2*3*4*1', '2*4*3*1', '2*4*1*3', '3*1*2*4', '3*1*4*2', '3*2*1*4', '3*2*4*1', '3*4*1*2', '3*4*2*1', '4*1*2*3', '4*1*3*2', '4*2*1*3', '4*2*3*1', '4*3*1*2', '4*3*2*1', '(1+2+3)*4', '(1+3+2)*4', '(2+1+3)*4', '(2+3+1)*4', '(3+1+2)*4', '(3+2+1)*4', '4*(1+2+3)', '4*(2+1+3)', '4*(2+3+1)', '4*(3+1+2)', '4*(3+2+1)'],",
            "  ['(6*8)/(9-7)', '(8*6)/(9-7)', '6*8/(9-7)', '8*6/(9-7)'],",
            "  ['(1+7)*(2+1)', '(1+7)*(1+2)', '(1+2)*(1+7)', '(1+2)*(7+1)', '(2+1)*(1+7)', '(7+1)*(2+1)']",
            "];",
            "",
            "function include(ansArr, res) {",
            "  const index = ansArr.indexOf(res);",
            "  return index >= 0;",
            "}"
          ]
        }
      }
    },
    {
      "title": "9 billion names of God the integer",
      "description": [
        "<p>This task is a variation of the <a href=\"https://en.wikipedia.org/wiki/The Nine Billion Names of God#Plot_summary\" title=\"wp: The Nine Billion Names of God#Plot_summary\">short story by Arthur C. Clarke</a>.</p>",
        "<p>(Solvers should be aware of the consequences of completing this task.)</p>",
        "<p>In detail, to specify what is meant by a  “name”:</p>",
        "<p>The integer 1 has 1 name “1”.</p>",
        "<p>The integer 2 has 2 names “1+1”, and “2”.</p>",
        "<p>The integer 3 has 3 names “1+1+1”, “2+1”,  and “3”.</p>",
        "<p>The integer 4 has 5 names “1+1+1+1”, “2+1+1”, “2+2”, “3+1”, “4”.</p>",
        "<p>The integer 5 has 7 names “1+1+1+1+1”, “2+1+1+1”, “2+2+1”, “3+1+1”, “3+2”, “4+1”, “5”.</p>",
        "<p>This can be visualized in the following form:</p>",
        "<pre>",
        "          1",
        "        1   1",
        "      1   1   1",
        "    1   2   1   1",
        "  1   2   2   1   1",
        "1   3   3   2   1   1",
        "</pre>",
        "<p>Where row  $n$  corresponds to integer  $n$,  and each column  $C$  in row  $m$  from left to right corresponds to the number of names beginning with $C$.</p>",
        "<p>Optionally note that the sum of the  $n$-th  row  $P(n)$  is the   <a href=\"http://mathworld.wolfram.com/PartitionFunctionP.html\" title=\"link: http://mathworld.wolfram.com/PartitionFunctionP.html\">integer partition function</a>.</p>",
        "Task",
        "<p>Implement a function that returns the sum of the  $n$-th  row.</p>"
      ],
      "solutions": [
        "function numberOfNames (num) {\n  const cache = [\n    [1]\n  ];\n  for (let l = cache.length; l < num + 1; l++) {\n    let Aa;\n    let Mi;\n    const r = [0];\n    for (let x = 1; x < l + 1; x++) {\n      r.push(r[r.length - 1] + (Aa = cache[l - x < 0 ? cache.length - (l - x) : l - x])[(Mi = Math.min(x, l - x)) < 0 ? Aa.length - Mi : Mi]);\n    }\n    cache.push(r);\n  }\n  return cache[num][cache[num].length - 1];\n}\n"
      ],
      "tests": [
        {
          "text": "<code>numberOfNames</code> is a function.",
          "testString": "assert(typeof numberOfNames === 'function', '<code>numberOfNames</code> is a function.');"
        },
        {
          "text": "<code>numberOfNames(5)</code> should equal 7.",
          "testString": "assert.equal(numberOfNames(5), 7, '<code>numberOfNames(5)</code> should equal 7.');"
        },
        {
          "text": "<code>numberOfNames(12)</code> should equal 77.",
          "testString": "assert.equal(numberOfNames(12), 77, '<code>numberOfNames(12)</code> should equal 77.');"
        },
        {
          "text": "<code>numberOfNames(18)</code> should equal 385.",
          "testString": "assert.equal(numberOfNames(18), 385, '<code>numberOfNames(18)</code> should equal 385.');"
        },
        {
          "text": "<code>numberOfNames(23)</code> should equal 1255.",
          "testString": "assert.equal(numberOfNames(23), 1255, '<code>numberOfNames(23)</code> should equal 1255.');"
        },
        {
          "text": "<code>numberOfNames(42)</code> should equal 53174.",
          "testString": "assert.equal(numberOfNames(42), 53174, '<code>numberOfNames(42)</code> should equal 53174.');"
        },
        {
          "text": "<code>numberOfNames(123)</code> should equal 2552338241.",
          "testString": "assert.equal(numberOfNames(123), 2552338241, '<code>numberOfNames(123)</code> should equal 2552338241.');"
        }
      ],
      "id": "5949b579404977fbaefcd736",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function numberOfNames (num) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "ABC Problem",
      "description": [
        "<p>You are given a collection of ABC blocks (e.g., childhood alphabet blocks). There are 20 blocks with two letters on each block. A complete alphabet is guaranteed amongst all sides of the blocks. The sample collection of blocks:</p>",
        "<p>(B O)</p>",
        "<p>(X K)</p>",
        "<p>(D Q)</p>",
        "<p>(C P)</p>",
        "<p>(N A)</p>",
        "<p>(G T)</p>",
        "<p>(R E)</p>",
        "<p>(T G)</p>",
        "<p>(Q D)</p>",
        "<p>(F S)</p>",
        "<p>(J W)</p>",
        "<p>(H U)</p>",
        "<p>(V I)</p>",
        "<p>(A N)</p>",
        "<p>(O B)</p>",
        "<p>(E R)</p>",
        "<p>(F S)</p>",
        "<p>(L Y)</p>",
        "<p>(P C)</p>",
        "<p>(Z M)</p>",
        "<p>Some rules to keep in mind:</p>",
        "Once a letter on a block is used, that block cannot be used again.",
        "The function should be case-insensitive.",
        "<p>Implement a function that takes a string (word) and determines whether the word can be spelled with the given collection of blocks.</p>"
      ],
      "solutions": [
        "function canMakeWord (word) {\n  const characters = 'BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM';\n  const blocks = characters.split(' ').map(pair => pair.split(''));\n\n  const letters = [...word.toUpperCase()];\n  let length = letters.length;\n  const copy = new Set(blocks);\n\n  letters.forEach(letter => {\n    for (let block of copy) {\n      const index = block.indexOf(letter);\n\n      if (index !== -1) {\n        length--;\n        copy.delete(block);\n        break;\n      }\n    }\n  });\n  return !length;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>canMakeWord</code> is a function.",
          "testString": "assert(typeof canMakeWord === 'function', '<code>canMakeWord</code> is a function.');"
        },
        {
          "text": "<code>canMakeWord</code> should return a boolean.",
          "testString": "assert(typeof canMakeWord('hi') === 'boolean', '<code>canMakeWord</code> should return a boolean.');"
        },
        {
          "text": "<code>canMakeWord(\"bark\")</code> should return true.",
          "testString": "assert(canMakeWord(words[0]), '<code>canMakeWord(\"bark\")</code> should return true.');"
        },
        {
          "text": "<code>canMakeWord(\"BooK\")</code> should return false.",
          "testString": "assert(!canMakeWord(words[1]), '<code>canMakeWord(\"BooK\")</code> should return false.');"
        },
        {
          "text": "<code>canMakeWord(\"TReAT\")</code> should return true.",
          "testString": "assert(canMakeWord(words[2]), '<code>canMakeWord(\"TReAT\")</code> should return true.');"
        },
        {
          "text": "<code>canMakeWord(\"COMMON\")</code> should return false.",
          "testString": "assert(!canMakeWord(words[3]), '<code>canMakeWord(\"COMMON\")</code> should return false.');"
        },
        {
          "text": "<code>canMakeWord(\"squAD\")</code> should return true.",
          "testString": "assert(canMakeWord(words[4]), '<code>canMakeWord(\"squAD\")</code> should return true.');"
        },
        {
          "text": "<code>canMakeWord(\"conFUSE\")</code> should return true.",
          "testString": "assert(canMakeWord(words[5]), '<code>canMakeWord(\"conFUSE\")</code> should return true.');"
        }
      ],
      "id": "594810f028c0303b75339acc",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function canMakeWord (word) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const words = ['bark', 'BooK', 'TReAT', 'COMMON', 'squAD', 'conFUSE'];"
          ]
        }
      }
    },
    {
      "title": "Abundant, deficient and perfect number classifications",
      "description": [
        "<p>These define three classifications of positive integers based on their <a href=\"http://rosettacode.org/wiki/Proper divisors\" title=\"Proper divisors\">proper divisors</a>.</p>",
        "<p>Let $P(n)$ be the sum of the proper divisors of n where proper divisors are all positive integers n other than n itself.</p>",
        "<p>If <code>P(n) < n</code> then n is classed as \"deficient\"</p>",
        "<p>If <code>P(n) === n</code> then n is classed as \"perfect\"</p>",
        "<p>If <code>P(n) > n</code> then n is classed as \"abundant\"</p>",
        "<p>Example:</p>",
        "<p>6 has proper divisors of 1, 2, and 3.</p>",
        "<p>1 + 2 + 3 = 6, so 6 is classed as a perfect number.</p>",
        "<p>Implement a function that calculates how many of the integers from 1 to 20,000 (inclusive) are in each of the three classes. Output the result as an array in the following format <code>[deficient, perfect, abundant]</code>.</p>"
      ],
      "solutions": [
        "function getDPA (num) {\n  const dpa = [1, 0, 0];\n  for (let n = 2; n <= num; n += 1) {\n    let ds = 1;\n    const e = Math.sqrt(n);\n    for (let d = 2; d < e; d += 1) {\n      if (n % d === 0) {\n        ds += d + (n / d);\n      }\n    }\n    if (n % e === 0) {\n      ds += e;\n    }\n    dpa[ds < n ? 0 : ds === n ? 1 : 2] += 1;\n  }\n  return dpa;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>getDPA</code> is a function.",
          "testString": "assert(typeof getDPA === 'function', '<code>getDPA</code> is a function.');"
        },
        {
          "text": "<code>getDPA</code> should return an array.",
          "testString": "assert(Array.isArray(getDPA(100)), '<code>getDPA</code> should return an array.');"
        },
        {
          "text": "<code>getDPA</code> return value should have a length of 3.",
          "testString": "assert(getDPA(100).length === 3, '<code>getDPA</code> return value should have a length of 3.');"
        },
        {
          "text": "<code>getDPA(20000)</code> should equal [15043, 4, 4953]",
          "testString": "assert.deepEqual(getDPA(20000), solution, '<code>getDPA(20000)</code> should equal [15043, 4, 4953]');"
        }
      ],
      "id": "594810f028c0303b75339acd",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function getDPA (num) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const solution = [15043, 4, 4953];"
          ]
        }
      }
    },
    {
      "title": "Accumulator factory",
      "description": [
        "<p>Create a function that takes a single (numeric) argument and returns another function that is an accumulator. The returned accumulator function in turn also takes a single numeric argument, and returns the sum of all the numeric values passed in so far to that accumulator (including the initial value passed when the accumulator was created).</p>",
        "<p>Rules:</p>",
        "<p>Do not use global variables.</p>",
        "<p>Hint:</p>",
        "<p>Closures save outer state.</p>"
      ],
      "solutions": [
        "function accumulator (sum) {\n  return function (n) {\n    return sum += n;\n  };\n}\n"
      ],
      "tests": [
        {
          "text": "<code>accumulator</code> is a function.",
          "testString": "assert(typeof accumulator === 'function', '<code>accumulator</code> is a function.');"
        },
        {
          "text": "<code>accumulator(0)</code> should return a function.",
          "testString": "assert(typeof accumulator(0) === 'function', '<code>accumulator(0)</code> should return a function.');"
        },
        {
          "text": "<code>accumulator(0)(2)</code> should return a number.",
          "testString": "assert(typeof accumulator(0)(2) === 'number', '<code>accumulator(0)(2)</code> should return a number.');"
        },
        {
          "text": "Passing in the values 3, -4, 1.5, and 5 should return 5.5.",
          "testString": "assert(testFn(5) === 5.5, 'Passing in the values 3, -4, 1.5, and 5 should return 5.5.');"
        }
      ],
      "id": "594810f028c0303b75339ace",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function accumulator (sum) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const testFn = typeof accumulator(3) === 'function' && accumulator(3);",
            "if (testFn) {",
            "  testFn(-4);",
            "  testFn(1.5);",
            "}"
          ]
        }
      }
    },
    {
      "title": "Ackermann function",
      "description": [
        "<p>The Ackermann function is a classic example of a recursive function, notable especially because it is not a primitive recursive function. It grows very quickly in value, as does the size of its call tree.</p>",
        "<p>The Ackermann function is usually defined as follows:</p>",
        "$$A(m, n) =",
        " \\begin{cases}",
        " n+1 & \\mbox{if } m = 0 \\\\",
        " A(m-1, 1) & \\mbox{if } m > 0 \\mbox{ and } n = 0 \\\\",
        " A(m-1, A(m, n-1)) & \\mbox{if } m > 0 \\mbox{ and } n > 0.",
        " \\end{cases}$$",
        "<p>Its arguments are never negative and it always terminates. Write a function which returns the value of $A(m, n)$. Arbitrary precision is preferred (since the function grows so quickly), but not required.</p>"
      ],
      "solutions": [
        "function ack (m, n) {\n  return m === 0 ? n + 1 : ack(m - 1, n === 0 ? 1 : ack(m, n - 1));\n}\n"
      ],
      "tests": [
        {
          "text": "<code>ack</code> is a function.",
          "testString": "assert(typeof ack === 'function', '<code>ack</code> is a function.');"
        },
        {
          "text": "<code>ack(0, 0)</code> should return 1.",
          "testString": "assert(ack(0, 0) === 1, '<code>ack(0, 0)</code> should return 1.');"
        },
        {
          "text": "<code>ack(1, 1)</code> should return 3.",
          "testString": "assert(ack(1, 1) === 3, '<code>ack(1, 1)</code> should return 3.');"
        },
        {
          "text": "<code>ack(2, 5)</code> should return 13.",
          "testString": "assert(ack(2, 5) === 13, '<code>ack(2, 5)</code> should return 13.');"
        },
        {
          "text": "<code>ack(3, 3)</code> should return 61.",
          "testString": "assert(ack(3, 3) === 61, '<code>ack(3, 3)</code> should return 61.');"
        }
      ],
      "id": "594810f028c0303b75339acf",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function ack (m, n) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Align columns",
      "description": [
        "<p>Given a text file of many lines, where fields within a line are delineated by a single <code>$</code> character, write a program that aligns each column of fields by ensuring that words in each column are separated by at least one space. Further, allow for each word in a column to be either left justified, right justified, or center justified within its column.</p>",
        "<p>Use the following text to test your programs:</p>",
        "<pre>",
        "Given$a$text$file$of$many$lines",
        "where$fields$within$a$line$",
        "are$delineated$by$a$single$'dollar'$character",
        "write$a$program",
        "that$aligns$each$column$of$fields",
        "by$ensuring$that$words$in$each$",
        "column$are$separated$by$at$least$one$space.",
        "Further,$allow$for$each$word$in$a$column$to$be$either$left$",
        "justified,$right$justified",
        "or$center$justified$within$its$column.",
        "</pre>",
        "<p>Note that:</p>",
        "The example input texts lines may, or may not, have trailing dollar characters.",
        "All columns should share the same alignment.",
        "Consecutive space characters produced adjacent to the end of lines are insignificant for the purposes of the task.",
        "Output text will be viewed in a mono-spaced font on a plain text editor or basic terminal.",
        "The minimum space between columns should be computed from the text and not hard-coded.",
        "It is not a requirement to add separating characters between or around columns."
      ],
      "solutions": [
        "const testArr = [\n  'Given$a$text$file$of$many$lines',\n  'where$fields$within$a$line$',\n  'are$delineated$by$a$single$\"dollar\"$character',\n  'write$a$program',\n  'that$aligns$each$column$of$fields$',\n  'by$ensuring$that$words$in$each$',\n  'column$are$separated$by$at$least$one$space.',\n  'Further,$allow$for$each$word$in$a$column$to$be$either$left$',\n  'justified,$right$justified',\n  'or$center$justified$within$its$column.'\n];\n\nString.prototype.repeat = function (n) { return new Array(1 + parseInt(n)).join(this); };\n\nfunction formatText (input, justification) {\n  let x, y, max, cols = 0, diff, left, right;\n  for (x = 0; x < input.length; x++) {\n    input[x] = input[x].split('$');\n    if (input[x].length > cols) {\n      cols = input[x].length;\n    }\n  }\n  for (x = 0; x < cols; x++) {\n    max = 0;\n    for (y = 0; y < input.length; y++) {\n      if (input[y][x] && max < input[y][x].length) {\n        max = input[y][x].length;\n      }\n    }\n    for (y = 0; y < input.length; y++) {\n      if (input[y][x]) {\n        diff = (max - input[y][x].length) / 2;\n        left = ' '.repeat(Math.floor(diff));\n        right = ' '.repeat(Math.ceil(diff));\n        if (justification === 'left') {\n          right += left; left = '';\n        }\n        if (justification === 'right') {\n          left += right; right = '';\n        }\n        input[y][x] = left + input[y][x] + right;\n      }\n    }\n  }\n  for (x = 0; x < input.length; x++) {\n    input[x] = input[x].join(' ');\n  }\n  input = input.join('\\n');\n  return input;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>formatText</code> is a function.",
          "testString": "assert(typeof formatText === 'function', '<code>formatText</code> is a function.');"
        },
        {
          "text": "<code>formatText</code> with the above input and \"right\" justification should produce the following: ",
          "testString": "assert.strictEqual(formatText(testInput, 'right'), rightAligned, '<code>formatText</code> with the above input and \"right\" justification should produce the following: ');"
        },
        {
          "text": "<code>formatText</code> with the above input and \"left\" justification should produce the following: ",
          "testString": "assert.strictEqual(formatText(testInput, 'left'), leftAligned, '<code>formatText</code> with the above input and \"left\" justification should produce the following: ');"
        },
        {
          "text": "<code>formatText</code> with the above input and \"center\" justification should produce the following: ",
          "testString": "assert.strictEqual(formatText(testInput, 'center'), centerAligned, '<code>formatText</code> with the above input and \"center\" justification should produce the following: ');"
        }
      ],
      "id": "594810f028c0303b75339ad0",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "const testArr = [",
            "  'Given$a$text$file$of$many$lines',",
            "  'where$fields$within$a$line$',",
            "  'are$delineated$by$a$single$\"dollar\"$character',",
            "  'write$a$program',",
            "  'that$aligns$each$column$of$fields$',",
            "  'by$ensuring$that$words$in$each$',",
            "  'column$are$separated$by$at$least$one$space.',",
            "  'Further,$allow$for$each$word$in$a$column$to$be$either$left$',",
            "  'justified,$right$justified',",
            "  'or$center$justified$within$its$column.'",
            "];",
            "",
            "function formatText (input, justification) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const testInput = [",
            "  'Given$a$text$file$of$many$lines',",
            "  'where$fields$within$a$line$',",
            "  'are$delineated$by$a$single$\"dollar\"$character',",
            "  'write$a$program',",
            "  'that$aligns$each$column$of$fields$',",
            "  'by$ensuring$that$words$in$each$',",
            "  'column$are$separated$by$at$least$one$space.',",
            "  'Further,$allow$for$each$word$in$a$column$to$be$either$left$',",
            "  'justified,$right$justified',",
            "  'or$center$justified$within$its$column.'",
            "];",
            "",
            "const rightAligned = `     Given          a      text   file     of     many     lines",
            "     where     fields    within      a   line ",
            "       are delineated        by      a single \"dollar\" character",
            "     write          a   program",
            "      that     aligns      each column     of   fields ",
            "        by   ensuring      that  words     in     each ",
            "    column        are separated     by     at    least       one space.",
            "  Further,      allow       for   each   word       in         a column to be either left ",
            "justified,      right justified",
            "        or     center justified within    its  column.`;",
            "",
            "const leftAligned = `Given      a          text      file   of     many     lines    ",
            "where      fields     within    a      line   ",
            "are        delineated by        a      single \"dollar\" character",
            "write      a          program  ",
            "that       aligns     each      column of     fields   ",
            "by         ensuring   that      words  in     each     ",
            "column     are        separated by     at     least    one       space.",
            "Further,   allow      for       each   word   in       a         column to be either left ",
            "justified, right      justified",
            "or         center     justified within its    column. `;",
            "",
            "const centerAligned = `  Given        a        text     file    of     many     lines  ",
            "  where      fields    within     a     line  ",
            "   are     delineated    by       a    single \"dollar\" character",
            "  write        a       program ",
            "   that      aligns     each    column   of    fields  ",
            "    by      ensuring    that    words    in     each   ",
            "  column      are     separated   by     at    least      one    space.",
            " Further,    allow       for     each   word     in        a     column to be either left ",
            "justified,   right    justified",
            "    or       center   justified within  its   column. `;"
          ]
        }
      }
    },
    {
      "title": "Amicable pairs",
      "description": [
        "Two integers $N$ and $M$ are said to be <a href=\"https://en.wikipedia.org/wiki/Amicable numbers\" title=\"wp: Amicable numbers\">amicable pairs</a> if $N \\neq M$ and the sum of the <a href=\"http://rosettacode.org/wiki/Proper divisors\" title=\"Proper divisors\">proper divisors</a> of $N$ ($\\mathrm{sum}(\\mathrm{propDivs}(N))$) $= M$ as well as $\\mathrm{sum}(\\mathrm{propDivs}(M)) = N$.",
        "Example:",
        "1184 and 1210 are an amicable pair, with proper divisors:",
        " 1, 2, 4, 8, 16, 32, 37, 74, 148, 296, 592  and ",
        " 1, 2, 5, 10, 11, 22, 55, 110, 121, 242, 605   respectively.",
        "Task:",
        "Calculate and show here the Amicable pairs below 20,000 (there are eight).",
        "Related tasks",
        "<a href=\"http://rosettacode.org/wiki/Proper divisors\" title=\"Proper divisors\">Proper divisors</a>",
        "<a href=\"http://rosettacode.org/wiki/Abundant, deficient and perfect number classifications\" title=\"Abundant, deficient and perfect number classifications\">Abundant, deficient and perfect number classifications</a>",
        "<a href=\"http://rosettacode.org/wiki/Aliquot sequence classifications\" title=\"Aliquot sequence classifications\">Aliquot sequence classifications</a> and its amicable classification."
      ],
      "solutions": [
        "// amicablePairsUpTo :: Int -> [(Int, Int)]\nfunction amicablePairsUpTo (maxNum) {\n  return range(1, maxNum)\n    .map(x => properDivisors(x)\n      .reduce((a, b) => a + b, 0))\n    .reduce((a, m, i, lst) => {\n      const n = i + 1;\n\n      return (m > n) && lst[m - 1] === n ?\n        a.concat([\n          [n, m]\n        ]) : a;\n    }, []);\n}\n\n// properDivisors :: Int -> [Int]\nfunction properDivisors (n) {\n  if (n < 2) return [];\n\n  const rRoot = Math.sqrt(n);\n  const intRoot = Math.floor(rRoot);\n  const blnPerfectSquare = rRoot === intRoot;\n  const lows = range(1, intRoot)\n  .filter(x => (n % x) === 0);\n\n  return lows.concat(lows.slice(1)\n    .map(x => n / x)\n    .reverse()\n    .slice(blnPerfectSquare | 0));\n}\n\n// Int -> Int -> Maybe Int -> [Int]\nfunction range (m, n, step) {\n  const d = (step || 1) * (n >= m ? 1 : -1);\n\n  return Array.from({\n    length: Math.floor((n - m) / d) + 1\n  }, (_, i) => m + (i * d));\n}\n"
      ],
      "tests": [
        {
          "text": "<code>amicablePairsUpTo</code> is a function.",
          "testString": "assert(typeof amicablePairsUpTo === 'function', '<code>amicablePairsUpTo</code> is a function.');"
        },
        {
          "text": "<code>amicablePairsUpTo(300)</code> should return <code>[[220,284]]</code>.",
          "testString": "assert.deepEqual(amicablePairsUpTo(300), answer300, '<code>amicablePairsUpTo(300)</code> should return <code>[[220,284]]</code>.');"
        },
        {
          "text": "<code>amicablePairsUpTo(3000)</code> should return <code>[[220,284],[1184,1210],[2620,2924]]</code>.",
          "testString": "assert.deepEqual(amicablePairsUpTo(3000), answer3000, '<code>amicablePairsUpTo(3000)</code> should return <code>[[220,284],[1184,1210],[2620,2924]]</code>.');"
        },
        {
          "text": "<code>amicablePairsUpTo(20000)</code> should return <code>[[220,284],[1184,1210],[2620,2924],[5020,5564],[6232,6368],[10744,10856],[12285,14595],[17296,18416]]</code>.",
          "testString": "assert.deepEqual(amicablePairsUpTo(20000), answer20000, '<code>amicablePairsUpTo(20000)</code> should return <code>[[220,284],[1184,1210],[2620,2924],[5020,5564],[6232,6368],[10744,10856],[12285,14595],[17296,18416]]</code>.');"
        }
      ],
      "id": "5949b579404977fbaefcd737",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function amicablePairsUpTo (maxNum) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const answer300 = [[220, 284]];",
            "const answer3000 = [",
            "  [220, 284],",
            "  [1184, 1210],",
            "  [2620, 2924]",
            "];",
            "const answer20000 = [",
            "  [220, 284],",
            "  [1184, 1210],",
            "  [2620, 2924],",
            "  [5020, 5564],",
            "  [6232, 6368],",
            "  [10744, 10856],",
            "  [12285, 14595],",
            "  [17296, 18416]",
            "];"
          ]
        }
      }
    },
    {
      "title": "Averages/Mode",
      "description": [
        "<p>Write a program to find the <a href=\"https://en.wikipedia.org/wiki/Mode (statistics)\" title=\"wp: Mode (statistics)\">mode</a> value of a collection.</p><p>The case where the collection is empty may be ignored. Care must be taken to handle the case where the mode is non-unique.</p><p>If it is not appropriate or possible to support a general collection, use a vector (array), if possible. If it is not appropriate or possible to support an unspecified value type, use integers.</p>"
      ],
      "solutions": [
        "function mode(arr) {\n  const counter = {};\n  let result = [];\n  let max = 0;\n  // for (const i in arr) {\n  arr.forEach(el => {\n    if (!(el in counter)) {\n      counter[el] = 0;\n    }\n    counter[el]++;\n\n    if (counter[el] === max) {\n      result.push(el);\n    }\n    else if (counter[el] > max) {\n      max = counter[el];\n      result = [el];\n    }\n  });\n  return result;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>mode</code> is a function.",
          "testString": "assert(typeof mode === 'function', '<code>mode</code> is a function.');"
        },
        {
          "text": "<code>mode([1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17])</code> should equal <code>[6]</code>",
          "testString": "assert.deepEqual(mode(arr1), [6], '<code>mode([1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17])</code> should equal <code>[6]</code>');"
        },
        {
          "text": "<code>mode([1, 2, 4, 4, 1])</code> should equal <code>[1, 4]</code>.",
          "testString": "assert.deepEqual(mode(arr2).sort(), [1, 4], '<code>mode([1, 2, 4, 4, 1])</code> should equal <code>[1, 4]</code>.');"
        }
      ],
      "id": "594d8d0ab97724821379b1e6",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function mode (arr) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const arr1 = [1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17];",
            "const arr2 = [1, 2, 4, 4, 1];"
          ]
        }
      }
    },
    {
      "title": "Averages/Pythagorean means",
      "description": [
        "<p class='rosetta__paragraph'>Compute all three of the <a class='rosetta__link--wiki' href='https://en.wikipedia.org/wiki/Pythagorean means' title='wp: Pythagorean means'>Pythagorean means</a> of the set of integers <big>1</big> through <big>10</big> (inclusive).</p><p class='rosetta__paragraph'>Show that <big>$A(x_1,\\ldots,x_n) \\geq G(x_1,\\ldots,x_n) \\geq H(x_1,\\ldots,x_n)$</big> for this set of positive integers.</p> The most common of the three means, the <a class='rosetta__link--rosetta' href='http://rosettacode.org/wiki/Averages/Arithmetic mean' title='Averages/Arithmetic mean'>arithmetic mean</a>, is the sum of the list divided by its length: <big>$ A(x_1, \\ldots, x_n) = \\frac{x_1 + \\cdots + x_n}{n}$</big>The <a class='rosetta__link--wiki' href='https://en.wikipedia.org/wiki/Geometric mean' title='wp: Geometric mean'>geometric mean</a> is the $n$th root of the product of the list: <big>$ G(x_1, \\ldots, x_n) = \\sqrt[n]{x_1 \\cdots x_n} $</big>The <a class='rosetta__link--wiki' href='https://en.wikipedia.org/wiki/Harmonic mean' title='wp: Harmonic mean'>harmonic mean</a> is $n$ divided by the sum of the reciprocal of each item in the list: <big>$ H(x_1, \\ldots, x_n) = \\frac{n}{\\frac{1}{x_1} + \\cdots + \\frac{1}{x_n}} $</big>",
        "<p class='rosetta__paragraph'>Assume the input is an ordered array of all inclusive numbers.</p>",
        "<p class='rosetta__paragraph'>For the answer, please output an object in the following format:</p>",
        "<pre class='rosetta__pre'>",
        "{",
        "  values: {",
        "    Arithmetic: 5.5,",
        "    Geometric: 4.528728688116765,",
        "    Harmonic: 3.414171521474055",
        "  },",
        "  test: 'is A >= G >= H ? yes'",
        "}",
        "</pre>"
      ],
      "solutions": [
        "function pythagoreanMeans (rangeArr) {\n  // arithmeticMean :: [Number] -> Number\n  const arithmeticMean = xs =>\n    foldl((sum, n) => sum + n, 0, xs) / length(xs);\n\n  // geometricMean :: [Number] -> Number\n  const geometricMean = xs =>\n    raise(foldl((product, x) => product * x, 1, xs), 1 / length(xs));\n\n  // harmonicMean :: [Number] -> Number\n  const harmonicMean = xs =>\n    length(xs) / foldl((invSum, n) => invSum + (1 / n), 0, xs);\n\n  // GENERIC FUNCTIONS ------------------------------------------------------\n\n  // A list of functions applied to a list of arguments\n  // <*> :: [(a -> b)] -> [a] -> [b]\n  const ap = (fs, xs) => //\n    Array.prototype.concat(...fs.map(f => //\n      Array.prototype.concat(...xs.map(x => [f(x)]))));\n\n  // foldl :: (b -> a -> b) -> b -> [a] -> b\n  const foldl = (f, a, xs) => xs.reduce(f, a);\n\n  // length :: [a] -> Int\n  const length = xs => xs.length;\n\n  // mapFromList :: [(k, v)] -> Dictionary\n  const mapFromList = kvs =>\n    foldl((a, [k, v]) =>\n      (a[(typeof k === 'string' && k)] = v, a), {}, kvs);\n\n  // raise :: Num -> Int -> Num\n  const raise = (n, e) => Math.pow(n, e);\n/*\n  // show :: a -> String\n  // show :: a -> Int -> String\n  const show = (...x) =>\n    JSON.stringify.apply(\n      null, x.length > 1 ? [x[0], null, x[1]] : x\n    );\n*/\n  // zip :: [a] -> [b] -> [(a,b)]\n  const zip = (xs, ys) =>\n    xs.slice(0, Math.min(xs.length, ys.length))\n      .map((x, i) => [x, ys[i]]);\n\n  // TEST -------------------------------------------------------------------\n  // mean :: Dictionary\n  const mean = mapFromList(zip(\n    ['Arithmetic', 'Geometric', 'Harmonic'],\n    ap([arithmeticMean, geometricMean, harmonicMean], [\n      rangeArr\n    ])\n  ));\n\n  return {\n    values: mean,\n    test: `is A >= G >= H ? ${mean.Arithmetic >= mean.Geometric &&\n      mean.Geometric >= mean.Harmonic ? 'yes' : 'no'}`\n  };\n}\n"
      ],
      "tests": [
        {
          "text": "<code>pythagoreanMeans</code> is a function.",
          "testString": "assert(typeof pythagoreanMeans === 'function', '<code>pythagoreanMeans</code> is a function.');"
        },
        {
          "text": "<code>pythagoreanMeans([1, 2, ..., 10])</code> should equal the same output above.",
          "testString": "assert.deepEqual(pythagoreanMeans(range1), answer1, '<code>pythagoreanMeans([1, 2, ..., 10])</code> should equal the same output above.');"
        }
      ],
      "id": "594d966a1467eb84194f0086",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function pythagoreanMeans (rangeArr) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const range1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];",
            "const answer1 = {",
            "  values: {",
            "    Arithmetic: 5.5,",
            "    Geometric: 4.528728688116765,",
            "    Harmonic: 3.414171521474055",
            "  },",
            "  test: 'is A >= G >= H ? yes'",
            "};",
            ""
          ]
        }
      }
    },
    {
      "title": "Averages/Root mean square",
      "description": [
        "<p>Compute the  <a href=\"https://en.wikipedia.org/wiki/Root mean square\" title=\"wp: Root mean square\">Root mean square</a>  of the numbers 1 through 10 inclusive.</p>",
        "<p>The  root mean square  is also known by its initials RMS (or rms), and as the quadratic mean.</p><p>The RMS is calculated as the mean of the squares of the numbers, square-rooted:</p>",
        "<p><big>$$x_{\\mathrm{rms}} = \\sqrt {{{x_1}^2 + {x_2}^2 + \\cdots + {x_n}^2} \\over n}. $$</big></p>"
      ],
      "solutions": [
        "function rms (arr) {\n  const sumOfSquares = arr.reduce((s, x) => s + x * x, 0);\n  return Math.sqrt(sumOfSquares / arr.length);\n}\n"
      ],
      "tests": [
        {
          "text": "<code>rms</code> is a function.",
          "testString": "assert(typeof rms === 'function', '<code>rms</code> is a function.');"
        },
        {
          "text": "<code>rms([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</code> should equal <code>6.2048368229954285</code>.",
          "testString": "assert.equal(rms(arr1), answer1, '<code>rms([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</code> should equal <code>6.2048368229954285</code>.');"
        }
      ],
      "id": "594da033de4190850b893874",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function rms (arr) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];",
            "const answer1 = 6.2048368229954285;"
          ]
        }
      }
    },
    {
      "title": "Babbage problem",
      "description": [
        "<p><a href=\"https://en.wikipedia.org/wiki/Charles_Babbage\" title=\"wp: Charles_Babbage\">Charles Babbage</a>, looking ahead to the sorts of problems his Analytical Engine would be able to solve, gave this example:</p>",
        "<blockquote>What is the smallest positive integer whose square ends in the digits 269,696?</blockquote>",
        " <p> - Babbage, letter to Lord Bowden, 1837; see Hollingdale and Tootill, <i>Electronic Computers</i>, second edition, 1970, p. 125.</p>",
        "<p>He thought the answer might be 99,736, whose square is 9,947,269,696; but he couldn't be certain.</p>",
        "<p>The task is to find out if Babbage had the right answer.</p>",
        "<p>Implement a function to return the lowest integer that satisfies the Babbage problem. If Babbage was right, return Babbage's number.</p>"
      ],
      "solutions": [
        "function babbage (babbageAns, endDigits) {\n  const babbageNum = Math.pow(babbageAns, 2);\n  const babbageStartDigits = parseInt(babbageNum.toString().replace('269696', ''));\n  let answer = 99736;\n\n  // count down from this answer and save any sqrt int result. return lowest one\n  for (let i = babbageStartDigits; i >= 0; i--) {\n    const num = parseInt(i.toString().concat('269696'));\n    const result = Math.sqrt(num);\n    if (result === Math.floor(Math.sqrt(num))) {\n      answer = result;\n    }\n  }\n\n  return answer;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>babbage</code> is a function.",
          "testString": "assert(typeof babbage === 'function', '<code>babbage</code> is a function.');"
        },
        {
          "text": "<code>babbage(99736, 269696)</code> should not return 99736 (there is a smaller answer).",
          "testString": "assert.equal(babbage(babbageAns, endDigits), answer, '<code>babbage(99736, 269696)</code> should not return 99736 (there is a smaller answer).');"
        }
      ],
      "id": "594db4d0dedb4c06a2a4cefd",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function babbage (babbageNum, endDigits) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const babbageAns = 99736;",
            "const endDigits = 269696;",
            "const answer = 25264;"
          ]
        }
      }
    },
    {
      "title": "Balanced brackets",
      "description": [
        "<p>Determine whether a generated string of brackets is balanced; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.</p>",
        "Examples:",
        "<p class='rosetta__paragraph'>(empty) true</p>",
        "<p class='rosetta__paragraph'><code>[]</code> true</p>",
        "<p class='rosetta__paragraph'><code>][</code> false</p>",
        "<p class='rosetta__paragraph'><code>[][]</code> true</p>",
        "<p class='rosetta__paragraph'><code>][][</code> false</p>",
        "<p class='rosetta__paragraph'><code>[]][[]</code> false</p>",
        "<p class='rosetta__paragraph'><code>[[[[]]]]</code> true</p>"
      ],
      "solutions": [
        "function isBalanced (str) {\n  if (str === '') return true;\n  let a = str;\n  let b;\n  do {\n    b = a;\n    a = a.replace(/\\[\\]/g, '');\n  } while (a !== b);\n  return !a;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>isBalanced</code> is a function.",
          "testString": "assert(typeof isBalanced === 'function', '<code>isBalanced</code> is a function.');"
        },
        {
          "text": "<code>isBalanced(\"[]\")</code> should return true.",
          "testString": "assert(isBalanced(testCases[0]), '<code>isBalanced(\"[]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"]][[[][][][]][\")</code> should return false.",
          "testString": "assert(!isBalanced(testCases[1]), '<code>isBalanced(\"]][[[][][][]][\")</code> should return false.');"
        },
        {
          "text": "<code>isBalanced(\"[][[[[][][[[]]]]]]\")</code> should return true.",
          "testString": "assert(isBalanced(testCases[2]), '<code>isBalanced(\"[][[[[][][[[]]]]]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[3]), '<code>isBalanced(\"][\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[[]]]][[]\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[4]), '<code>isBalanced(\"[[[]]]][[]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][[]\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[5]), '<code>isBalanced(\"][[]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][[][]][[[]]\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[6]), '<code>isBalanced(\"][[][]][[[]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[][]]][\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[7]), '<code>isBalanced(\"[[][]]][\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[[]]][[]]]][][[\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[8]), '<code>isBalanced(\"[[[]]][[]]]][][[\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[]][[]]][[[[][]]\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[9]), '<code>isBalanced(\"[]][[]]][[[[][]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][]][[][\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[10]), '<code>isBalanced(\"][]][[][\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[]][[][]]\")</code> should return true.",
          "testString": "assert(isBalanced(testCases[11]), '<code>isBalanced(\"[[]][[][]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[]]\")</code> should return true.",
          "testString": "assert(isBalanced(testCases[12]), '<code>isBalanced(\"[[]]\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"]][]][[]][[[\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[13]), '<code>isBalanced(\"]][]][[]][[[\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][]][][[\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[14]), '<code>isBalanced(\"][]][][[\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"][][\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[15]), '<code>isBalanced(\"][][\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"[[]]][][][[]][\")</code> should return true.",
          "testString": "assert(!isBalanced(testCases[16]), '<code>isBalanced(\"[[]]][][][[]][\")</code> should return true.');"
        },
        {
          "text": "<code>isBalanced(\"\")</code> should return true.",
          "testString": "assert(isBalanced(testCases[17]), '<code>isBalanced(\"\")</code> should return true.');"
        }
      ],
      "id": "594dc6c729e5700999302b45",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function isBalanced (str) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = [",
            "  '[]',",
            "  ']][[[][][][]][',",
            "  '[][[[[][][[[]]]]]]',",
            "  '][',",
            "  '[[[]]]][[]',",
            "  '][[]',",
            "  '][[][]][[[]]',",
            "  '[[][]]][',",
            "  '[[[]]][[]]]][][[',",
            "  '[]][[]]][[[[][]]',",
            "  '][]][[][',",
            "  '[[]][[][]]',",
            "  '[[]]',",
            "  ']][]][[]][[[',",
            "  '][]][][[',",
            "  '][][',",
            "  '[[]]][][][[]][',",
            "  ''",
            "];"
          ]
        }
      }
    },
    {
      "title": "Circles of given radius through two points",
      "description": [
        "<p>Given two points on a plane and a radius, usually two circles of given radius can be drawn through the points.</p>",
        "Exceptions:",
        "A radius of zero should be treated as never describing circles (except in the case where the points are coincident).",
        "If the points are coincident then an infinite number of circles with the point on their circumference can be drawn, unless the radius is equal to zero as well which then collapses the circles to a point.",
        "If the points form a diameter then return a single circle.",
        "If the points are too far apart then no circles can be drawn.Task:",
        "Implement a function that takes two points and a radius and returns the two circles through those points. For each resulting circle, provide the coordinates for the center of each circle rounded to four decimal digits. Return each coordinate as an array, and coordinates as an array of arrays.",
        "For edge cases, return the following:",
        "If points are on the diameter, return one point. If the radius is also zero however, return <code>\"Radius Zero\"</code>.",
        "If points are coincident, return <code>\"Coincident point. Infinite solutions\"</code>.",
        "If points are farther apart than the diameter, return <code>\"No intersection. Points further apart than circle diameter\"</code>.",
        "Sample inputs:",
        "<pre>",
        "      p1                p2           r",
        "0.1234, 0.9876    0.8765, 0.2345    2.0",
        "0.0000, 2.0000    0.0000, 0.0000    1.0",
        "0.1234, 0.9876    0.1234, 0.9876    2.0",
        "0.1234, 0.9876    0.8765, 0.2345    0.5",
        "0.1234, 0.9876    0.1234, 0.9876    0.0",
        "</pre>",
        "Ref:",
        "<a href=\"http://mathforum.org/library/drmath/view/53027.html\" title=\"link: http://mathforum.org/library/drmath/view/53027.html\">Finding the Center of a Circle from 2 Points and Radius</a> from Math forum @ Drexel"
      ],
      "solutions": [
        "const hDist = (p1, p2) => Math.hypot(...p1.map((e, i) => e - p2[i])) / 2;\nconst pAng = (p1, p2) => Math.atan(p1.map((e, i) => e - p2[i]).reduce((p, c) => c / p, 1));\nconst solveF = (p, r) => t => [parseFloat((r * Math.cos(t) + p[0]).toFixed(4)), parseFloat((r * Math.sin(t) + p[1]).toFixed(4))];\nconst diamPoints = (p1, p2) => p1.map((e, i) => parseFloat((e + (p2[i] - e) / 2).toFixed(4)));\n\nfunction getCircles (...args) {\n  const [p1, p2, s] = args;\n  const solve = solveF(p1, s);\n  const halfDist = hDist(p1, p2);\n\n  let msg = [];\n  switch (Math.sign(s - halfDist)) {\n    case 0:\n      msg = s ? diamPoints(p1, p2) :\n        'Radius Zero';\n      break;\n    case 1:\n      if (!halfDist) {\n        msg = 'Coincident point. Infinite solutions';\n      }\n      else {\n        const theta = pAng(p1, p2);\n        const theta2 = Math.acos(halfDist / s);\n        [1, -1].map(e => solve(theta + e * theta2)).forEach(\n          e => msg.push(e));\n      }\n      break;\n    case -1:\n      msg = 'No intersection. Points further apart than circle diameter';\n      break;\n    default:\n      msg = 'Reached the default';\n  }\n  return msg;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>getCircles</code> is a function.",
          "testString": "assert(typeof getCircles === 'function', '<code>getCircles</code> is a function.');"
        },
        {
          "text": "<code>getCircles([0.1234, 0.9876], [0.8765, 0.2345], 2.0)</code> should return <code>[[1.8631, 1.9742], [-0.8632, -0.7521]]</code>.",
          "testString": "assert.deepEqual(getCircles(...testCases[0]), answers[0], '<code>getCircles([0.1234, 0.9876], [0.8765, 0.2345], 2.0)</code> should return <code>[[1.8631, 1.9742], [-0.8632, -0.7521]]</code>.');"
        },
        {
          "text": "<code>getCircles([0.0000, 2.0000], [0.0000, 0.0000], 1.0)</code> should return <code>[0, 1]</code>",
          "testString": "assert.deepEqual(getCircles(...testCases[1]), answers[1], '<code>getCircles([0.0000, 2.0000], [0.0000, 0.0000], 1.0)</code> should return <code>[0, 1]</code>');"
        },
        {
          "text": "<code>getCircles([0.1234, 0.9876], [0.1234, 0.9876], 2.0)</code> should return <code>Coincident point. Infinite solutions</code>",
          "testString": "assert.deepEqual(getCircles(...testCases[2]), answers[2], '<code>getCircles([0.1234, 0.9876], [0.1234, 0.9876], 2.0)</code> should return <code>Coincident point. Infinite solutions</code>');"
        },
        {
          "text": "<code>getCircles([0.1234, 0.9876], [0.8765, 0.2345], 0.5)</code> should return <code>No intersection. Points further apart than circle diameter</code>",
          "testString": "assert.deepEqual(getCircles(...testCases[3]), answers[3], '<code>getCircles([0.1234, 0.9876], [0.8765, 0.2345], 0.5)</code> should return <code>No intersection. Points further apart than circle diameter</code>');"
        },
        {
          "text": "<code>getCircles([0.1234, 0.9876], [0.1234, 0.9876], 0.0)</code> should return <code>Radius Zero</code>",
          "testString": "assert.deepEqual(getCircles(...testCases[4]), answers[4], '<code>getCircles([0.1234, 0.9876], [0.1234, 0.9876], 0.0)</code> should return <code>Radius Zero</code>');"
        }
      ],
      "id": "5951815dd895584b06884620",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function getCircles (...args) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = [",
            "  [[0.1234, 0.9876], [0.8765, 0.2345], 2.0],",
            "  [[0.0000, 2.0000], [0.0000, 0.0000], 1.0],",
            "  [[0.1234, 0.9876], [0.1234, 0.9876], 2.0],",
            "  [[0.1234, 0.9876], [0.8765, 0.2345], 0.5],",
            "  [[0.1234, 0.9876], [0.1234, 0.9876], 0.0]",
            "];",
            "const answers = [",
            "  [[1.8631, 1.9742], [-0.8632, -0.7521]],",
            "  [0, 1],",
            "  'Coincident point. Infinite solutions',",
            "  'No intersection. Points further apart than circle diameter',",
            "  'Radius Zero'",
            "];"
          ]
        }
      }
    },
    {
      "title": "Closest-pair problem",
      "description": [
        "Task:",
        "<p>Provide a function to find the closest two points among a set of given points in two dimensions,  i.e. to solve the  <a href=\"https://en.wikipedia.org/wiki/Closest pair of points problem\" title=\"wp: Closest pair of points problem\">Closest pair of points problem</a>  in the  planar  case.</p><p>The straightforward solution is a  O(n<sup>2</sup>)  algorithm  (which we can call brute-force algorithm);  the pseudo-code (using indexes) could be simply:</p>",
        "<pre>",
        "bruteForceClosestPair of P(1), P(2), ... P(N)",
        "if N &lt; 2 then",
        "  return ∞",
        "else",
        "  minDistance ← |P(1) - P(2)|",
        "  minPoints ← { P(1), P(2) }",
        "  foreach i ∈ [1, N-1]",
        "    foreach j ∈ [i+1, N]",
        "      if |P(i) - P(j)| < minDistance then",
        "        minDistance ← |P(i) - P(j)|",
        "        minPoints ← { P(i), P(j) }",
        "      endif",
        "    endfor",
        "  endfor",
        "  return minDistance, minPoints",
        "endif",
        "</pre>",
        "<p>A better algorithm is based on the recursive divide&amp;conquer approach, as explained also at  <a href=\"https://en.wikipedia.org/wiki/Closest pair of points problem#Planar_case\" title=\"wp: Closest pair of points problem#Planar_case\">Wikipedia's Closest pair of points problem</a>,  which is  O(n log n);  a pseudo-code could be:</p>",
        "<pre>",
        "closestPair of (xP, yP)",
        "  where xP is P(1) .. P(N) sorted by x coordinate, and",
        "  yP is P(1) .. P(N) sorted by y coordinate (ascending order)",
        "if N ≤ 3 then",
        "  return closest points of xP using brute-force algorithm",
        "else",
        "  xL ← points of xP from 1 to ⌈N/2⌉",
        "  xR ← points of xP from ⌈N/2⌉+1 to N",
        "  xm ← xP(⌈N/2⌉)<sub>x</sub>",
        "  yL ← { p ∈ yP : p<sub>x</sub> ≤ xm }",
        "  yR ← { p ∈ yP : p<sub>x</sub> &gt; xm }",
        "  (dL, pairL) ← closestPair of (xL, yL)",
        "  (dR, pairR) ← closestPair of (xR, yR)",
        "  (dmin, pairMin) ← (dR, pairR)",
        "  if dL &lt; dR then",
        "    (dmin, pairMin) ← (dL, pairL)",
        "  endif",
        "  yS ← { p ∈ yP : |xm - p<sub>x</sub>| &lt; dmin }",
        "  nS ← number of points in yS",
        "  (closest, closestPair) ← (dmin, pairMin)",
        "  for i from 1 to nS - 1",
        "    k ← i + 1",
        "    while k ≤ nS and yS(k)<sub>y</sub> - yS(i)<sub>y</sub> &lt; dmin",
        "      if |yS(k) - yS(i)| &lt; closest then",
        "        (closest, closestPair) ← (|yS(k) - yS(i)|, {yS(k), yS(i)})",
        "      endif",
        "      k ← k + 1",
        "    endwhile",
        "  endfor",
        "  return closest, closestPair",
        "endif",
        "</pre>",
        "References and further readings:",
        " <a href=\"https://en.wikipedia.org/wiki/Closest pair of points problem\" title=\"wp: Closest pair of points problem\">Closest pair of points problem</a>",
        " <a href=\"http://www.cs.mcgill.ca/~cs251/ClosestPair/ClosestPairDQ.html\" title=\"link: http://www.cs.mcgill.ca/~cs251/ClosestPair/ClosestPairDQ.html\">Closest Pair (McGill)</a>",
        " <a href=\"http://www.cs.ucsb.edu/~suri/cs235/ClosestPair.pdf\" title=\"link: http://www.cs.ucsb.edu/~suri/cs235/ClosestPair.pdf\">Closest Pair (UCSB)</a>",
        " <a href=\"http://classes.cec.wustl.edu/~cse241/handouts/closestpair.pdf\" title=\"link: http://classes.cec.wustl.edu/~cse241/handouts/closestpair.pdf\">Closest pair (WUStL)</a>",
        " <a href=\"http://www.cs.iupui.edu/~xkzou/teaching/CS580/Divide-and-conquer-closestPair.ppt\" title=\"link: http://www.cs.iupui.edu/~xkzou/teaching/CS580/Divide-and-conquer-closestPair.ppt\">Closest pair (IUPUI)</a> ",
        "<p>For the input, expect the argument to be an array of objects (points) with <code>x</code> and <code>y</code> members set to numbers. For the output, return an object containing the key:value pairs for  <code>distance</code> and <code>pair</code> (i.e., the pair of two closest points).</p>"
      ],
      "solutions": [
        "const Point = function (x, y) {\n  this.x = x;\n  this.y = y;\n};\nPoint.prototype.getX = function () {\n  return this.x;\n};\nPoint.prototype.getY = function () {\n  return this.y;\n};\n\nconst mergeSort = function mergeSort(points, comp) {\n\tif(points.length < 2) return points;\n\n\tvar n = points.length,\n\t\ti = 0,\n\t\tj = 0,\n\t\tleftN = Math.floor(n / 2),\n\t\trightN = leftN;\n\n\tvar leftPart = mergeSort( points.slice(0, leftN), comp),\n\t\trightPart = mergeSort( points.slice(rightN), comp );\n\n\tvar sortedPart = [];\n\n\twhile((i < leftPart.length) && (j < rightPart.length)) {\n\t\tif(comp(leftPart[i], rightPart[j]) < 0) {\n\t\t\tsortedPart.push(leftPart[i]);\n\t\t\ti += 1;\n\t\t}\n\t\telse {\n\t\t\tsortedPart.push(rightPart[j]);\n\t\t\tj += 1;\n\t\t}\n\t}\n\twhile(i < leftPart.length) {\n\t\tsortedPart.push(leftPart[i]);\n\t\ti += 1;\n\t}\n\twhile(j < rightPart.length) {\n\t\tsortedPart.push(rightPart[j]);\n\t\tj += 1;\n\t}\n\treturn sortedPart;\n};\n\nconst closestPair = function _closestPair(Px, Py) {\n\tif(Px.length < 2) return { distance: Infinity, pair: [ new Point(0, 0), new Point(0, 0) ] };\n\tif(Px.length < 3) {\n\t\t//find euclid distance\n\t\tvar d = Math.sqrt( Math.pow(Math.abs(Px[1].x - Px[0].x), 2) + Math.pow(Math.abs(Px[1].y - Px[0].y), 2) );\n\t\treturn {\n\t\t\tdistance: d,\n\t\t\tpair: [ Px[0], Px[1] ]\n\t\t};\n\t}\n\n\tvar\tn = Px.length,\n\t\tleftN = Math.floor(n / 2),\n\t\trightN = leftN;\n\n\tvar Xl = Px.slice(0, leftN),\n\t\tXr = Px.slice(rightN),\n\t\tXm = Xl[leftN - 1],\n\t\tYl = [],\n\t\tYr = [];\n\t//separate Py\n\tfor(var i = 0; i < Py.length; i += 1) {\n\t\tif(Py[i].x <= Xm.x)\n\t\t\tYl.push(Py[i]);\n\t\telse\n\t\t\tYr.push(Py[i]);\n\t}\n\n\tvar dLeft = _closestPair(Xl, Yl),\n\t\tdRight = _closestPair(Xr, Yr);\n\n\tvar minDelta = dLeft.distance,\n\t\tclosestPair = dLeft.pair;\n\tif(dLeft.distance > dRight.distance) {\n\t\tminDelta = dRight.distance;\n\t\tclosestPair = dRight.pair;\n\t}\n\n\t//filter points around Xm within delta (minDelta)\n\tvar closeY = [];\n\tfor(i = 0; i < Py.length; i += 1) {\n\t\tif(Math.abs(Py[i].x - Xm.x) < minDelta) closeY.push(Py[i]);\n\t}\n\t//find min within delta. 8 steps max\n\tfor(i = 0; i < closeY.length; i += 1) {\n\t\tfor(var j = i + 1; j < Math.min( (i + 8), closeY.length ); j += 1) {\n\t\t\tvar d = Math.sqrt( Math.pow(Math.abs(closeY[j].x - closeY[i].x), 2) + Math.pow(Math.abs(closeY[j].y - closeY[i].y), 2) );\n\t\t\tif(d < minDelta) {\n\t\t\t\tminDelta = d;\n\t\t\t\tclosestPair = [ closeY[i], closeY[j] ]\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tdistance: minDelta,\n\t\tpair: closestPair\n\t};\n};\n\nfunction getClosestPair (points) {\n  const sortX = function (a, b) { return (a.x < b.x) ? -1 : ((a.x > b.x) ? 1 : 0); }\n  const sortY = function (a, b) { return (a.y < b.y) ? -1 : ((a.y > b.y) ? 1 : 0); }\n\n  const Px = mergeSort(points, sortX);\n  const Py = mergeSort(points, sortY);\n\n  return closestPair(Px, Py);\n}\n"
      ],
      "tests": [
        {
          "text": "<code>getClosestPair</code> is a function.",
          "testString": "assert(typeof getClosestPair === 'function', '<code>getClosestPair</code> is a function.');"
        },
        {
          "text": "Distance should be the following.",
          "testString": "assert.equal(getClosestPair(points1).distance, answer1.distance, 'Distance should be the following.');"
        },
        {
          "text": "Points should be the following.",
          "testString": "assert.deepEqual(JSON.parse(JSON.stringify(getClosestPair(points1))).pair, answer1.pair, 'Points should be the following.');"
        },
        {
          "text": "Distance should be the following.",
          "testString": "assert.equal(getClosestPair(points2).distance, answer2.distance, 'Distance should be the following.');"
        },
        {
          "text": "Points should be the following.",
          "testString": "assert.deepEqual(JSON.parse(JSON.stringify(getClosestPair(points2))).pair, answer2.pair, 'Points should be the following.');"
        }
      ],
      "id": "5951a53863c8a34f02bf1bdc",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "const Point = function (x, y) {",
            "  this.x = x;",
            "  this.y = y;",
            "};",
            "Point.prototype.getX = function () {",
            "  return this.x;",
            "};",
            "Point.prototype.getY = function () {",
            "  return this.y;",
            "};",
            "",
            "function getClosestPair (pointsArr) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const points1 = [",
            "\tnew Point(0.748501, 4.09624),",
            "\tnew Point(3.00302, 5.26164),",
            "\tnew Point(3.61878,  9.52232),",
            "\tnew Point(7.46911,  4.71611),",
            "\tnew Point(5.7819,   2.69367),",
            "\tnew Point(2.34709,  8.74782),",
            "\tnew Point(2.87169,  5.97774),",
            "\tnew Point(6.33101,  0.463131),",
            "\tnew Point(7.46489,  4.6268),",
            "\tnew Point(1.45428,  0.087596)",
            "];",
            "",
            "const points2 = [",
            "  new Point(37100, 13118),",
            "  new Point(37134, 1963),",
            "  new Point(37181, 2008),",
            "  new Point(37276, 21611),",
            "  new Point(37307, 9320)",
            "];",
            "",
            "const answer1 = {",
            "  distance: 0.0894096443343775,",
            "  pair: [",
            "    {",
            "      x: 7.46489,",
            "      y: 4.6268",
            "    },",
            "    {",
            "      x: 7.46911,",
            "      y: 4.71611",
            "    }",
            "  ]",
            "};",
            "",
            "const answer2 = {",
            "  distance: 65.06919393998976,",
            "  pair: [",
            "    {",
            "      x: 37134,",
            "      y: 1963",
            "    },",
            "    {",
            "      x: 37181,",
            "      y: 2008",
            "    }",
            "  ]",
            "};",
            "",
            "const benchmarkPoints = [",
            "  new Point(16909, 54699),",
            "  new Point(14773, 61107),",
            "  new Point(95547, 45344),",
            "  new Point(95951, 17573),",
            "  new Point(5824, 41072),",
            "  new Point(8769, 52562),",
            "  new Point(21182, 41881),",
            "  new Point(53226, 45749),",
            "  new Point(68180, 887),",
            "  new Point(29322, 44017),",
            "  new Point(46817, 64975),",
            "  new Point(10501, 483),",
            "  new Point(57094, 60703),",
            "  new Point(23318, 35472),",
            "  new Point(72452, 88070),",
            "  new Point(67775, 28659),",
            "  new Point(19450, 20518),",
            "  new Point(17314, 26927),",
            "  new Point(98088, 11164),",
            "  new Point(25050, 56835),",
            "  new Point(8364, 6892),",
            "  new Point(37868, 18382),",
            "  new Point(23723, 7701),",
            "  new Point(55767, 11569),",
            "  new Point(70721, 66707),",
            "  new Point(31863, 9837),",
            "  new Point(49358, 30795),",
            "  new Point(13041, 39745),",
            "  new Point(59635, 26523),",
            "  new Point(25859, 1292),",
            "  new Point(1551, 53890),",
            "  new Point(70316, 94479),",
            "  new Point(48549, 86338),",
            "  new Point(46413, 92747),",
            "  new Point(27186, 50426),",
            "  new Point(27591, 22655),",
            "  new Point(10905, 46153),",
            "  new Point(40408, 84202),",
            "  new Point(52821, 73520),",
            "  new Point(84865, 77388),",
            "  new Point(99819, 32527),",
            "  new Point(34404, 75657),",
            "  new Point(78457, 96615),",
            "  new Point(42140, 5564),",
            "  new Point(62175, 92342),",
            "  new Point(54958, 67112),",
            "  new Point(4092, 19709),",
            "  new Point(99415, 60298),",
            "  new Point(51090, 52158),",
            "  new Point(48953, 58567)",
            "];"
          ]
        }
      }
    },
    {
      "title": "Combinations",
      "description": [
        "Task:",
        "<p>Given non-negative integers  <big> m </big>  and  <big> n</big>,  generate all size  <big> m </big>  <a href=\"http://mathworld.wolfram.com/Combination.html\" title=\"link: http://mathworld.wolfram.com/Combination.html\">combinations</a>  of the integers from  <big> 0</big>  (zero)  to  <big> n-1 </big>  in sorted order  (each combination is sorted and the entire table is sorted).</p>",
        "Example:",
        "<p><big>3</big>  comb  <big> 5 </big>is:</p>",
        "<pre>",
        "0 1 2",
        "0 1 3",
        "0 1 4",
        "0 2 3",
        "0 2 4",
        "0 3 4",
        "1 2 3",
        "1 2 4",
        "1 3 4",
        "2 3 4",
        "</pre>"
      ],
      "solutions": [
        "function combinations (m, n) {\n  const nArr = [...Array(n).keys()];\n\n  return (function generateCombinations (size, numArr) {\n    const ret = [];\n\n    for (let i = 0; i < numArr.length; i++) {\n      if (size === 1) {\n        ret.push([numArr[i]]);\n      }\n      else {\n        const sub = generateCombinations(size - 1, numArr.slice(i + 1, numArr.length));\n        for (let subI = 0; subI < sub.length; subI++) {\n          const next = sub[subI];\n          next.unshift(numArr[i]);\n          ret.push(next);\n        }\n      }\n    }\n    return ret;\n  }(m, nArr));\n}\n"
      ],
      "tests": [
        {
          "text": "<code>combinations</code> is a function.",
          "testString": "assert(typeof combinations === 'function', '<code>combinations</code> is a function.');"
        },
        {
          "text": "<code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.",
          "testString": "assert.deepEqual(combinations(testInput1[0], testInput1[1]), testOutput1, '<code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.');"
        },
        {
          "text": "<code>combinations(4, 6)</code> should return <code>[[0,1,2,3],  [0,1,2,4],  [0,1,2,5],  [0,1,3,4],  [0,1,3,5],  [0,1,4,5],  [0,2,3,4],  [0,2,3,5],  [0,2,4,5],  [0,3,4,5],  [1,2,3,4],  [1,2,3,5],  [1,2,4,5],  [1,3,4,5],  [2,3,4,5]]</code>",
          "testString": "assert.deepEqual(combinations(testInput2[0], testInput2[1]), testOutput2, '<code>combinations(4, 6)</code> should return <code>[[0,1,2,3],  [0,1,2,4],  [0,1,2,5],  [0,1,3,4],  [0,1,3,5],  [0,1,4,5],  [0,2,3,4],  [0,2,3,5],  [0,2,4,5],  [0,3,4,5],  [1,2,3,4],  [1,2,3,5],  [1,2,4,5],  [1,3,4,5],  [2,3,4,5]]</code>');"
        }
      ],
      "id": "5958469238c0d8d2632f46db",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function combinations (m, n) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testInput1 = [3, 5];",
            "const testOutput1 = [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]];",
            "",
            "const testInput2 = [4, 6];",
            "const testOutput2 = [[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 4, 5], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 4, 5], [0, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]];"
          ]
        }
      }
    },
    {
      "title": "Comma quibbling",
      "description": [
        "<p>Comma quibbling is a task originally set by Eric Lippert in his <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2009/04/15/comma-quibbling.aspx\" title=\"link: http://blogs.msdn.com/b/ericlippert/archive/2009/04/15/comma-quibbling.aspx\">blog</a>.</p>",
        "Task:<p>Write a function to generate a string output which is the concatenation of input words from a list/sequence where:</p>",
        "An input of no words produces the output string of just the two brace characters \"{}\".",
        "An input of just one word, e.g. [\"ABC\"], produces the output string of the word inside the two braces, e.g. \"{ABC}\".",
        "An input of two words, e.g. [\"ABC\", \"DEF\"], produces the output string of the two words inside the two braces with the words separated by the string \" and \", e.g. \"{ABC and DEF}\".",
        "An input of three or more words, e.g. [\"ABC\", \"DEF\", \"G\", \"H\"], produces the output string of all but the last word separated by \", \" with the last word separated by \" and \" and all within braces; e.g. \"{ABC, DEF, G and H}\".",
        "<p>Test your function with the following series of inputs showing your output here on this page:</p>",
        "[]                       # (No input words).",
        "[\"ABC\"]",
        "[\"ABC\", \"DEF\"]",
        "[\"ABC\", \"DEF\", \"G\", \"H\"]",
        "<p>Note: Assume words are non-empty strings of uppercase characters for this task.</p>"
      ],
      "solutions": [
        "function quibble (words) {\n  return \"{\" +\n    words.slice(0, words.length - 1).join(\",\") +\n   (words.length > 1 ? \" and \" : \"\") +\n   (words[words.length - 1] || '') +\n  \"}\";\n}\n"
      ],
      "tests": [
        {
          "text": "<code>quibble</code> is a function.",
          "testString": "assert(typeof quibble === 'function', '<code>quibble</code> is a function.');"
        },
        {
          "text": "<code>quibble([\"ABC\"])</code> should return a string.",
          "testString": "assert(typeof quibble([\"ABC\"]) === 'string', '<code>quibble([\"ABC\"])</code> should return a string.');"
        },
        {
          "text": "<code>quibble([])</code> should return \"{}\".",
          "testString": "assert.equal(quibble(testCases[0]), results[0], '<code>quibble([])</code> should return \"{}\".');"
        },
        {
          "text": "<code>quibble([\"ABC\"])</code> should return \"{ABC}\".",
          "testString": "assert.equal(quibble(testCases[1]), results[1], '<code>quibble([\"ABC\"])</code> should return \"{ABC}\".');"
        },
        {
          "text": "<code>quibble([\"ABC\", \"DEF\"])</code> should return \"{ABC and DEF}\".",
          "testString": "assert.equal(quibble(testCases[2]), results[2], '<code>quibble([\"ABC\", \"DEF\"])</code> should return \"{ABC and DEF}\".');"
        },
        {
          "text": "<code>quibble([\"ABC\", \"DEF\", \"G\", \"H\"])</code> should return \"{ABC,DEF,G and H}\".",
          "testString": "assert.equal(quibble(testCases[3]), results[3], '<code>quibble([\"ABC\", \"DEF\", \"G\", \"H\"])</code> should return \"{ABC,DEF,G and H}\".');"
        }
      ],
      "id": "596e414344c3b2872167f0fe",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function quibble (words) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = [[], [\"ABC\"], [\"ABC\", \"DEF\"], [\"ABC\", \"DEF\", \"G\", \"H\"]];",
            "const results = [\"{}\", \"{ABC}\", \"{ABC and DEF}\", \"{ABC,DEF,G and H}\"];"
          ]
        }
      }
    },
    {
      "title": "Compare a list of strings",
      "description": [
        "<p>Given a  <a href=\"https://en.wikipedia.org/wiki/List_(abstract_data_type)\" title=\"wp: List_(abstract_data_type)\">list</a>  of arbitrarily many strings, implement a function for each of the following conditions:</p> test if they are all lexically equal",
        " test if every string is lexically less than the one after it  (i.e. whether the list is in strict ascending order)"
      ],
      "solutions": [
        "function allEqual(a) {\n  let out = true;\n  let i = 0;\n  while (++i < a.length) {\n    out = out && (a[i - 1] === a[i]);\n  } return out;\n}\n\nfunction azSorted(a) {\n  let out = true;\n  let i = 0;\n  while (++i < a.length) {\n    out = out && (a[i - 1] < a[i]);\n  } return out;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>allEqual</code> is a function.",
          "testString": "assert(typeof allEqual === 'function', '<code>allEqual</code> is a function.');"
        },
        {
          "text": "<code>azSorted</code> is a function.",
          "testString": "assert(typeof azSorted === 'function', '<code>azSorted</code> is a function.');"
        },
        {
          "text": "<code>allEqual([\"AA\", \"AA\", \"AA\", \"AA\"])</code> returns true.",
          "testString": "assert(allEqual(testCases[0]), '<code>allEqual([\"AA\", \"AA\", \"AA\", \"AA\"])</code> returns true.');"
        },
        {
          "text": "<code>azSorted([\"AA\", \"AA\", \"AA\", \"AA\"])</code> returns false.",
          "testString": "assert(!azSorted(testCases[0]), '<code>azSorted([\"AA\", \"AA\", \"AA\", \"AA\"])</code> returns false.');"
        },
        {
          "text": "<code>allEqual([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> returns false.",
          "testString": "assert(!allEqual(testCases[1]), '<code>allEqual([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> returns false.');"
        },
        {
          "text": "<code>azSorted([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> returns true.",
          "testString": "assert(azSorted(testCases[1]), '<code>azSorted([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> returns true.');"
        },
        {
          "text": "<code>allEqual([])</code> returns true.",
          "testString": "assert(allEqual(testCases[2]), '<code>allEqual([])</code> returns true.');"
        },
        {
          "text": "<code>azSorted([])</code> returns true.",
          "testString": "assert(azSorted(testCases[2]), '<code>azSorted([])</code> returns true.');"
        },
        {
          "text": "<code>allEqual([\"AA\"])</code> returns true.",
          "testString": "assert(allEqual(testCases[3]), '<code>allEqual([\"AA\"])</code> returns true.');"
        },
        {
          "text": "<code>azSorted([\"AA\"])</code> returns true.",
          "testString": "assert(azSorted(testCases[3]), '<code>azSorted([\"AA\"])</code> returns true.');"
        },
        {
          "text": "<code>allEqual([\"BB\", \"AA\"])</code> returns false.",
          "testString": "assert(!allEqual(testCases[4]), '<code>allEqual([\"BB\", \"AA\"])</code> returns false.');"
        },
        {
          "text": "<code>azSorted([\"BB\", \"AA\"])</code> returns false.",
          "testString": "assert(!azSorted(testCases[4]), '<code>azSorted([\"BB\", \"AA\"])</code> returns false.');"
        }
      ],
      "id": "596e457071c35c882915b3e4",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function allEqual (arr) {",
            "  // Good luck!",
            "  return true;",
            "}",
            "",
            "function azSorted (arr) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = [['AA', 'AA', 'AA', 'AA'], ['AA', 'ACB', 'BB', 'CC'], [], ['AA'], ['BB', 'AA']];"
          ]
        }
      }
    },
    {
      "title": "Convert seconds to compound duration",
      "description": [
        "Task:",
        "<p>Implement a function which:</p>",
        "takes a positive integer representing a duration in seconds as input (e.g., <code>100</code>), and",
        "returns a string which shows the same duration decomposed into weeks, days, hours, minutes, and seconds as detailed below (e.g., \"<code>1 min, 40 sec</code>\").",
        "<p>Demonstrate that it passes the following three test-cases:</p><p style=\"font-size:115%; margin:1em 0 0 0\">Test Cases</p>",
        "<table>",
        "<tbody>",
        "<tr>",
        "<th>input number</th>",
        "<th>output number</th>",
        "</tr>",
        "<tr>",
        "<td>7259</td>",
        "<td><code>2 hr, 59 sec</code></td>",
        "</tr>",
        "<tr>",
        "<td>86400</td>",
        "<td><code>1 d</code></td>",
        "</tr>",
        "<tr>",
        "<td>6000000</td>",
        "<td><code>9 wk, 6 d, 10 hr, 40 min</code></td>",
        "</tr>",
        "</tbody>",
        "</table>",
        "<p style=\"font-size:115%; margin:1em 0 0 0\">Details</p>",
        "The following five units should be used:",
        "<table>",
        "<tbody>",
        "<tr>",
        "<th>unit</th>",
        "<th>suffix used in output</th>",
        "<th>conversion</th>",
        "</tr>",
        "<tr>",
        "<td>week</td>",
        "<td><code>wk</code></td>",
        "<td>1 week = 7 days</td>",
        "</tr>",
        "<tr>",
        "<td>day</td>",
        "<td><code>d</code></td>",
        "<td>1 day = 24 hours</td>",
        "</tr>",
        "<tr>",
        "<td>hour</td>",
        "<td><code>hr</code></td>",
        "<td>1 hour = 60 minutes</td>",
        "</tr>",
        "<tr>",
        "<td>minute</td>",
        "<td><code>min</code></td>",
        "<td>1 minute = 60 seconds</td>",
        "</tr>",
        "<tr>",
        "<td>second</td>",
        "<td><code>sec</code></td>",
        "<td></td>",
        "</tr>",
        "</tbody>",
        "</table>",
        "However, only include quantities with non-zero values in the output (e.g., return \"<code>1 d</code>\" and not \"<code>0 wk, 1 d, 0 hr, 0 min, 0 sec</code>\").Give larger units precedence over smaller ones as much as possible (e.g., return <code>2 min, 10 sec</code> and not <code>1 min, 70 sec</code> or <code>130 sec</code>)Mimic the formatting shown in the test-cases (quantities sorted from largest unit to smallest and separated by comma+space; value and unit of each quantity separated by space).",
        "<p><hr style=\"margin:1em 0;\"/></p>"
      ],
      "solutions": [
        "function convertSeconds (sec) {\n  const localNames = ['wk', 'd', 'hr', 'min', 'sec'];\n  // compoundDuration :: [String] -> Int -> String\n  const compoundDuration = (labels, intSeconds) =>\n    weekParts(intSeconds)\n    .map((v, i) => [v, labels[i]])\n    .reduce((a, x) =>\n      a.concat(x[0] ? [`${x[0]} ${x[1] || '?'}`] : []), []\n    )\n    .join(', ');\n\n    // weekParts :: Int -> [Int]\n  const weekParts = intSeconds => [0, 7, 24, 60, 60]\n    .reduceRight((a, x) => {\n      const r = a.rem;\n      const mod = x !== 0 ? r % x : r;\n\n      return {\n        rem: (r - mod) / (x || 1),\n        parts: [mod].concat(a.parts)\n      };\n    }, {\n      rem: intSeconds,\n      parts: []\n    })\n    .parts;\n\n  return compoundDuration(localNames, sec);\n}\n"
      ],
      "tests": [
        {
          "text": "<code>convertSeconds</code> is a function.",
          "testString": "assert(typeof convertSeconds === 'function', '<code>convertSeconds</code> is a function.');"
        },
        {
          "text": "<code>convertSeconds(7259)</code> should return <code>2 hr, 59 sec</code>.",
          "testString": "assert.equal(convertSeconds(testCases[0]), results[0], '<code>convertSeconds(7259)</code> should return <code>2 hr, 59 sec</code>.');"
        },
        {
          "text": "<code>convertSeconds(86400)</code> should return <code>1 d</code>.",
          "testString": "assert.equal(convertSeconds(testCases[1]), results[1], '<code>convertSeconds(86400)</code> should return <code>1 d</code>.');"
        },
        {
          "text": "<code>convertSeconds(6000000)</code> should return <code>9 wk, 6 d, 10 hr, 40 min</code>.",
          "testString": "assert.equal(convertSeconds(testCases[2]), results[2], '<code>convertSeconds(6000000)</code> should return <code>9 wk, 6 d, 10 hr, 40 min</code>.');"
        }
      ],
      "id": "596fd036dc1ab896c5db98b1",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function convertSeconds (sec) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = [7259, 86400, 6000000];",
            "const results = ['2 hr, 59 sec', '1 d', '9 wk, 6 d, 10 hr, 40 min'];"
          ]
        }
      }
    },
    {
      "title": "Count occurrences of a substring",
      "description": [
        "Task:",
        "<p>Create a function,  or show a built-in function,  to count the number of non-overlapping occurrences of a substring inside a string.</p><p>The function should take two arguments:</p>",
        "the first argument being the string to search,  and",
        "the second a substring to be searched for.",
        "<p>It should return an integer count.</p>",
        "<p>The matching should yield the highest number of non-overlapping matches.</p><p>In general, this essentially means matching from left-to-right or right-to-left.</p>"
      ],
      "solutions": [
        "function countSubstring(str, subStr) {\n  const escapedSubStr = subStr.replace(/[.+*?^$[\\]{}()|/]/g, '\\\\$&');\n  const matches = str.match(new RegExp(escapedSubStr, 'g'));\n  return matches ? matches.length : 0;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>countSubstring</code> is a function.",
          "testString": "assert(typeof countSubstring === 'function', '<code>countSubstring</code> is a function.');"
        },
        {
          "text": "<code>countSubstring(\"the three truths\", \"th\")</code> should return <code>3</code>.",
          "testString": "assert.equal(countSubstring(testCases[0], searchString[0]), results[0], '<code>countSubstring(\"the three truths\", \"th\")</code> should return <code>3</code>.');"
        },
        {
          "text": "<code>countSubstring(\"ababababab\", \"abab\")</code> should return <code>2</code>.",
          "testString": "assert.equal(countSubstring(testCases[1], searchString[1]), results[1], '<code>countSubstring(\"ababababab\", \"abab\")</code> should return <code>2</code>.');"
        },
        {
          "text": "<code>countSubstring(\"abaabba*bbaba*bbab\", \"a*b\")</code> should return <code>2</code>.",
          "testString": "assert.equal(countSubstring(testCases[2], searchString[2]), results[2], '<code>countSubstring(\"abaabba*bbaba*bbab\", \"a*b\")</code> should return <code>2</code>.');"
        }
      ],
      "id": "596fda99c69f779975a1b67d",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function countSubstring (str, subStr) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = ['the three truths', 'ababababab', 'abaabba*bbaba*bbab'];",
            "const searchString = ['th', 'abab', 'a*b'];",
            "const results = [3, 2, 2];"
          ]
        }
      }
    },
    {
      "title": "Count the coins",
      "description": [
        "<p>There are four types of common coins in <a href=\"https://en.wikipedia.org/wiki/United_States\" title=\"link: https://en.wikipedia.org/wiki/United_States\">US</a> currency:</p>",
        "quarters (25 cents)",
        "dimes (10 cents)",
        "nickels (5 cents),  and ",
        "pennies (1 cent)  ",
        "<p>There are six ways to make change for 15 cents:</p>",
        "A dime and a nickel ",
        "A dime and 5 pennies",
        "3 nickels",
        "2 nickels and 5 pennies",
        "A nickel and 10 pennies",
        "15 pennies",
        "Task:",
        "<p>Implement a function to determine how many ways there are to make change for a dollar using these common coins? (1 dollar = 100 cents).</p>",
        "Reference:",
        " <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_Temp_52\" title=\"link: http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_Temp_52\">an algorithm from MIT Press</a>. "
      ],
      "solutions": [
        "function countCoins () {\n  let t = 100;\n  const operands = [1, 5, 10, 25];\n  const targetsLength = t + 1;\n  const operandsLength = operands.length;\n  t = [1];\n\n  for (let a = 0; a < operandsLength; a++) {\n    for (let b = 1; b < targetsLength; b++) {\n      // initialise undefined target\n      t[b] = t[b] ? t[b] : 0;\n\n      // accumulate target + operand ways\n      t[b] += (b < operands[a]) ? 0 : t[b - operands[a]];\n    }\n  }\n\n  return t[targetsLength - 1];\n}\n"
      ],
      "tests": [
        {
          "text": "<code>countCoins</code> is a function.",
          "testString": "assert(typeof countCoins === 'function', '<code>countCoins</code> is a function.');"
        },
        {
          "text": "<code>countCoints()</code> should return 242.",
          "testString": "assert.equal(countCoins(), 242, '<code>countCoints()</code> should return 242.');"
        }
      ],
      "id": "59713bd26bdeb8a594fb9413",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function countCoins () {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Cramer's rule",
      "description": [
        "<p>In <a href=\"https://en.wikipedia.org/wiki/linear algebra\" title=\"wp: linear algebra\">linear algebra</a>, <a href=\"https://en.wikipedia.org/wiki/Cramer's rule\" title=\"wp: Cramer's rule\">Cramer's rule</a> is an explicit formula for the solution of a <a href=\"https://en.wikipedia.org/wiki/system of linear equations\" title=\"wp: system of linear equations\">system of linear equations</a> with as many equations as unknowns, valid whenever the system has a unique solution. It expresses the solution in terms of the determinants of the (square) coefficient matrix and of matrices obtained from it by replacing one column by the vector of right hand sides of the equations.</p>",
        "<p>Given</p>",
        "<p><big></p>",
        "<p> $\\left\\{\\begin{matrix}a_1x + b_1y + c_1z&= {\\color{red}d_1}\\\\a_2x + b_2y + c_2z&= {\\color{red}d_2}\\\\a_3x + b_3y + c_3z&= {\\color{red}d_3}\\end{matrix}\\right.$</p>",
        "</big><p>which in matrix format is</p><p><big></p>",
        "<p> $\\begin{bmatrix} a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\end{bmatrix}\\begin{bmatrix} x \\\\ y \\\\ z \\end{bmatrix}=\\begin{bmatrix} {\\color{red}d_1} \\\\ {\\color{red}d_2} \\\\ {\\color{red}d_3} \\end{bmatrix}.$</p>",
        "</big><p>Then the values of $x, y$ and $z$ can be found as follows:</p><p><big></p>",
        "<p>$x = \\frac{\\begin{vmatrix} {\\color{red}d_1} & b_1 & c_1 \\\\ {\\color{red}d_2} & b_2 & c_2 \\\\ {\\color{red}d_3} & b_3 & c_3 \\end{vmatrix} } { \\begin{vmatrix} a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\end{vmatrix}}, \\quad y = \\frac {\\begin{vmatrix} a_1 & {\\color{red}d_1} & c_1 \\\\ a_2 & {\\color{red}d_2} & c_2 \\\\ a_3 & {\\color{red}d_3} & c_3 \\end{vmatrix}} {\\begin{vmatrix} a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\end{vmatrix}}, \\text{ and }z = \\frac { \\begin{vmatrix} a_1 & b_1 & {\\color{red}d_1} \\\\ a_2 & b_2 & {\\color{red}d_2} \\\\ a_3 & b_3 & {\\color{red}d_3} \\end{vmatrix}} {\\begin{vmatrix} a_1 & b_1 & c_1 \\\\ a_2 & b_2 & c_2 \\\\ a_3 & b_3 & c_3 \\end{vmatrix} }.$</p>",
        "</big>",
        "Task",
        "<p>Given the following system of equations:</p><p><big>",
        "$\\begin{cases}",
        "2w-x+5y+z=-3 \\\\",
        "3w+2x+2y-6z=-32 \\\\",
        "w+3x+3y-z=-47 \\\\",
        "5w-2x-3y+3z=49 \\\\",
        "\\end{cases}$",
        "</big></p>",
        "<p>solve for <big>$w$, $x$, $y$</big> and <big>$z$</big>, using Cramer's rule.</p>"
      ],
      "solutions": [
        "/**\n * Compute Cramer's Rule\n * @param  {array} matrix    x,y,z, etc. terms\n * @param  {array} freeTerms\n * @return {array}           solution for x,y,z, etc.\n */\nfunction cramersRule(matrix, freeTerms) {\n  const det = detr(matrix);\n  const returnArray = [];\n  let i;\n\n  for (i = 0; i < matrix[0].length; i++) {\n    const tmpMatrix = insertInTerms(matrix, freeTerms, i);\n    returnArray.push(detr(tmpMatrix) / det);\n  }\n  return returnArray;\n}\n\n/**\n * Inserts single dimensional array into\n * @param  {array} matrix multidimensional array to have ins inserted into\n * @param  {array} ins single dimensional array to be inserted vertically into matrix\n * @param  {array} at  zero based offset for ins to be inserted into matrix\n * @return {array}     New multidimensional array with ins replacing the at column in matrix\n */\nfunction insertInTerms(matrix, ins, at) {\n  const tmpMatrix = clone(matrix);\n  let i;\n  for (i = 0; i < matrix.length; i++) {\n    tmpMatrix[i][at] = ins[i];\n  }\n  return tmpMatrix;\n}\n/**\n * Compute the determinate of a matrix.  No protection, assumes square matrix\n * function borrowed, and adapted from MIT Licensed numericjs library (www.numericjs.com)\n * @param  {array} m Input Matrix (multidimensional array)\n * @return {number}   result rounded to 2 decimal\n */\nfunction detr(m) {\n  let ret = 1;\n  let j;\n  let k;\n  const A = clone(m);\n  const n = m[0].length;\n  let alpha;\n\n  for (j = 0; j < n - 1; j++) {\n    k = j;\n    for (let i = j + 1; i < n; i++) { if (Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }\n    if (k !== j) {\n      const temp = A[k]; A[k] = A[j]; A[j] = temp;\n      ret *= -1;\n    }\n    const Aj = A[j];\n    for (let i = j + 1; i < n; i++) {\n      const Ai = A[i];\n      alpha = Ai[j] / Aj[j];\n      for (k = j + 1; k < n - 1; k += 2) {\n        const k1 = k + 1;\n        Ai[k] -= Aj[k] * alpha;\n        Ai[k1] -= Aj[k1] * alpha;\n      }\n      if (k !== n) { Ai[k] -= Aj[k] * alpha; }\n    }\n    if (Aj[j] === 0) { return 0; }\n    ret *= Aj[j];\n  }\n  return Math.round(ret * A[j][j] * 100) / 100;\n}\n\n/**\n * Clone two dimensional Array using ECMAScript 5 map function and EcmaScript 3 slice\n * @param  {array} m Input matrix (multidimensional array) to clone\n * @return {array}   New matrix copy\n */\nfunction clone(m) {\n  return m.map(a => a.slice());\n}\n"
      ],
      "tests": [
        {
          "text": "<code>cramersRule</code> is a function.",
          "testString": "assert(typeof cramersRule === 'function', '<code>cramersRule</code> is a function.');"
        },
        {
          "text": "<code>cramersRule([[2, -1, 5, 1], [3, 2, 2, -6], [1, 3, 3, -1], [5, -2, -3, 3]], [-3, -32, -47, 49])</code> should return <code>[2, -12, -4, 1]</code>.",
          "testString": "assert.deepEqual(cramersRule(matrices[0], freeTerms[0]), answers[0], '<code>cramersRule([[2, -1, 5, 1], [3, 2, 2, -6], [1, 3, 3, -1], [5, -2, -3, 3]], [-3, -32, -47, 49])</code> should return <code>[2, -12, -4, 1]</code>.');"
        },
        {
          "text": "<code>cramersRule([[3, 1, 1], [2, 2, 5], [1, -3, -4]], [3, -1, 2])</code> should return <code>[1, 1, -1]</code>.",
          "testString": "assert.deepEqual(cramersRule(matrices[1], freeTerms[1]), answers[1], '<code>cramersRule([[3, 1, 1], [2, 2, 5], [1, -3, -4]], [3, -1, 2])</code> should return <code>[1, 1, -1]</code>.');"
        }
      ],
      "id": "59713da0a428c1a62d7db430",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function cramersRule (matrix, freeTerms) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const matrices = [",
            "  [",
            "    [2, -1, 5, 1],",
            "    [3, 2, 2, -6],",
            "    [1, 3, 3, -1],",
            "    [5, -2, -3, 3]",
            "  ],",
            "  [",
            "    [3, 1, 1],",
            "    [2, 2, 5],",
            "    [1, -3, -4]",
            "  ]",
            "];",
            "const freeTerms = [[-3, -32, -47, 49], [3, -1, 2]];",
            "",
            "const answers = [[2, -12, -4, 1], [1, 1, -1]];"
          ]
        }
      }
    },
    {
      "title": "Date format",
      "description": [
        "Task:",
        "<p>Return an array with the current date in the formats:</p>",
        "<p>-   2007-11-23   and </p>",
        "<p>-   Sunday, November 23, 2007</p>",
        "<p>Example output: <code>['2007-11-23', 'Sunday, November 23, 2007']</code></p>"
      ],
      "solutions": [
        "function getDateFormats () {\n  const date = new Date();\n  const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const fmt1 = `${date.getFullYear()}-${(1 + date.getMonth())}-${date.getDate()}`;\n  const fmt2 = `${weekdays[date.getDay()]}, ${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  return [fmt1, fmt2];\n}\n"
      ],
      "tests": [
        {
          "text": "<code>getDateFormats</code> is a function.",
          "testString": "assert(typeof getDateFormats === 'function', '<code>getDateFormats</code> is a function.');"
        },
        {
          "text": "Should return an object.",
          "testString": "assert(typeof getDateFormats() === 'object', 'Should return an object.');"
        },
        {
          "text": "Should returned an array with 2 elements.",
          "testString": "assert(getDateFormats().length === 2, 'Should returned an array with 2 elements.');"
        },
        {
          "text": "Should return the correct date in the right format",
          "testString": "assert.deepEqual(getDateFormats(), dates, equalsMessage);"
        }
      ],
      "id": "59669d08d75b60482359409f",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function getDateFormats () {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const getDateSolution = () => {",
            "  const date = new Date();",
            "  const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];",
            "  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];",
            "  const fmt1 = `${date.getFullYear()}-${(1 + date.getMonth())}-${date.getDate()}`;",
            "  const fmt2 = `${weekdays[date.getDay()]}, ${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;",
            "  return [fmt1, fmt2];",
            "};",
            "",
            "const dates = getDateSolution();",
            "const equalsMessage = `message: <code>getDataFormats()</code> should return <code>[\"${dates[0]}\", \"${dates[1]}\"]</code>.`;"
          ]
        }
      }
    },
    {
      "title": "Date manipulation",
      "description": [
        "Task:",
        "<p>Given a date string in EST, output the given date as a string with 12 hours added to the time. </p>",
        "<p>Time zone should be preserved.</p>",
        "<p>Example input: </p>",
        "<p><code>\"March 7 2009 7:30pm EST\"</code></p>",
        "<p>Example output: </p>",
        "<p><code>\"March 8 2009 7:30am EST\"</code></p>"
      ],
      "solutions": [
        "function add12Hours (dateString) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'];\n  // Get the parts of the string\n  const parts = dateString.split(' ');\n  const month = months.indexOf(parts[0]);\n  const day = parseInt(parts[1], 10);\n  const year = parseInt(parts[2], 10);\n  const time = parts[3].split(':');\n  let hours = parseInt(time[0], 10);\n  if (time[1].slice(-2) === 'pm') {\n    hours += 12;\n  }\n  const minutes = parseInt(time[1].slice(0, -2), 10);\n\n  // Create a date with given parts, and updated hours\n  const date = new Date();\n  date.setFullYear(year, month, day);\n  date.setHours(hours + 12);  // Add 12 hours\n  date.setMinutes(minutes);\n\n  let hoursOutput = date.getHours();\n  let abbreviation = 'am';\n  if (hoursOutput > 12) {\n    hoursOutput -= 12;\n    abbreviation = 'pm';\n  }\n\n  return `${months[date.getMonth()]} ${date.getDate()} ${date.getFullYear()} ${hoursOutput}:${date.getMinutes()}${abbreviation} EST`;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>add12Hours</code> is a function.",
          "testString": "assert(typeof add12Hours === 'function', '<code>add12Hours</code> is a function.');"
        },
        {
          "text": "<code>add12Hours(dateString)</code> should return a string.",
          "testString": "assert(typeof add12Hours(tests[0]) === 'string', '<code>add12Hours(dateString)</code> should return a string.');"
        },
        {
          "text": "<code>add12Hours(\"' + tests[0] + '\")</code> should return <code>\"' + answers[0] + '\"</code>",
          "testString": "assert(add12Hours(tests[0]) === answers[0], '<code>add12Hours(\"' + tests[0] + '\")</code> should return <code>\"' + answers[0] + '\"</code>');"
        },
        {
          "text": "Should handel day change. <code>add12Hours(\"' + tests[1] + '\")</code> should return <code>\"' + answers[1] + '\"</code>",
          "testString": "assert(add12Hours(tests[1]) === answers[1], 'Should handel day change. <code>add12Hours(\"' + tests[1] + '\")</code> should return <code>\"' + answers[1] + '\"</code>');"
        },
        {
          "text": "Should handel month change in a leap years. <code>add12Hours(\"' + tests[2] + '\")</code> should return <code>\"' + answers[2] + '\"</code>",
          "testString": "assert(add12Hours(tests[2]) === answers[2], 'Should handel month change in a leap years. <code>add12Hours(\"' + tests[2] + '\")</code> should return <code>\"' + answers[2] + '\"</code>');"
        },
        {
          "text": "Should handel month change in a common years. <code>add12Hours(\"' + tests[3] + '\")</code> should return <code>\"' + answers[3] + '\"</code>",
          "testString": "assert(add12Hours(tests[3]) === answers[3], 'Should handel month change in a common years. <code>add12Hours(\"' + tests[3] + '\")</code> should return <code>\"' + answers[3] + '\"</code>');"
        },
        {
          "text": "Should handel year change. <code>add12Hours(\"' + tests[4] + '\")</code> should return <code>\"' + answers[4] + '\"</code>",
          "testString": "assert(add12Hours(tests[4]) === answers[4], 'Should handel year change. <code>add12Hours(\"' + tests[4] + '\")</code> should return <code>\"' + answers[4] + '\"</code>');"
        }
      ],
      "id": "5966c21cf732a95f1b67dd28",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function add12Hours (dateString) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const tests = [",
            "  'January 17 2017 11:43am EST',",
            "  'March 7 2009 7:30pm EST',",
            "  'February 29 2004 9:15pm EST',",
            "  'February 28 1999 3:15pm EST',",
            "  'December 31 2020 1:45pm EST'",
            "];",
            "const answers = [",
            "  'January 17 2017 11:43pm EST',",
            "  'March 8 2009 7:30am EST',",
            "  'March 1 2004 9:15am EST',",
            "  'March 1 1999 3:15am EST',",
            "  'January 1 2021 1:45am EST'",
            "];"
          ]
        }
      }
    },
    {
      "title": "Day of the week",
      "description": [
        "<p>A company decides that whenever Xmas falls on a Sunday they will give their workers all extra paid holidays so that, together with any public holidays, workers will not have to work the following week (between the 25th of December and the first of January).</p>",
        "<p>Task:</p>",
        "<p>Write a function that takes a start year and an end year and return an array of all the years where the 25th of December will be a Sunday.</p>"
      ],
      "solutions": [
        "function findXmasSunday (start, end) {\n  const xmasSunday = [];\n  for (let year = start; year <= end; year++) {\n    const xmas = new Date(year, 11, 25);\n    if (xmas.getDay() === 0) {\n      xmasSunday.push(year);\n    }\n  }\n  return xmasSunday;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>findXmasSunday</code> is a function.",
          "testString": "assert(typeof findXmasSunday === 'function', '<code>findXmasSunday</code> is a function.');"
        },
        {
          "text": "<code>findChristmasSunday(2000, 2100)</code> should return an array.",
          "testString": "assert(typeof findXmasSunday(2000, 2100) === 'object', '<code>findChristmasSunday(2000, 2100)</code> should return an array.');"
        },
        {
          "text": "<code>findChristmasSunday(2008, 2121</code> should return [1977, 1983, 1988, 1994, 2005, 2011, 2016]",
          "testString": "assert.deepEqual(findXmasSunday(1970, 2017), firstSolution, '<code>findChristmasSunday(2008, 2121</code> should return [1977, 1983, 1988, 1994, 2005, 2011, 2016]');"
        },
        {
          "text": "<code>findChristmasSunday(2008, 2121</code> should return [2011, 2016, 2022, 2033, 2039, 2044, 2050, 2061, 2067, 2072, 2078, 2089, 2095, 2101, 2107, 2112, 2118]",
          "testString": "assert.deepEqual(findXmasSunday(2008, 2121), secondSolution, '<code>findChristmasSunday(2008, 2121</code> should return [2011, 2016, 2022, 2033, 2039, 2044, 2050, 2061, 2067, 2072, 2078, 2089, 2095, 2101, 2107, 2112, 2118]');"
        }
      ],
      "id": "5966f99c45e8976909a85575",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function findXmasSunday (start, end) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const firstSolution = [1977, 1983, 1988, 1994, 2005, 2011, 2016];",
            "const secondSolution = [2011, 2016, 2022, 2033, 2039, 2044, 2050, 2061, 2067, 2072, 2078, 2089, 2095, 2101, 2107, 2112, 2118];"
          ]
        }
      }
    },
    {
      "title": "Deal cards for FreeCell",
      "description": [
        "<p>Free Cell is the solitaire card game that Paul Alfille introduced to the PLATO system in 1978. Jim Horne, at Microsoft, changed the name to FreeCell and reimplemented the game for <a href=\"http://rosettacode.org/wiki/DOS\" title=\"DOS\">DOS</a>, then <a href=\"http://rosettacode.org/wiki/Windows\" title=\"Windows\">Windows</a>. </p>",
        "<p>This version introduced 32000 numbered deals. (The <a href=\"http://www.solitairelaboratory.com/fcfaq.html\" title=\"link: http://www.solitairelaboratory.com/fcfaq.html\">FreeCell FAQ</a> tells this history.)</p><p>As the game became popular, Jim Horne disclosed <a href=\"http://www.solitairelaboratory.com/mshuffle.txt\" title=\"link: http://www.solitairelaboratory.com/mshuffle.txt\">the algorithm</a>, and other implementations of FreeCell began to reproduce the Microsoft deals. </p>",
        "<p>These deals are numbered from 1 to 32000.</p>",
        "<p>Newer versions from Microsoft have 1 million deals, numbered from 1 to 1000000; some implementations allow numbers outside that range.</p><p>The algorithm uses this <a href=\"http://rosettacode.org/wiki/linear congruential generator\" title=\"linear congruential generator\">linear congruential generator</a> from Microsoft C:</p>$state_{n + 1} \\equiv 214013 \\times state_n + 2531011 \\pmod{2^{31}}$",
        "$rand_n = state_n \\div 2^{16}$",
        "$rand_n$ is in range 0 to 32767.",
        "<p>The algorithm follows:</p>Seed the RNG with the number of the deal.",
        "Create an <a href=\"http://rosettacode.org/wiki/array\" title=\"array\">array</a> of 52 cards: Ace of Clubs, Ace of Diamonds, Ace of Hearts, Ace of Spades, 2 of Clubs, 2 of Diamonds, and so on through the ranks: Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King. The array indexes are 0 to 51, with Ace of Clubs at 0, and King of Spades at 51.",
        "Until the array is empty:",
        " Choose a random card at index &equiv; next random number (mod array length). ",
        " Swap this random card with the last card of the array.",
        " Remove this random card from the array. (Array length goes down by 1.)",
        " Deal this random card.",
        "Deal all 52 cards, face up, across 8 columns. The first 8 cards go in 8 columns, the next 8 cards go on the first 8 cards, and so on.",
        "Example:",
        "<p>Order to deal cards</p>",
        "<p><pre> 1  2  3  4  5  6  7  8",
        " 9 10 11 12 13 14 15 16",
        "17 18 19 20 21 22 23 24",
        "25 26 27 28 29 30 31 32",
        "33 34 35 36 37 38 39 40",
        "41 42 43 44 45 46 47 48",
        "49 50 51 52</pre></p>",
        "<p>Game #1</p>",
        "<p><pre>[",
        "['JD', '2D', '9H', 'JC', '5D', '7H', '7C', '5H'],",
        "['KD', 'KC', '9S', '5S', 'AD', 'QC', 'KH', '3H'],",
        "['2S', 'KS', '9D', 'QD', 'JS', 'AS', 'AH', '3C'],",
        "['4C', '5C', 'TS', 'QH', '4H', 'AC', '4D', '7S'],",
        "['3S', 'TD', '4S', 'TH', '8H', '2C', 'JH', '7D'],",
        "['6D', '8S', '8D', 'QS', '6C', '3D', '8C', 'TC'],",
        "['6S', '9C', '2H', '6H']",
        "]</pre></p>",
        "<p>Game #617</p>",
        "<p><pre>[",
        "['7D', 'AD', '5C', '3S', '5S', '8C', '2D', 'AH'],",
        "['TD', '7S', 'QD', 'AC', '6D', '8H', 'AS', 'KH'],",
        "['TH', 'QC', '3H', '9D', '6S', '8D', '3D', 'TC'],",
        "['KD', '5H', '9S', '3C', '8S', '7H', '4D', 'JS'],",
        "['4C', 'QS', '9C', '9H', '7C', '6H', '2C', '2S'],",
        "['4S', 'TS', '2H', '5D', 'JC', '6C', 'JH', 'QH'],",
        "['JD', 'KS', 'KC', '4H']",
        "]</pre></p>",
        "Task:",
        "<p>Write a function to take a deal number and deal cards in the same order as this algorithm.</p>",
        "<p>The function must return a two dimensional array representing the FreeCell board.</p>",
        "<p>Deals can also be checked against <a href=\"http://freecellgamesolutions.com/\" title=\"link: http://freecellgamesolutions.com/\">FreeCell solutions to 1000000 games</a>.</p>",
        "<p>(Summon a video solution, and it displays the initial deal.)</p>"
      ],
      "solutions": [
        "// RNG\nfunction FreeCellRNG (seed) {\n  return {\n    lastNum: seed,\n    next() {\n      this.lastNum = ((214013 * this.lastNum) + 2531011) % (Math.pow(2, 31));\n      return this.lastNum >> 16;\n    }\n  };\n}\n// Get cards\nfunction getDeck() {\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'];\n  const suits = ['C', 'D', 'H', 'S'];\n  const cards = [];\n  for (let i = 0; i < ranks.length; i += 1) {\n    for (let j = 0; j < suits.length; j += 1) {\n      cards.push(`${ranks[i]}${suits[j]}`);\n    }\n  }\n  return cards;\n}\nfunction dealFreeCell(seed) {\n  const rng = FreeCellRNG(seed);\n  const deck = getDeck();\n\n  const deltCards = [[], [], [], [], [], [], []];\n  let currentColumn = 0;\n  let currentRow = 0;\n\n  let rand;\n  let temp;\n  let card;\n  while (deck.length > 0) {\n    // Choose a random card\n    rand = rng.next() % deck.length;\n\n    // Swap this random card with the last card in the array\n    temp = deck[deck.length - 1];\n    deck[deck.length - 1] = deck[rand];\n    deck[rand] = temp;\n\n    // Remove this card from the array\n    card = deck.pop();\n\n    // Deal this card\n    deltCards[currentRow].push(card);\n    currentColumn += 1;\n    if (currentColumn === 8) {\n      currentColumn = 0;\n      currentRow += 1;\n    }\n  }\n\n  return deltCards;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>dealFreeCell</code> is a function.",
          "testString": "assert(typeof dealFreeCell === 'function', '<code>dealFreeCell</code> is a function.');"
        },
        {
          "text": "<code>dealFreeCell(seed)</code> should return an object.",
          "testString": "assert(typeof dealFreeCell(1) === 'object', '<code>dealFreeCell(seed)</code> should return an object.');"
        },
        {
          "text": "<code>dealFreeCell(seed)</code> should return an array of length 7.",
          "testString": "assert(dealFreeCell(1).length === 7, '<code>dealFreeCell(seed)</code> should return an array of length 7.');"
        },
        {
          "text": "<code>dealFreeCell(1)</code> should return an array identical to example \"Game #1\"",
          "testString": "assert.deepEqual(dealFreeCell(1), game1, '<code>dealFreeCell(1)</code> should return an array identical to example \"Game #1\"');"
        },
        {
          "text": "<code>dealFreeCell(617)</code> should return an array identical to example \"Game #617\"",
          "testString": "assert.deepEqual(dealFreeCell(617), game617, '<code>dealFreeCell(617)</code> should return an array identical to example \"Game #617\"');"
        }
      ],
      "id": "59694356a6e7011f7f1c5f4e",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function dealFreeCell (seed) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const replaceThis = 3;",
            "const game1 = [",
            "  ['JD', '2D', '9H', 'JC', '5D', '7H', '7C', '5H'],",
            "  ['KD', 'KC', '9S', '5S', 'AD', 'QC', 'KH', '3H'],",
            "  ['2S', 'KS', '9D', 'QD', 'JS', 'AS', 'AH', '3C'],",
            "  ['4C', '5C', 'TS', 'QH', '4H', 'AC', '4D', '7S'],",
            "  ['3S', 'TD', '4S', 'TH', '8H', '2C', 'JH', '7D'],",
            "  ['6D', '8S', '8D', 'QS', '6C', '3D', '8C', 'TC'],",
            "  ['6S', '9C', '2H', '6H']",
            "];",
            "const game617 = [",
            "  ['7D', 'AD', '5C', '3S', '5S', '8C', '2D', 'AH'],",
            "  ['TD', '7S', 'QD', 'AC', '6D', '8H', 'AS', 'KH'],",
            "  ['TH', 'QC', '3H', '9D', '6S', '8D', '3D', 'TC'],",
            "  ['KD', '5H', '9S', '3C', '8S', '7H', '4D', 'JS'],",
            "  ['4C', 'QS', '9C', '9H', '7C', '6H', '2C', '2S'],",
            "  ['4S', 'TS', '2H', '5D', 'JC', '6C', 'JH', 'QH'],",
            "  ['JD', 'KS', 'KC', '4H']",
            "];"
          ]
        }
      }
    },
    {
      "title": "Deepcopy",
      "description": [
        "Task:",
        "<p>Write a function that returns a deep copy of a given object.</p>",
        "<p>The copy must not be the same object that was given.</p>",
        "<p>This task will not test for: </p>",
        "Objects with properties that are functions",
        "Date objects or object with properties that are Date objects",
        "RegEx or object with properties that are RegEx objects",
        "Prototype copying"
      ],
      "null": [],
      "solutions": [
        "function deepcopy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\n"
      ],
      "tests": [
        {
          "text": "<code>deepcopy</code> should be a function.",
          "testString": "assert(typeof deepcopy === 'function', '<code>deepcopy</code> should be a function.');"
        },
        {
          "text": "<code>deepcopy({test: \"test\"})</code> should return an object.",
          "testString": "assert(typeof deepcopy(obj1) === 'object', '<code>deepcopy({test: \"test\"})</code> should return an object.');"
        },
        {
          "text": "Should not return the same object that was provided.",
          "testString": "assert(deepcopy(obj2) != obj2, 'Should not return the same object that was provided.');"
        },
        {
          "text": "When passed an object containing an array, should return a deep copy of the object.",
          "testString": "assert.deepEqual(deepcopy(obj2), obj2, 'When passed an object containing an array, should return a deep copy of the object.');"
        },
        {
          "text": "When passed an object containing another object, should return a deep copy of the object.",
          "testString": "assert.deepEqual(deepcopy(obj3), obj3, 'When passed an object containing another object, should return a deep copy of the object.');"
        }
      ],
      "id": "596a8888ab7c01048de257d5",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function deepcopy (obj) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const obj1 = { test: 'test' };",
            "const obj2 = {",
            "  t: 'test',",
            "  a: ['an', 'array']",
            "};",
            "const obj3 = {",
            "  t: 'try',",
            "  o: obj2",
            "};"
          ]
        }
      }
    },
    {
      "title": "Define a primitive data type",
      "description": [
        "Task:",
        "<p>Define a type that behaves like an integer but has a lowest valid value of 1 and a highest valid value of 10.</p>",
        "Errors:",
        "If you try to instantiate a <code>Num</code> with a value outside of 1 - 10",
        "it should throw a <code>TypeError</code> with an error message of <code>'Out of range'</code>.",
        "If you try to instantiate a <code>Num</code> with a value that is not a number",
        "it should throw a <code>TypeError</code> with an error message of <code>'Not a Number'</code>."
      ],
      "solutions": [
        "function Num(n) {\n  const num = Math.floor(n);\n  if (isNaN(num)) {\n    throw new TypeError('Not a Number');\n  }\n  if (num < 1 || num > 10) {\n    throw new TypeError('Out of range');\n  }\n\n  this._value = num;\n}\nNum.prototype.valueOf = function() { return this._value; };\nNum.prototype.toString = function () { return this._value.toString(); };\n\nfunction throws(func, errorType, msg) {\n  let hasThrown = false;\n  let errorMsg = '';\n  let correctType = false;\n  try {\n    func();\n  }\n  catch (e) {\n    hasThrown = true;\n    errorMsg = e.message;\n    if (e instanceof errorType) {\n      correctType = true;\n    }\n  }\n  return hasThrown && correctType && msg === errorMsg;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>Num</code> should be a function.",
          "testString": "assert(typeof Num === 'function', '<code>Num</code> should be a function.');"
        },
        {
          "text": "<code>new Num(4)</code> should return an object.",
          "testString": "assert(typeof (new Num(4)) === 'object', '<code>new Num(4)</code> should return an object.');"
        },
        {
          "text": "<code>new Num(\\'test\\')</code> should throw a TypeError with message \\'Not a Number\\'.",
          "testString": "assert(throws(() => new Num('test'), TypeError, 'Not a Number'), '<code>new Num(\\'test\\')</code> should throw a TypeError with message \\'Not a Number\\'.');"
        },
        {
          "text": "<code>new Num(0)</code> should throw a TypeError with message \\'Out of range\\'.",
          "testString": "assert(throws(() => new Num(0), TypeError, 'Out of range'), '<code>new Num(0)</code> should throw a TypeError with message \\'Out of range\\'.');"
        },
        {
          "text": "<code>new Num(-5)</code> should throw a TypeError with message \\'Out of range\\'.",
          "testString": "assert(throws(() => new Num(-5), TypeError, 'Out of range'), '<code>new Num(-5)</code> should throw a TypeError with message \\'Out of range\\'.');"
        },
        {
          "text": "<code>new Num(10)</code> should throw a TypeError with message \\'Out of range\\'.",
          "testString": "assert(throws(() => new Num(11), TypeError, 'Out of range'), '<code>new Num(10)</code> should throw a TypeError with message \\'Out of range\\'.');"
        },
        {
          "text": "<code>new Num(20)</code> should throw a TypeError with message \\'Out of range\\'.",
          "testString": "assert(throws(() => new Num(20), TypeError, 'Out of range'), '<code>new Num(20)</code> should throw a TypeError with message \\'Out of range\\'.');"
        },
        {
          "text": "<code>new Num(3) + new Num(4)</code> should equal 7.",
          "testString": "assert.equal(new Num(3) + new Num(4), 7, '<code>new Num(3) + new Num(4)</code> should equal 7.');"
        },
        {
          "text": "<code>new Num(3) - new Num(4)</code> should equal -1.",
          "testString": "assert.equal(new Num(3) - new Num(4), -1, '<code>new Num(3) - new Num(4)</code> should equal -1.');"
        },
        {
          "text": "<code>new Num(3) * new Num(4)</code> should equal 12.",
          "testString": "assert.equal(new Num(3) * new Num(4), 12, '<code>new Num(3) * new Num(4)</code> should equal 12.');"
        },
        {
          "text": "<code>new Num(3) / new Num(4)</code> should equal 0.75.",
          "testString": "assert.equal(new Num(3) / new Num(4), 0.75, '<code>new Num(3) / new Num(4)</code> should equal 0.75.');"
        },
        {
          "text": "<code>new Num(3) < new Num(4)</code> should be true.",
          "testString": "assert(new Num(3) < new Num(4), '<code>new Num(3) < new Num(4)</code> should be true.');"
        },
        {
          "text": "<code>new Num(3) > new Num(4)</code> should be false.",
          "testString": "assert(!(new Num(3) > new Num(4)), '<code>new Num(3) > new Num(4)</code> should be false.');"
        },
        {
          "text": "<code>(new Num(5)).toString()</code> should return \\'5\\'",
          "testString": "assert.equal((new Num(5)).toString(), '5', '<code>(new Num(5)).toString()</code> should return \\'5\\'');"
        }
      ],
      "id": "597089c87eec450c68aa1643",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Num (n) {",
            "  // Good luck!",
            "  return n;",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Department Numbers",
      "description": [
        "<p>There is a highly organized city that has decided to assign a number to each of their departments:</p>",
        "Police department",
        "Sanitation department",
        "Fire department ",
        "<p>Each department can have a number between 1 and 7  (inclusive).</p><p>The three department numbers are to be unique (different from each other) and must add up to the number 12.</p><p>The Chief of the Police doesn't like odd numbers and wants to have an even number for his department.</p>",
        "Task:",
        "<p>Write a program which outputs all valid combinations:</p>",
        "<p>[2, 3, 7]</p>",
        "<p>[2, 4, 6]</p>",
        "<p>[2, 6, 4]</p>",
        "<p>[2, 7, 3]</p>",
        "<p>[4, 1, 7]</p>",
        "<p>[4, 2, 6]</p>",
        "<p>[4, 3, 5]</p>",
        "<p>[4, 5, 3]</p>",
        "<p>[4, 6, 2]</p>",
        "<p>[4, 7, 1]</p>",
        "<p>[6, 1, 5]</p>",
        "<p>[6, 2, 4]</p>",
        "<p>[6, 4, 2]</p>",
        "<p>[6, 5, 1]</p>"
      ],
      "solutions": [
        "function combinations (possibleNumbers, total) {\n  let firstNumber;\n  let secondNumber;\n  let thridNumber;\n  const allCombinations = [];\n\n  for (let i = 0; i < possibleNumbers.length; i += 1) {\n    firstNumber = possibleNumbers[i];\n\n    if (firstNumber % 2 === 0) {\n      for (let j = 0; j < possibleNumbers.length; j += 1) {\n        secondNumber = possibleNumbers[j];\n\n        if (j !== i && firstNumber + secondNumber <= total) {\n          thridNumber = total - firstNumber - secondNumber;\n\n          if (thridNumber !== firstNumber && thridNumber !== secondNumber && possibleNumbers.includes(thridNumber)) {\n            allCombinations.push([firstNumber, secondNumber, thridNumber]);\n          }\n        }\n      }\n    }\n  }\n  return allCombinations;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>combinations</code> should be a function.",
          "testString": "assert(typeof combinations === 'function', '<code>combinations</code> should be a function.');"
        },
        {
          "text": "<code>combinations([1, 2, 3], 6)</code> should return an Array.",
          "testString": "assert(Array.isArray(combinations([1, 2, 3], 6)), '<code>combinations([1, 2, 3], 6)</code> should return an Array.');"
        },
        {
          "text": "<code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return an array of length 14.",
          "testString": "assert(combinations(nums, total).length === len, '<code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return an array of length 14.');"
        },
        {
          "text": "<code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return all valid combinations.",
          "testString": "assert.deepEqual(combinations(nums, total), result, '<code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return all valid combinations.');"
        }
      ],
      "id": "59f40b17e79dbf1ab720ed7a",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function combinations (possibleNumbers, total) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const nums = [1, 2, 3, 4, 5, 6, 7];",
            "const total = 12;",
            "const len = 14;",
            "const result = [",
            "  [2, 3, 7],",
            "  [2, 4, 6],",
            "  [2, 6, 4],",
            "  [2, 7, 3],",
            "  [4, 1, 7],",
            "  [4, 2, 6],",
            "  [4, 3, 5],",
            "  [4, 5, 3],",
            "  [4, 6, 2],",
            "  [4, 7, 1],",
            "  [6, 1, 5],",
            "  [6, 2, 4],",
            "  [6, 4, 2],",
            "  [6, 5, 1]",
            "];"
          ]
        }
      }
    },
    {
      "title": "Discordian date",
      "description": [
        "Task:",
        "<p>Convert a given date from the  <a href=\"https://en.wikipedia.org/wiki/Gregorian calendar\" title=\"wp: Gregorian calendar\">Gregorian calendar</a>  to the  <a href=\"https://en.wikipedia.org/wiki/Discordian calendar\" title=\"wp: Discordian calendar\">Discordian calendar</a>.</p>"
      ],
      "solutions": [
        "/**\n * All Hail Discordia! - this script prints Discordian date using system date.\n *\n * lang: JavaScript\n * author: jklu\n * contributors: JamesMcGuigan\n *\n * source: https://rosettacode.org/wiki/Discordian_date#JavaScript\n */\nconst seasons = [\n  'Chaos', 'Discord', 'Confusion',\n  'Bureaucracy', 'The Aftermath'\n];\nconst weekday = [\n  'Sweetmorn', 'Boomtime', 'Pungenday',\n  'Prickle-Prickle', 'Setting Orange'\n];\n\nconst apostle = [\n  'Mungday', 'Mojoday', 'Syaday',\n  'Zaraday', 'Maladay'\n];\n\nconst holiday = [\n  'Chaoflux', 'Discoflux', 'Confuflux',\n  'Bureflux', 'Afflux'\n];\n\n\nDate.prototype.isLeapYear = function() {\n  const year = this.getFullYear();\n  if ((year & 3) !== 0) { return false; }\n  return ((year % 100) !== 0 || (year % 400) === 0);\n};\n\n// Get Day of Year\nDate.prototype.getDOY = function() {\n  const dayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  const mn = this.getMonth();\n  const dn = this.getDate();\n  let dayOfYear = dayCount[mn] + dn;\n  if (mn > 1 && this.isLeapYear()) { dayOfYear += 1; }\n  return dayOfYear;\n};\n\nDate.prototype.isToday = function() {\n  const today = new Date();\n  return this.getDate() === today.getDate()\n      && this.getMonth() === today.getMonth()\n      && this.getFullYear() === today.getFullYear()\n  ;\n};\n\nfunction discordianDate(date) {\n  if (!date) { date = new Date(); }\n\n  const y = date.getFullYear();\n  const yold = y + 1166;\n  let dayOfYear = date.getDOY();\n  let celebrateHoliday = null;\n\n  if (date.isLeapYear()) {\n    if (dayOfYear === 60) {\n      celebrateHoliday = 'St. Tib\\'s Day';\n    }\n    else if (dayOfYear > 60) {\n      dayOfYear--;\n    }\n  }\n  dayOfYear--;\n\n  const divDay = Math.floor(dayOfYear / 73);\n\n  const seasonDay = (dayOfYear % 73) + 1;\n  if (seasonDay === 5) {\n    celebrateHoliday = apostle[divDay];\n  }\n  if (seasonDay === 50) {\n    celebrateHoliday = holiday[divDay];\n  }\n\n  const season = seasons[divDay];\n  const dayOfWeek = weekday[dayOfYear % 5];\n\n  const nth = (seasonDay % 10 === 1) ? 'st'\n          : (seasonDay % 10 === 2) ? 'nd'\n          : (seasonDay % 10 === 3) ? 'rd'\n                                  : 'th';\n\n  return ''\n         + dayOfWeek\n         + ', the ' + seasonDay + nth\n         + ' day of ' + season\n         + ' in the YOLD ' + yold\n         + (celebrateHoliday ? '. Celebrate ' + celebrateHoliday + '!' : '')\n    ;\n}\n\n"
      ],
      "tests": [
        {
          "text": "<code>discordianDate</code> is a function.",
          "testString": "assert(typeof discordianDate === 'function', '<code>discordianDate</code> is a function.');"
        },
        {
          "text": "<code>discordianDate(new Date(2010, 6, 22))</code> should return <code>\"Pungenday, the 57th day of Confusion in the YOLD 3176\"</code>.",
          "testString": "assert(discordianDate(new Date(2010, 6, 22)) === 'Pungenday, the 57th day of Confusion in the YOLD 3176', '<code>discordianDate(new Date(2010, 6, 22))</code> should return <code>\"Pungenday, the 57th day of Confusion in the YOLD 3176\"</code>.');"
        },
        {
          "text": "<code>discordianDate(new Date(2012, 1, 28))</code> should return <code>\"Prickle-Prickle, the 59th day of Chaos in the YOLD 3178\"</code>.",
          "testString": "assert(discordianDate(new Date(2012, 1, 28)) === 'Prickle-Prickle, the 59th day of Chaos in the YOLD 3178', '<code>discordianDate(new Date(2012, 1, 28))</code> should return <code>\"Prickle-Prickle, the 59th day of Chaos in the YOLD 3178\"</code>.');"
        },
        {
          "text": "<code>discordianDate(new Date(2012, 1, 29))</code> should return <code>\"Setting Orange, the 60th day of Chaos in the YOLD 3178. Celebrate St. Tib\\'s Day!\"</code>.",
          "testString": "assert(discordianDate(new Date(2012, 1, 29)) === 'Setting Orange, the 60th day of Chaos in the YOLD 3178. Celebrate St. Tib\\'s Day!', '<code>discordianDate(new Date(2012, 1, 29))</code> should return <code>\"Setting Orange, the 60th day of Chaos in the YOLD 3178. Celebrate St. Tib\\'s Day!\"</code>.');"
        },
        {
          "text": "<code>discordianDate(new Date(2012, 2, 1))</code> should return <code>\"Setting Orange, the 60th day of Chaos in the YOLD 3178\"</code>.",
          "testString": "assert(discordianDate(new Date(2012, 2, 1)) === 'Setting Orange, the 60th day of Chaos in the YOLD 3178', '<code>discordianDate(new Date(2012, 2, 1))</code> should return <code>\"Setting Orange, the 60th day of Chaos in the YOLD 3178\"</code>.');"
        },
        {
          "text": "<code>discordianDate(new Date(2010, 0, 5))</code> should return <code>\"Setting Orange, the 5th day of Chaos in the YOLD 3176. Celebrate Mungday!\"</code>.",
          "testString": "assert(discordianDate(new Date(2010, 0, 5)) === 'Setting Orange, the 5th day of Chaos in the YOLD 3176. Celebrate Mungday!', '<code>discordianDate(new Date(2010, 0, 5))</code> should return <code>\"Setting Orange, the 5th day of Chaos in the YOLD 3176. Celebrate Mungday!\"</code>.');"
        },
        {
          "text": "<code>discordianDate(new Date(2011, 4, 3))</code> should return <code>\"Pungenday, the 50th day of Discord in the YOLD 3177. Celebrate Discoflux!\"</code>.",
          "testString": "assert(discordianDate(new Date(2011, 4, 3)) === 'Pungenday, the 50th day of Discord in the YOLD 3177. Celebrate Discoflux!', '<code>discordianDate(new Date(2011, 4, 3))</code> should return <code>\"Pungenday, the 50th day of Discord in the YOLD 3177. Celebrate Discoflux!\"</code>.');"
        },
        {
          "text": "<code>discordianDate(new Date(2015, 9, 19))</code> should return <code>\"Boomtime, the 73rd day of Bureaucracy in the YOLD 3181\"</code>.",
          "testString": "assert(discordianDate(new Date(2015, 9, 19)) === 'Boomtime, the 73rd day of Bureaucracy in the YOLD 3181', '<code>discordianDate(new Date(2015, 9, 19))</code> should return <code>\"Boomtime, the 73rd day of Bureaucracy in the YOLD 3181\"</code>.');"
        }
      ],
      "id": "59f4eafba0343628bb682785",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function discordianDate (date) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Element-wise operations",
      "description": [
        "<p>Implement basic element-wise matrix-matrix and scalar-matrix operations.</p><p>Implement:</p>",
        "<p>::*  addition</p>",
        "<p>::*  subtraction</p>",
        "<p>::*  multiplication</p>",
        "<p>::*  division</p>",
        "<p>::*  exponentiation</p>",
        "<p>The first parameter will be the operation to be performed, for example : \"m_add\" for matrix addition and \"s_add\" for scalar addition. The second and third parameters will be the matrices on which the operations are to be performed."
      ],
      "solutions": [
        "function operation(op, arr1, arr2) {\n  const ops = {\n    add: ((a, b) => a + b),\n    sub: ((a, b) => a - b),\n    mult: ((a, b) => a * b),\n    div: ((a, b) => a / b),\n    exp: ((a, b) => Math.pow(a, b))\n  };\n  const ifm = op.startsWith('m');\n  const doOp = ops[op.substring(2)];\n  for (let i = 0; i < arr1.length; i++) {\n    for (let j = 0; j < arr1[0].length; j++) {\n      arr1[i][j] = doOp(arr1[i][j], (ifm) ? (arr2[i][j]) : (arr2));\n    }\n  }\n  return arr1;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>operation</code> is a function.",
          "testString": "assert(typeof operation === 'function', '<code>operation</code> is a function.');"
        },
        {
          "text": "<code>operation(\"m_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.",
          "testString": "assert.deepEqual(operation('m_add', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[2, 4], [6, 8]], '<code>operation(\"m_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.');"
        },
        {
          "text": "<code>operation(\"s_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[3,4],[5,6]]</code>.",
          "testString": "assert.deepEqual(operation('s_add', [[1, 2], [3, 4]], 2), [[3, 4], [5, 6]], '<code>operation(\"s_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[3,4],[5,6]]</code>.');"
        },
        {
          "text": "<code>operation(\"m_sub\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.",
          "testString": "assert.deepEqual(operation('m_sub', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[0, 0], [0, 0]], '<code>operation(\"m_sub\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.');"
        },
        {
          "text": "<code>operation(\"m_mult\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.",
          "testString": "assert.deepEqual(operation('m_mult', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 4], [9, 16]], '<code>operation(\"m_mult\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.');"
        },
        {
          "text": "<code>operation(\"m_div\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.",
          "testString": "assert.deepEqual(operation('m_div', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 1], [1, 1]], '<code>operation(\"m_div\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.');"
        },
        {
          "text": "<code>operation(\"m_exp\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.",
          "testString": "assert.deepEqual(operation('m_exp', [[1, 2], [3, 4]], [[1, 2], [3, 4]]), [[1, 4], [27, 256]], '<code>operation(\"m_exp\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.');"
        },
        {
          "text": "<code>operation(\"m_add\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.",
          "testString": "assert.deepEqual(operation('m_add', [[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]), [[10, 12, 14, 16], [18, 20, 22, 24]], '<code>operation(\"m_add\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.');"
        }
      ],
      "id": "599c333915e0ea32d04d4bec",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function operation (op, arr1, arr2) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Emirp primes",
      "description": [
        "<p>An  emirp  (prime spelled backwards)  are primes that when reversed  (in their decimal representation)  are a different prime.</p>",
        "<p>Write a function that should be able to : Show the first <b>n</b> eprimes numbers.Show the eprimes numbers in a range.Show the number of eprimes in a range.Show the <b>n<sup>th</sup></b> eprimes number.<p>The function should have two parameters. The first will receive <b>n</b> or the range as an array. The second will receive a boolean, that specifies if the function returns the eprimes as an array or a single number(the number of primes in the range or the <b>n<sup>th</sup></b> prime). According to the parameters the function should return an array or a number."
      ],
      "null": [],
      "solutions": [
        "// noprotect\nfunction emirps(num, showEmirps)\n{\n  const is_prime = function(n)\n\t{\n    if (!(n % 2) || !(n % 3)) return false;\n    let p = 1;\n    while (p * p < n)\n\t\t\t        { if (n % (p += 4) == 0 || n % (p += 2) == 0)\n\t\t\t                { return false; } }\n    return true;\n  };\n  const is_emirp = function(n) {\n    const r = parseInt(n.toString().split('').reverse().join(''));\n    return r != n && is_prime(n) && is_prime(r);\n  };\n\n  let i,\n    arr = [];\n  if (typeof num === 'number') {\n    for (i = 0; arr.length < num; i++) if (is_emirp(i)) arr.push(i);\n    // first x emirps\n    if (showEmirps) return arr;\n    // xth emirp\n    return arr.pop();\n  }\n\n  if (Array.isArray(num)) {\n    for (i = num[0]; i <= num[1]; i++) if (is_emirp(i)) arr.push(i);\n    // emirps between x .. y\n    if (showEmirps) return arr;\n    // number of emirps between x .. y\n    return arr.length;\n  }\n}\n"
      ],
      "tests": [
        {
          "text": "<code>emirps</code> is a function.",
          "testString": "assert(typeof emirps === 'function', '<code>emirps</code> is a function.');"
        },
        {
          "text": "<code>emirps(20,true)</code> should return <code>[13,17,31,37,71,73,79,97,107,113,149,157,167,179,199,311,337,347,359,389]</code>",
          "testString": "assert.deepEqual(emirps(20, true), [13, 17, 31, 37, 71, 73, 79, 97, 107, 113, 149, 157, 167, 179, 199, 311, 337, 347, 359, 389], '<code>emirps(20,true)</code> should return <code>[13,17,31,37,71,73,79,97,107,113,149,157,167,179,199,311,337,347,359,389]</code>');"
        },
        {
          "text": "<code>emirps(10000)</code> should return <code>948349</code>",
          "testString": "assert.deepEqual(emirps(10000), 948349, '<code>emirps(10000)</code> should return <code>948349</code>');"
        },
        {
          "text": "<code>emirps([7700,8000],true)</code> should return <code>[7717,7757,7817,7841,7867,7879,7901,7927,7949,7951,7963]</code>",
          "testString": "assert.deepEqual(emirps([7700, 8000], true), [7717, 7757, 7817, 7841, 7867, 7879, 7901, 7927, 7949, 7951, 7963], '<code>emirps([7700,8000],true)</code> should return <code>[7717,7757,7817,7841,7867,7879,7901,7927,7949,7951,7963]</code>');"
        },
        {
          "text": "<code>emirps([7700,8000],true)</code> should return <code>11</code>",
          "testString": "assert.deepEqual(emirps([7700, 8000], false), 11, '<code>emirps([7700,8000],true)</code> should return <code>11</code>');"
        }
      ],
      "id": "599d0ba974141b0f508b37d5",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function emirps(n) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Entropy",
      "description": [
        "Task:",
        "<p>Calculate the Shannon entropy  H  of a given input string.</p><p>Given the discreet random variable $X$ that is a string of $N$ \"symbols\" (total characters) consisting of $n$ different characters (n=2 for binary), the Shannon entropy of X in bits/symbol is :</p>",
        "<p>$H_2(X) = -\\sum_{i=1}^n \\frac{count_i}{N} \\log_2 \\left(\\frac{count_i}{N}\\right)$</p><p>where $count_i$ is the count of character $n_i$.</p>"
      ],
      "solutions": [
        "function entropy(s) {\n\t// Create a dictionary of character frequencies and iterate over it.\n  function process(s, evaluator) {\n    let h = Object.create(null),\n      k;\n    s.split('').forEach(c => {\n      h[c] && h[c]++ || (h[c] = 1); });\n    if (evaluator) for (k in h) evaluator(k, h[k]);\n    return h;\n  }\n\t// Measure the entropy of a string in bits per symbol.\n\n  let sum = 0,\n    len = s.length;\n  process(s, (k, f) => {\n    const p = f / len;\n    sum -= p * Math.log(p) / Math.log(2);\n  });\n  return sum;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>entropy</code> is a function.",
          "testString": "assert(typeof entropy === 'function', '<code>entropy</code> is a function.');"
        },
        {
          "text": "<code>entropy(\"0\")</code> should return <code>0</code>",
          "testString": "assert.equal(entropy('0'), 0, '<code>entropy(\"0\")</code> should return <code>0</code>');"
        },
        {
          "text": "<code>entropy(\"01\")</code> should return <code>1</code>",
          "testString": "assert.equal(entropy('01'), 1, '<code>entropy(\"01\")</code> should return <code>1</code>');"
        },
        {
          "text": "<code>entropy(\"0123\")</code> should return <code>2</code>",
          "testString": "assert.equal(entropy('0123'), 2, '<code>entropy(\"0123\")</code> should return <code>2</code>');"
        },
        {
          "text": "<code>entropy(\"01234567\")</code> should return <code>3</code>",
          "testString": "assert.equal(entropy('01234567'), 3, '<code>entropy(\"01234567\")</code> should return <code>3</code>');"
        },
        {
          "text": "<code>entropy(\"0123456789abcdef\")</code> should return <code>4</code>",
          "testString": "assert.equal(entropy('0123456789abcdef'), 4, '<code>entropy(\"0123456789abcdef\")</code> should return <code>4</code>');"
        },
        {
          "text": "<code>entropy(\"1223334444\")</code> should return <code>1.8464393446710154</code>",
          "testString": "assert.equal(entropy('1223334444'), 1.8464393446710154, '<code>entropy(\"1223334444\")</code> should return <code>1.8464393446710154</code>');"
        }
      ],
      "id": "599d15309e88c813a40baf58",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function entropy (s) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Equilibrium index",
      "description": [
        "<p>An equilibrium index of a sequence is an index into the sequence such that the sum of elements at lower indices is equal to the sum of elements at higher indices.</p>",
        "<p>For example, in a sequence  <big>$A$</big>:</p><p>::::  <big>$A_0 = -7$</big></p>",
        "<p>::::  <big>$A_1 =  1$</big></p>",
        "<p>::::  <big>$A_2 =  5$</big></p>",
        "<p>::::  <big>$A_3 =  2$</big></p>",
        "<p>::::  <big>$A_4 = -4$</big></p>",
        "<p>::::  <big>$A_5 =  3$</big></p>",
        "<p>::::  <big>$A_6 =  0$</big></p><p>3  is an equilibrium index, because:</p><p>::::  <big>$A_0 + A_1 + A_2 = A_4 + A_5 + A_6$</big></p><p>6  is also an equilibrium index, because:</p><p>::::  <big>$A_0 + A_1 + A_2 + A_3 + A_4 + A_5 = 0$</big></p><p>(sum of zero elements is zero)</p><p>7  is not an equilibrium index, because it is not a valid index of sequence <big>$A$</big>.</p>",
        "<p>Write a function that, given a sequence, returns its equilibrium indices (if any).</p><p>Assume that the sequence may be very long.</p>"
      ],
      "solutions": [
        "function equilibrium(a) {\n  let N = a.length,\n    i,\n    l = [],\n    r = [],\n    e = [];\n  for (l[0] = a[0], r[N - 1] = a[N - 1], i = 1; i < N; i++)\n    { l[i] = l[i - 1] + a[i], r[N - i - 1] = r[N - i] + a[N - i - 1]; }\n  for (i = 0; i < N; i++)\n    { if (l[i] === r[i]) e.push(i); }\n  return e;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>equilibrium</code> is a function.",
          "testString": "assert(typeof equilibrium === 'function', '<code>equilibrium</code> is a function.');"
        },
        {
          "text": "<code>equilibrium([-7, 1, 5, 2, -4, 3, 0])</code> should return <code>[3,6]</code>.",
          "testString": "assert.deepEqual(equilibrium(tests[0]), ans[0], '<code>equilibrium([-7, 1, 5, 2, -4, 3, 0])</code> should return <code>[3,6]</code>.');"
        },
        {
          "text": "<code>equilibrium([2, 4, 6])</code> should return <code>[]</code>.",
          "testString": "assert.deepEqual(equilibrium(tests[1]), ans[1], '<code>equilibrium([2, 4, 6])</code> should return <code>[]</code>.');"
        },
        {
          "text": "<code>equilibrium([2, 9, 2])</code> should return <code>[1]</code>.",
          "testString": "assert.deepEqual(equilibrium(tests[2]), ans[2], '<code>equilibrium([2, 9, 2])</code> should return <code>[1]</code>.');"
        },
        {
          "text": "<code>equilibrium([1, -1, 1, -1, 1, -1, 1])</code> should return <code>[0,1,2,3,4,5,6]</code>.",
          "testString": "assert.deepEqual(equilibrium(tests[3]), ans[3], '<code>equilibrium([1, -1, 1, -1, 1, -1, 1])</code> should return <code>[0,1,2,3,4,5,6]</code>.');"
        },
        {
          "text": "<code>equilibrium([1])</code> should return <code>[0]</code>.",
          "testString": "assert.deepEqual(equilibrium(tests[4]), ans[4], '<code>equilibrium([1])</code> should return <code>[0]</code>.');"
        },
        {
          "text": "<code>equilibrium([])</code> should return <code>[]</code>.",
          "testString": "assert.deepEqual(equilibrium(tests[5]), ans[5], '<code>equilibrium([])</code> should return <code>[]</code>.');"
        }
      ],
      "id": "5987fd532b954e0f21b5d3f6",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function equilibrium (a) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const tests =",
            "  [[-7, 1, 5, 2, -4, 3, 0], // 3, 6",
            "  [2, 4, 6], // empty",
            "  [2, 9, 2], // 1",
            "  [1, -1, 1, -1, 1, -1, 1], // 0,1,2,3,4,5,6",
            "  [1], // 0",
            "  [] // empty",
            "  ];",
            "const ans = [[3, 6], [], [1], [0, 1, 2, 3, 4, 5, 6], [0], []];"
          ]
        }
      }
    },
    {
      "title": "Ethiopian multiplication",
      "description": [
        "<p>Ethiopian multiplication is a method of multiplying integers using only addition, doubling, and halving.</p>",
        "<p>Method: </p>",
        "Take two numbers to be multiplied and write them down at the top of two columns.",
        "In the left-hand column repeatedly halve the last number, discarding any remainders, and write the result below the last in the same column, until you write a value of 1.",
        "In the right-hand column repeatedly double the last number and write the result below. stop when you add a result in the same row as where the left hand column shows 1.",
        "Examine the table produced and discard any row where the value in the left column is even.",
        "Sum the values in the right-hand column that remain to produce the result of multiplying the original two numbers together",
        "<p>For example:  17 &times; 34</p>",
        "<p>17    34</p>",
        "<p>Halving the first column:</p>",
        "<p>17    34</p>",
        "<p>8</p>",
        "<p>4</p>",
        "<p>2</p>",
        "<p>1</p>",
        "<p>Doubling the second column:</p>",
        "<p>17    34</p>",
        "<p>8    68</p>",
        "<p>4   136</p>",
        "<p>2   272</p>",
        "<p>1   544</p>",
        "<p>Strike-out rows whose first cell is even:</p>",
        "<p>17    34</p>",
        "<p>8    <strike>68</strike></p>",
        "<p>4   <strike>136</strike></p>",
        "<p>2   <strike>272</strike></p>",
        "<p>1   544</p>",
        "<p>Sum the remaining numbers in the right-hand column:</p>",
        "<p>17    34</p>",
        "<p>8    --</p>",
        "<p>4   ---</p>",
        "<p>2   ---</p>",
        "<p>1   544</p>",
        "<p>====</p>",
        "<p>578</p>",
        "<p>So 17 multiplied by 34, by the Ethiopian method is 578.</p>",
        "Task:",
        "<p>The task is to define three named functions/methods/procedures/subroutines:</p>",
        "one to halve an integer,",
        "one to double an integer, and",
        "one to state if an integer is even.",
        "<p>Use these functions to create a function that does Ethiopian multiplication.</p>"
      ],
      "solutions": [
        "function eth_mult(a, b) {\n  let sum = 0; a = [a]; b = [b];\n\n  let half = a => a / 2,\n    double = a => a * 2,\n    is_even = a => a % 2 == 0;\n\n  while (a[0] !== 1) {\n    a.unshift(Math.floor(half(a[0])));\n    b.unshift(double(b[0]));\n  }\n\n  for (let i = a.length - 1; i > 0; i -= 1) {\n    if (!is_even(a[i])) {\n      sum += b[i];\n    }\n  }\n  return sum + b[0];\n}"
      ],
      "tests": [
        {
          "text": "<code>eth_mult</code> is a function.",
          "testString": "assert(typeof eth_mult === 'function', '<code>eth_mult</code> is a function.');"
        },
        {
          "text": "<code>eth_mult(17,34)</code> should return <code>578</code>.",
          "testString": "assert.equal(eth_mult(17, 34), 578, '<code>eth_mult(17,34)</code> should return <code>578</code>.');"
        },
        {
          "text": "<code>eth_mult(23,46)</code> should return <code>1058</code>.",
          "testString": "assert.equal(eth_mult(23, 46), 1058, '<code>eth_mult(23,46)</code> should return <code>1058</code>.');"
        },
        {
          "text": "<code>eth_mult(12,27)</code> should return <code>324</code>.",
          "testString": "assert.equal(eth_mult(12, 27), 324, '<code>eth_mult(12,27)</code> should return <code>324</code>.');"
        },
        {
          "text": "<code>eth_mult(56,98)</code> should return <code>5488</code>.",
          "testString": "assert.equal(eth_mult(56, 98), 5488, '<code>eth_mult(56,98)</code> should return <code>5488</code>.');"
        },
        {
          "text": "<code>eth_mult(63,74)</code> should return <code>4662</code>.",
          "testString": "assert.equal(eth_mult(63, 74), 4662, '<code>eth_mult(63,74)</code> should return <code>4662</code>.');"
        }
      ],
      "id": "599d1566a02b571412643b84",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function eth_mult (a, b) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Euler method",
      "description": [
        "<p>Euler's method numerically approximates solutions of first-order ordinary differential equations (ODEs) with a given initial value.  It is an explicit method for solving initial value problems (IVPs), as described in <a href=\"https://en.wikipedia.org/wiki/Euler method\" title=\"wp: Euler method\">the wikipedia page</a>.</p><p>The ODE has to be provided in the following form:</p><p>:: <big>$\\frac{dy(t)}{dt} = f(t,y(t))$</big></p><p>with an initial value</p><p>:: <big>$y(t_0) = y_0$</big></p><p>To get a numeric solution, we replace the derivative on the  LHS  with a finite difference approximation:</p><p>:: <big>$\\frac{dy(t)}{dt}  \\approx \\frac{y(t+h)-y(t)}{h}$</big></p><p>then solve for $y(t+h)$:</p><p>:: <big>$y(t+h) \\approx y(t) + h \\, \\frac{dy(t)}{dt}$</big></p><p>which is the same as</p><p>:: <big>$y(t+h) \\approx y(t) + h \\, f(t,y(t))$</big></p><p>The iterative solution rule is then:</p><p>:: <big>$y_{n+1} = y_n + h \\, f(t_n, y_n)$</big></p><p>where  <big>$h$</big>  is the step size, the most relevant parameter for accuracy of the solution.  A smaller step size increases accuracy but also the computation cost, so it has always has to be hand-picked according to the problem at hand.</p>",
        "<p>Example: Newton's Cooling Law</p><p>Newton's cooling law describes how an object of initial temperature  <big>$T(t_0) = T_0$</big>  cools down in an environment of temperature  <big>$T_R$</big>:</p><p>:: <big>$\\frac{dT(t)}{dt} = -k \\, \\Delta T$</big></p>",
        "<p>or</p>",
        "<p>:: <big>$\\frac{dT(t)}{dt} = -k \\, (T(t) - T_R)$</big></p>",
        "<p>It says that the cooling rate  <big>$\\frac{dT(t)}{dt}$</big>  of the object is proportional to the current temperature difference  <big>$\\Delta T = (T(t) - T_R)$</big>  to the surrounding environment.</p><p>The analytical solution, which we will compare to the numerical approximation, is</p>",
        "<p>:: <big>$T(t) = T_R + (T_0 - T_R) \\; e^{-k t}$</big></p>",
        "Task:",
        "<p>Implement a routine of Euler's method and then to use it to solve the given example of Newton's cooling law with it for three different step sizes of:</p>",
        "<p>::*  2 s</p>",
        "<p>::*  5 s    and </p>",
        "<p>::*  10 s </p>",
        "<p>and to compare with the analytical solution.</p>",
        "Initial values:",
        "<p>::*  initial temperature  <big>$T_0$</big>  shall be  100 °C</p>",
        "<p>::*  room temperature  <big>$T_R$</big>  shall be  20 °C</p>",
        "<p>::*  cooling constant   <big>$k$</big>   shall be  0.07  </p>",
        "<p>::*  time interval to calculate shall be from  0 s  ──►  100 s</p>"
      ],
      "solutions": [
        "function eulersMethod(x1, y1, x2, h) {\n  let x = x1;\n  let y = y1;\n\n  while ((x < x2 && x1 < x2) || (x > x2 && x1 > x2)) {\n    y += h * (-0.07 * (y - 20));\n    x += h;\n  }\n\n  return y;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>eulersMethod</code> is a function.",
          "testString": "assert(typeof eulersMethod === 'function', '<code>eulersMethod</code> is a function.');"
        },
        {
          "text": "<code>eulersMethod(0, 100, 100, 10)</code> should return a number.",
          "testString": "assert(typeof eulersMethod(0, 100, 100, 10) === 'number', '<code>eulersMethod(0, 100, 100, 10)</code> should return a number.');"
        },
        {
          "text": "<code>eulersMethod(0, 100, 100, 10)</code> should return 20.0424631833732.",
          "testString": "assert.equal(eulersMethod(0, 100, 100, 2), 20.0424631833732, '<code>eulersMethod(0, 100, 100, 10)</code> should return 20.0424631833732.');"
        },
        {
          "text": "<code>eulersMethod(0, 100, 100, 10)</code> should return 20.01449963666907.",
          "testString": "assert.equal(eulersMethod(0, 100, 100, 5), 20.01449963666907, '<code>eulersMethod(0, 100, 100, 10)</code> should return 20.01449963666907.');"
        },
        {
          "text": "<code>eulersMethod(0, 100, 100, 10)</code> should return 20.000472392.",
          "testString": "assert.equal(eulersMethod(0, 100, 100, 10), 20.000472392, '<code>eulersMethod(0, 100, 100, 10)</code> should return 20.000472392.');"
        }
      ],
      "id": "59880443fb36441083c6c20e",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function eulersMethod (x1, y1, x2, h) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Evaluate binomial coefficients",
      "description": [
        "<p>Write a function to calculate the binomial coefficient for the given value of n and k.</p><p>This formula is recommended:</p>",
        "$\\binom{n}{k} = \\frac{n!}{(n-k)!k!} = \\frac{n(n-1)(n-2)\\ldots(n-k+1)}{k(k-1)(k-2)\\ldots 1}$"
      ],
      "solutions": [
        "function binom(n, k) {\n  let coeff = 1;\n  for (let i = n - k + 1; i <= n; i++) coeff *= i;\n  for (let i = 1; i <= k; i++) coeff /= i;\n  return coeff;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>binom</code> is a function.",
          "testString": "assert(typeof binom === 'function', '<code>binom</code> is a function.');"
        },
        {
          "text": "<code>binom(5,3)</code> should return 10.",
          "testString": "assert.equal(binom(5, 3), 10, '<code>binom(5,3)</code> should return 10.');"
        },
        {
          "text": "<code>binom(7,2)</code> should return 21.",
          "testString": "assert.equal(binom(7, 2), 21, '<code>binom(7,2)</code> should return 21.');"
        },
        {
          "text": "<code>binom(10,4)</code> should return 210.",
          "testString": "assert.equal(binom(10, 4), 210, '<code>binom(10,4)</code> should return 210.');"
        },
        {
          "text": "<code>binom(6,1)</code> should return 6.",
          "testString": "assert.equal(binom(6, 1), 6, '<code>binom(6,1)</code> should return 6.');"
        },
        {
          "text": "<code>binom(12,8)</code> should return 495.",
          "testString": "assert.equal(binom(12, 8), 495, '<code>binom(12,8)</code> should return 495.');"
        }
      ],
      "id": "598de241872ef8353c58a7a2",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function binom (n, k) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Execute a Markov algorithm",
      "description": [
        "Task:",
        "<p>Create an interpreter for a <a href=\"https://en.wikipedia.org/wiki/Markov algorithm\" title=\"wp: Markov algorithm\">Markov Algorithm</a>.</p><p>Rules have the syntax:</p>",
        "<p><ruleset> ::= ((<comment> | <rule>) <newline>+)*</p>",
        "<p><comment> ::= # {<any character>}</p>",
        "<p><rule> ::= <pattern> <whitespace> -> <whitespace> [.] <replacement></p>",
        "<p><whitespace> ::= (<tab> | <space>) [<whitespace>]</p>",
        "<p>There is one rule per line.</p><p>If there is a  <b>.</b>  (period)  present before the  <replacement>,  then this is a terminating rule in which case the interpreter must halt execution.</p><p>A ruleset consists of a sequence of rules, with optional comments.</p>",
        "<p><big><big> Rulesets </big></big></p><p>Use the following tests on entries:</p>",
        "Ruleset 1:",
        "<pre>",
        "This rules file is extracted from Wikipedia:",
        "http://en.wikipedia.org/wiki/Markov_AlgorithmA -> apple",
        "B -> bag",
        "S -> shop",
        "T -> the",
        "the shop -> my brother",
        "a never used -> .terminating rule",
        "</pre>",
        "<p>Sample text of:</p>",
        "<p> <code> I bought a B of As from T S. </code></p>",
        "<p>Should generate the output:</p>",
        "<p> <code> I bought a bag of apples from my brother. </code></p>",
        "Ruleset 2:",
        "<p>A test of the terminating rule</p>",
        "<pre>",
        "Slightly modified from the rules on WikipediaA -> apple",
        "B -> bag",
        "S -> .shop",
        "T -> the",
        "the shop -> my brother",
        "a never used -> .terminating rule</pre>",
        "<p>Sample text of:</p>",
        "<p> <code>I bought a B of As from T S.</code></p>",
        "<p>Should generate:</p>",
        "<p> <code>I bought a bag of apples from T shop.</code></p>",
        "Ruleset 3:",
        "<p>This tests for correct substitution order and may trap simple regexp based replacement routines if special regexp characters are not escaped.</p>",
        "<pre>",
        "BNF Syntax testing rulesA -> apple",
        "WWWW -> with",
        "Bgage -> ->.*",
        "B -> bag",
        "->.* -> money",
        "W -> WW",
        "S -> .shop",
        "T -> the",
        "the shop -> my brother",
        "a never used -> .terminating rule",
        "</pre>",
        "<p>Sample text of:</p>",
        "<p> <code>I bought a B of As W my Bgage from T S.</code></p>",
        "<p>Should generate:</p>",
        "<p> <code>I bought a bag of apples with my money from T shop.</code></p>",
        "Ruleset 4:",
        "<p>This tests for correct order of scanning of rules, and may trap replacement routines that scan in the wrong order.  It implements a general unary multiplication engine.  (Note that the input expression must be placed within underscores in this implementation.)</p>",
        "<pre>",
        "## Unary Multiplication Engine, for testing Markov Algorithm implementations",
        "## By Donal Fellows.",
        "Unary addition engine_+1 -> _1+",
        "1+1 -> 11+",
        "Pass for converting from the splitting of multiplication into ordinary",
        "addition1! -> !1",
        ",! -> !+",
        "_! -> _",
        "Unary multiplication by duplicating left side, right side times1*1 -> x,@y",
        "1x -> xX",
        "X, -> 1,1",
        "X1 -> 1X",
        "_x -> _X",
        ",x -> ,X",
        "y1 -> 1y",
        "y_ -> _",
        "Next phase of applying1@1 -> x,@y",
        "1@_ -> @_",
        ",@_ -> !_",
        "++ -> +",
        "Termination cleanup for addition_1 -> 1",
        "1+_ -> 1",
        "_+_ -> ",
        "</pre>",
        "<p>Sample text of:</p>",
        "<p> <code> _1111*11111_ </code></p>",
        "<p>should generate the output:</p>",
        "<p> <code> 11111111111111111111 </code></p>",
        "Ruleset 5:",
        "<p>A simple <a href=\"http://en.wikipedia.org/wiki/Turing_machine\" title=\"link: http://en.wikipedia.org/wiki/Turing_machine\">Turing machine</a>,</p>",
        "<p>implementing a three-state <a href=\"http://en.wikipedia.org/wiki/Busy_beaver\" title=\"link: http://en.wikipedia.org/wiki/Busy_beaver\">busy beaver</a>.</p><p>The tape consists of 0s and 1s,  the states are A, B, C and H (for Halt), and the head position is indicated by writing the state letter before the character where the head is.</p>",
        "<p>All parts of the initial tape the machine operates on have to be given in the input.</p><p>Besides demonstrating that the Markov algorithm is Turing-complete, it also made me catch a bug in the C++ implementation which wasn't caught by the first four rulesets.</p>",
        "<pre>",
        "Turing machine: three-state busy beaver",
        "# state A, symbol 0 => write 1, move right, new state BA0 -> 1B",
        "state A, symbol 1 => write 1, move left, new state C0A1 -> C01",
        "1A1 -> C11",
        "state B, symbol 0 => write 1, move left, new state A0B0 -> A01",
        "1B0 -> A11",
        "state B, symbol 1 => write 1, move right, new state BB1 -> 1B",
        "state C, symbol 0 => write 1, move left, new state B0C0 -> B01",
        "1C0 -> B11",
        "state C, symbol 1 => write 1, move left, halt0C1 -> H01",
        "1C1 -> H11",
        "</pre>",
        "<p>This ruleset should turn</p>",
        "<p> <code> 000000A000000 </code></p>",
        "<p>into</p>",
        "<p> <code> 00011H1111000 </code></p>"
      ],
      "solutions": [
        "function markov(rules,test) {\n    let pattern = new RegExp(\"^([^#]*?)\\\\s+->\\\\s+(\\\\.?)(.*)\");\n    let origTest = test;\n\n    let captures = [];\n    \n    rules.forEach(function(rule){\n\t\tlet m = pattern.exec(rule);\n\t\tfor (let j = 0; j < m.length; j++)\n\t\t    m[j] = m[j + 1];\n\t\tcaptures.push(m);\n    });\n\n    test = origTest;\n    let copy = test;\n    for (let j = 0; j < captures.length; j++) {\n        let c = captures[j];\n        test = test.replace(c[0], c[2]);\n        if (c[1]==\".\")\n            break;\n        if (test!=copy) {\n            j = -1;\n            copy = test;\n        }\n    }\n    return test;\n}\n\n// tail:\nlet rules=[[\"A -> apple\",\"B -> bag\",\"S -> shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\n\t\t\t[\"A -> apple\",\"B -> bag\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\n\t\t\t[\"A -> apple\",\"WWWW -> with\",\"Bgage -> ->.*\",\"B -> bag\",\"->.* -> money\",\"W -> WW\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\n\t\t\t[\"_+1 -> _1+\",\"1+1 -> 11+\",\"1! -> !1\",\",! -> !+\",\"_! -> _\",\"1*1 -> x,@y\",\"1x -> xX\",\"X, -> 1,1\",\"X1 -> 1X\",\"_x -> _X\",\",x -> ,X\",\"y1 -> 1y\",\"y_ -> _\",\"1@1 -> x,@y\",\"1@_ -> @_\",\",@_ -> !_\",\"++ -> +\",\"_1 -> 1\",\"1+_ -> 1\",\"_+_ -> \"],\n\t\t\t[\"A0 -> 1B\",\"0A1 -> C01\",\"1A1 -> C11\",\"0B0 -> A01\",\"1B0 -> A11\",\"B1 -> 1B\",\"0C0 -> B01\",\"1C0 -> B11\",\"0C1 -> H01\",\"1C1 -> H11\"]];\nlet tests=[\"I bought a B of As from T S.\",\n\t\t\t\"I bought a B of As from T S.\",\n\t\t\t\"I bought a B of As W my Bgage from T S.\",\n\t\t\t\"_1111*11111_\",\n\t\t\t\"000000A000000\"];\nlet outputs=[\"I bought a bag of apples from my brother.\",\n\t\t\t\"I bought a bag of apples from T shop.\",\n\t\t\t\"I bought a bag of apples with my money from T shop.\",\n\t\t\t\"11111111111111111111\",\n\t\t\t\"00011H1111000\"];"
      ],
      "tests": [
        {
          "text": "<code>markov</code> is a function.",
          "testString": "assert(typeof markov === 'function', '<code>markov</code> is a function.');"
        },
        {
          "text": "<code>markov([\"A -> apple\",\"B -> bag\",\"S -> shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return \"I bought a bag of apples from my brother.\".",
          "testString": "assert.deepEqual(markov(rules[0],tests[0]),outputs[0],'<code>markov([\"A -> apple\",\"B -> bag\",\"S -> shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return \"I bought a bag of apples from my brother.\".');"
        },
        {
          "text": "<code>markov([\"A -> apple\",\"B -> bag\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return \"I bought a bag of apples from T shop.\".",
          "testString": "assert.deepEqual(markov(rules[1],tests[1]),outputs[1],'<code>markov([\"A -> apple\",\"B -> bag\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return \"I bought a bag of apples from T shop.\".');"
        },
        {
          "text": "<code>markov([\"A -> apple\",\"WWWW -> with\",\"Bgage -> ->.*\",\"B -> bag\",\"->.* -> money\",\"W -> WW\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As W my Bgage from T S.\")</code> should return \"I bought a bag of apples with my money from T shop.\".",
          "testString": "assert.deepEqual(markov(rules[2],tests[2]),outputs[2],'<code>markov([\"A -> apple\",\"WWWW -> with\",\"Bgage -> ->.*\",\"B -> bag\",\"->.* -> money\",\"W -> WW\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As W my Bgage from T S.\")</code> should return \"I bought a bag of apples with my money from T shop.\".');"
        },
        {
          "text": "<code>markov([\"_+1 -> _1+\",\"1+1 -> 11+\",\"1! -> !1\",\",! -> !+\",\"_! -> _\",\"1*1 -> x,@y\",\"1x -> xX\",\"X, -> 1,1\",\"X1 -> 1X\",\"_x -> _X\",\",x -> ,X\",\"y1 -> 1y\",\"y_ -> _\",\"1@1 -> x,@y\",\"1@_ -> @_\",\",@_ -> !_\",\"++ -> +\",\"_1 -> 1\",\"1+_ -> 1\",\"_+_ -> \"],\"_1111*11111_\")</code> should return \"11111111111111111111\".",
          "testString": "assert.deepEqual(markov(rules[3],tests[3]),outputs[3],'<code>markov([\"_+1 -> _1+\",\"1+1 -> 11+\",\"1! -> !1\",\",! -> !+\",\"_! -> _\",\"1*1 -> x,@y\",\"1x -> xX\",\"X, -> 1,1\",\"X1 -> 1X\",\"_x -> _X\",\",x -> ,X\",\"y1 -> 1y\",\"y_ -> _\",\"1@1 -> x,@y\",\"1@_ -> @_\",\",@_ -> !_\",\"++ -> +\",\"_1 -> 1\",\"1+_ -> 1\",\"_+_ -> \"],\"_1111*11111_\")</code> should return \"11111111111111111111\".');"
        },
        {
          "text": "<code>markov([\"A0 -> 1B\",\"0A1 -> C01\",\"1A1 -> C11\",\"0B0 -> A01\",\"1B0 -> A11\",\"B1 -> 1B\",\"0C0 -> B01\",\"1C0 -> B11\",\"0C1 -> H01\",\"1C1 -> H11\"],\"\")</code> should return \"00011H1111000\".",
          "testString": "assert.deepEqual(markov(rules[4],tests[4]),outputs[4],'<code>markov([\"A0 -> 1B\",\"0A1 -> C01\",\"1A1 -> C11\",\"0B0 -> A01\",\"1B0 -> A11\",\"B1 -> 1B\",\"0C0 -> B01\",\"1C0 -> B11\",\"0C1 -> H01\",\"1C1 -> H11\"],\"\")</code> should return \"00011H1111000\".');"
        }
      ],
      "id": "59e09e6d412c5939baa02d16",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function markov (rules,test) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Execute Brain****",
      "description": [
        "<p>Write a function to implement a Brain**** interpreter. The function will take a string as a parameter and should return a string as the output. More details are given below : </p>",
        "<p>RCBF is a set of <a href=\"http://rosettacode.org/wiki/Brainf***\" title=\"Brainf***\">Brainf***</a> compilers and interpreters written for Rosetta Code in a variety of languages.</p><p>Below are links to each of the versions of RCBF.</p><p>An implementation need only properly implement the following instructions:</p>",
        "<p>{|</p>",
        "<p>!Command</p>",
        "<p>!Description</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>&gt;</code> || Move the pointer to the right</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>&lt;</code> || Move the pointer to the left</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>+</code> || Increment the memory cell under the pointer</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>-</code> || Decrement the memory cell under the pointer</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>.</code> || Output the character signified by the cell at the pointer</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>,</code> || Input a character and store it in the cell at the pointer</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>[</code> || Jump past the matching <code>]</code> if the cell under the pointer is 0</p>",
        "<p>|-</p>",
        "<p>| style=\"text-align:center\"| <code>]</code> || Jump back to the matching <code>[</code> if the cell under the pointer is nonzero</p>",
        "<p>|}</p>",
        "<p>Any cell size is allowed,  EOF   (<u>E</u>nd-<u>O</u>-<u>F</u>ile)  support is optional, as is whether you have bounded or unbounded memory.</p>",
        ""
      ],
      "solutions": [
        "function brain(prog){\n  var output=\"\";\n\tvar code; // formatted code\n  var ip = 0; // current instruction within code\n  var nest = 0; // current bracket nesting (for Out button)\n  var ahead = []; // locations of matching brackets\n\n  var data = [0]; // data array (mod by +, -)\n  var dp = 0; // index into data (mod by <, >)\n\n  var inp = 0; // current input character (fetch with ,)\n  var quit = 0;\n\tvar commands = {\n\t'>':function() { if (++dp >= data.length) data[dp]=0 },\n\t'<':function() { if (--dp < 0) quit++ },\n\t'+':function() { ++data[dp] },\n\t'-':function() { --data[dp] },\n\t'[':function() { if (!data[dp]) ip = ahead[ip]; else ++nest },\n\t']':function() { if ( data[dp]) ip = ahead[ip]; else --nest },\n\t',':function() {\n\t\tvar c = document.getElementById(\"input\").value.charCodeAt(inp++);\n\t\tdata[dp] = isNaN(c) ? 0 : c; // EOF: other options are -1 or no change\n\t},\n\t'.':function() {\n    \t\toutput+=String.fromCharCode(data[dp]);\n    \t\t/*var s = document.getElementById(\"output\").innerHTML)\n    \t\t + String.fromCharCode(data[dp]);\n    \t\ts = s.replace(/\\n/g,\"<br>\").replace(/ /g,\"&amp;nbsp;\");\n    \t\tdocument.getElementById(\"output\").innerHTML = s;*/\n    \t},\n    };\n\n\tlet ar=prog.split('');\n\tvar st = [], back, error = -1;\n\tfor (ip=0; ip<ar.length; ip++) {\n\t\tswitch(ar[ip]) {\n\t\tcase '[':\n\t\t\tst.push(ip);\n\t\t\tbreak;\n\t\tcase ']':\n\t\t\tif (st.length == 0) error = ip;\n\t\t\tback = st.pop();\n\t\t\tahead[ip] = back;\n\t\t\tahead[back] = ip;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor(ip=0;ip<ar.length;ip++){\n    if(commands.hasOwnProperty(ar[ip]))\n\t\t  commands[ar[ip]]();\n\t}\n\n\treturn output;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>brain(bye)</code> should retuen a string",
          "testString": "assert(typeof brain(bye) === 'string', '<code>brain(bye)</code> should return a string');"
        },
        {
          "text": "<code>brain(\"++++++[>++++++++++<-]>+++++.\")</code should return \"A\"",
          "testString": "assert.equal(brain(\"++++++[>++++++++++<-]>+++++.\"),\"A\", '<code>brain(\"++++++[>++++++++++<-]>+++++.\")</code should return \"A\"');"
        },
        {
          "text": "<code>brain(bye)</code> should return <code>Goodbye, World!\\\\r\\\\n</code>",
          "testString": "assert.equal(brain(bye), 'Goodbye, World!\\r\\n', '<code>brain(bye)</code> should return <code>Goodbye, World!\\\\r\\\\n</code>');"
        },
        {
          "text": "<code>brain(hello)</code> should return <code>Hello World!\\\\n</code>'",
          "testString": "assert.equal(brain(hello), \"Hello World!\\n\", '<code>brain(hello)</code> should return <code>Hello World!\\\\n</code>');"
        },
        {
          "text": "<code>brain(fib)</code> should return <code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code>",
          "testString": "assert.equal(brain(fib), \"1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89\", '<code>brain(fib)</code> should return <code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code>');"
        }
      ],
      "id": "59e0a8df964e4540d5abe599",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function brain (prog) {",
            "  // Good luck!",
            "}"
          ],
          "head": [
            "let fib=`+\n\n++\n\n+++\n\n++++\n\n+>+>>\n\n>>++++\n\n+++++++\n\n++++++++\n\n+++++++++\n\n++++++++++\n\n++++++>++++\n\n++++++++++++\n\n+++++++++++++\n\n+++<<<<<<[>[>>\n\n>>>>+>+<<<<<<<-\n\n]>>>>>>>[<<<<<<<\n\n+>>>>>>>-]<[>++++\n\n++++++[-<-[>>+>+<<\n\n<-]>>>[<<<+>>>-]+<[\n\n>[-]<[-]]>[<<[>>>+<<\n\n<-]>>[-]]<<]>>>[>>+>+\n\n<<<-]>>>[<<<+>>>-]+<[>\n\n[-]<[-]]>[<<+>>[-]]<<<<\n\n<<<]>>>>>[++++++++++++++\n\n+++++++++++++++++++++++++\n\n+++++++++.[-]]++++++++++<[\n\n->-<]>+++++++++++++++++++++\n\n+++++++++++++++++++++++++++.\n\n[-]<<<<<<<<<<<<[>>>+>+<<<<-]>\n\n>>>[<<<<+>>>>-]<-[>>.>.<<<[-]]\n\n<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+\n\n>-]>[<+>-]<<<-]`;",
            "let hello='++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.'",
            "let bye='++++++++++[>+>+++>++++>+++++++>++++++++>+++++++++>++++++++++>+++++++++++>++++++++++++<<<<<<<<<-]>>>>+.>>>>+..<.<++++++++.>>>+.<<+.<<<<++++.<++.>>>+++++++.>>>.+++.<+++++++.--------.<<<<<+.<+++.---.';"
          ],
          "tail": []
        }
      }
    },
    {
      "title": "Extensible prime generator",
      "description": [
        "<p>Write a generator of prime numbers, in order, that will automatically adjust to accommodate the generation of any reasonably high prime.</p> The generator should be able to : Show the first <b>n</b> prime numbers.Show the prime numbers in a range.Show the number of primes in a range.Show the <b>n<sup>th</sup></b> prime number.<p>The function should have two parameters. The first will receive <b>n</b> or the range as an array. The second will receive a boolean, that specifies if the function returns the prime numbers as an array or a single number(the number of primes in the range or the <b>n<sup>th</sup></b> prime). According to the parameters the function should return an array."
      ],
      "solutions": [
        "// noprotect\nfunction primeGenerator(num, showPrimes) {\n  let i,\n    arr = [];\n\n  function isPrime(num) {\n    // try primes <= 16\n    if (num <= 16) { return (\n      num == 2 || num == 3 || num == 5 || num == 7 || num == 11 || num == 13\n    ); }\n    // cull multiples of 2, 3, 5 or 7\n    if (num % 2 == 0 || num % 3 == 0 || num % 5 == 0 || num % 7 == 0)\n      { return false; }\n    // cull square numbers ending in 1, 3, 7 or 9\n    for (let i = 10; i * i <= num; i += 10) {\n      if (num % (i + 1) == 0) return false;\n      if (num % (i + 3) == 0) return false;\n      if (num % (i + 7) == 0) return false;\n      if (num % (i + 9) == 0) return false;\n    }\n    return true;\n  }\n\n  if (typeof num === 'number') {\n    for (i = 0; arr.length < num; i++) if (isPrime(i)) arr.push(i);\n    // first x primes\n    if (showPrimes) return arr;\n    // xth prime\n    return arr.pop();\n  }\n\n  if (Array.isArray(num)) {\n    for (i = num[0]; i <= num[1]; i++) if (isPrime(i)) arr.push(i);\n    // primes between x .. y\n    if (showPrimes) return arr;\n    // number of primes between x .. y\n    return arr.length;\n  }\n}\n"
      ],
      "tests": [
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString": "assert(typeof primeGenerator === 'function', '<code>primeGenerator</code> is a function.');"
        },
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString": "assert.deepEqual(primeGenerator(20, true), [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71], '<code>primeGenerator</code> is a function.');"
        },
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString": "assert.deepEqual(primeGenerator([100, 150], true), [101, 103, 107, 109, 113, 127, 131, 137, 139, 149], '<code>primeGenerator</code> is a function.');"
        },
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString": "assert.equal(primeGenerator([7700, 8000], false), 30, '<code>primeGenerator</code> is a function.');"
        },
        {
          "text": "<code>primeGenerator</code> is a function.",
          "testString": "assert.equal(primeGenerator(10000, false), 104729, '<code>primeGenerator</code> is a function.');"
        }
      ],
      "id": "598ee8b91b410510ae82efef",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function primeGenerator (num, showPrimes) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Factorial",
      "description": [
        "<p>Write a function to return the factorial of a number.</p>",
        "<p>Factorial of a number is given by : </p>",
        "n! = n * (n-1) * (n-2) * ..... * 1",
        "<p>",
        "For example :",
        "3! = 3*2*1 = 6",
        "4! = 4*3*2*1 = 24",
        "</p>",
        "<p>Note : ",
        "0! = 1 ",
        "</p>"
      ],
      "solutions": [
        "function factorial(n) {\n  let sum = 1;\n  while (n > 1) {\n    sum *= n;\n    n--;\n  }\n  return sum;\n}\n\n"
      ],
      "tests": [
        {
          "text": "<code>factorial</code> is a function.",
          "testString": "assert(typeof factorial === 'function', '<code>factorial</code> is a function.');"
        },
        {
          "text": "<code>factorial(2)</code> should return a number.",
          "testString": "assert(typeof factorial(2) === 'number', '<code>factorial(2)</code> should return a number.');"
        },
        {
          "text": "<code>factorial(3)</code> should return 6.\")",
          "testString": "assert.equal(factorial(3),results[0],\"<code>factorial(3)</code> should return 6.\");"
        },
        {
          "text": "<code>factorial(3)</code> should return 120.\")",
          "testString": "assert.equal(factorial(5),results[1],\"<code>factorial(3)</code> should return 120.\");"
        },
        {
          "text": "<code>factorial(3)</code> should return 3,628,800.\")",
          "testString": "assert.equal(factorial(10),results[2],\"<code>factorial(3)</code> should return 3,628,800.\");"
        }
      ],
      "id": "597b2b2a2702b44414742771",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function factorial (n) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const results=[6,120,3628800];"
          ]
        }
      }
    },
    {
      "title": "Factors of a Mersenne number",
      "description": [
        "<p>A Mersenne number is a number in the form of 2<sup>P</sup>-1.</p><p>If P is prime, the Mersenne number may be a Mersenne prime</p>",
        "<p>(if P is not prime, the Mersenne number is also not prime).</p><p>In the search for Mersenne prime numbers it is advantageous to eliminate exponents by finding a small factor before starting a,  potentially lengthy, <a href=\"http://rosettacode.org/wiki/Lucas-Lehmer test\" title=\"Lucas-Lehmer test\">Lucas-Lehmer test</a>.</p><p>There are very efficient algorithms for determining if a number divides 2<sup>P</sup>-1 (or equivalently, if 2<sup>P</sup> mod (the number) = 1).</p>",
        "<p>Some languages already have built-in implementations of this exponent-and-mod operation (called modPow or similar).</p><p>The following is how to implement this modPow yourself:</p><p>For example, let's compute 2<sup>23</sup> mod 47.</p>",
        "<p>Convert the exponent 23 to binary, you get 10111. Starting with <tt>square</tt> = 1, repeatedly square it.</p>",
        "<p>Remove the top bit of the exponent, and if it's 1 multiply <tt>square</tt> by the base of the exponentiation (2), then compute <tt>square</tt> modulo 47.</p>",
        "<p>Use the result of the modulo from the last step as the initial value of <tt>square</tt> in the next step:</p><p>Remove   Optional</p>",
        "<p>square        top bit  multiply by 2  mod 47</p>",
        "<p>------------  -------  -------------  ------</p>",
        "<p>1*1 = 1       1  0111  1*2 = 2           2</p>",
        "<p>2*2 = 4       0   111     no             4</p>",
        "<p>4*4 = 16      1    11  16*2 = 32        32</p>",
        "<p>32*32 = 1024  1     1  1024*2 = 2048    27</p>",
        "<p>27*27 = 729   1        729*2 = 1458      1</p><p>Since 2<sup>23</sup> mod 47 = 1, 47 is a factor of 2<sup>P</sup>-1.</p>",
        "<p>(To see this, subtract 1 from both sides: 2<sup>23</sup>-1 = 0 mod 47.)</p>",
        "<p>Since we've shown that 47 is a factor, 2<sup>23</sup>-1 is not prime.</p>",
        "<p>Further properties of Mersenne numbers allow us to refine the process even more.</p>",
        "<p>Any factor q of 2<sup>P</sup>-1 must be of the form 2kP+1, k being a positive integer or zero. Furthermore, q must be 1 or 7 mod 8.</p>",
        "<p>Finally any potential factor q must be <a href=\"http://rosettacode.org/wiki/Primality by Trial Division\" title=\"Primality by Trial Division\">prime</a>.</p>",
        "<p>As in other trial division algorithms, the algorithm stops when 2kP+1 > sqrt(N).</p><p>These primality tests only work on Mersenne numbers where P is prime. For example, M<sub>4</sub>=15 yields no factors using these techniques, but factors into 3 and 5, neither of which fit 2kP+1.</p>",
        "Task:",
        "<p>Using the above method find a factor of  2<sup>929</sup>-1 (aka M929)</p>",
        "Related tasks:",
        " <a href=\"http://rosettacode.org/wiki/count in factors\" title=\"count in factors\">count in factors</a>",
        " <a href=\"http://rosettacode.org/wiki/prime decomposition\" title=\"prime decomposition\">prime decomposition</a>",
        " <a href=\"http://rosettacode.org/wiki/factors of an integer\" title=\"factors of an integer\">factors of an integer</a>",
        " <a href=\"http://rosettacode.org/wiki/Sieve of Eratosthenes\" title=\"Sieve of Eratosthenes\">Sieve of Eratosthenes</a>",
        " <a href=\"http://rosettacode.org/wiki/primality by trial division\" title=\"primality by trial division\">primality by trial division</a>",
        " <a href=\"http://rosettacode.org/wiki/trial factoring of a Mersenne number\" title=\"trial factoring of a Mersenne number\">trial factoring of a Mersenne number</a>",
        " <a href=\"http://rosettacode.org/wiki/partition an integer X into N primes\" title=\"partition an integer X into N primes\">partition an integer X into N primes</a>",
        " <a href=\"http://rosettacode.org/wiki/sequence of primes by Trial Division\" title=\"sequence of primes by Trial Division\">sequence of primes by Trial Division</a>",
        " <a href=\"https://www.youtube.com/watch?v=SNwvJ7psoow\" title=\"link: https://www.youtube.com/watch?v=SNwvJ7psoow\">Computers in 1948: 2¹²⁷-1</a>"
      ],
      "solutions": [
        "function check_mersenne(p){  \n\tfunction isPrime(value){\n\t  for (let i=2; i < value; i++){\n\t\tif (value % i == 0){\n\t\t  return false;\n\t\t}\n\t\tif (value % i != 0){\n\t\t  return true;\n\t\t }\n\t  }\n\t}\n\t\n\tfunction trial_factor(base, exp, mod){\n\t  let square, bits;\n\t  square = 1;\n\t  bits = exp.toString(2).split('');\n\t  for (let i=0,ln=bits.length; i<ln; i++){\n\t\tsquare = Math.pow(square, 2) * (bits[i] == 1 ? base : 1) % mod;\n\t  }\n\t  return (square == 1);\n\t}\n\t\n\tfunction mersenne_factor(p){\n\t  let limit, k, q;\n\t  limit = Math.sqrt(Math.pow(2,p) - 1);\n\t  k = 1;\n\t  while ((2*k*p - 1) < limit){\n\t\tq = 2*k*p + 1;\n\t\tif (isPrime(q) && (q % 8 == 1 || q % 8 == 7) && trial_factor(2,p,q)){\n\t\t  return q; // q is a factor of 2**p-1\n\t\t}\n\t\tk++;\n\t  }\n\t  return null;\n\t}\n  let f, result;\n  result=\"M\"+p+\" = 2^\"+p+\"-1 is \";\n  f = mersenne_factor(p);\n  result+=f == null ? \"prime\" : \"composite with factor \"+f;\n  return result;\n}\n\n"
      ],
      "tests": [
        {
          "text": "<code>check_mersenne</code> is a function.",
          "testString": "assert(typeof check_mersenne === 'function', '<code>check_mersenne</code> is a function.');"
        },
        {
          "text": "<code>check_mersenne(3)</code> should return a string.",
          "testString": "assert(typeof check_mersenne(3) == 'string', '<code>check_mersenne(3)</code> should return a string.');"
        },
        {
          "text": "<code>check_mersenne(3)</code> should return \"M3 = 2^3-1 is prime\".",
          "testString": "assert.equal(check_mersenne(3),\"M3 = 2^3-1 is prime\",'<code>check_mersenne(3)</code> should return \"M3 = 2^3-1 is prime\".');"
        },
        {
          "text": "<code>check_mersenne(23)</code> should return \"M23 = 2^23-1 is composite with factor 47\".",
          "testString": "assert.equal(check_mersenne(23),\"M23 = 2^23-1 is composite with factor 47\",'<code>check_mersenne(23)</code> should return \"M23 = 2^23-1 is composite with factor 47\".');"
        },
        {
          "text": "<code>check_mersenne(929)</code> should return \"M929 = 2^929-1 is composite with factor 13007",
          "testString": "assert.equal(check_mersenne(929),\"M929 = 2^929-1 is composite with factor 13007\",'<code>check_mersenne(929)</code> should return \"M929 = 2^929-1 is composite with factor 13007');"
        }
      ],
      "id": "598eea87e5cf4b116c3ff81a",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function check_mersenne (p) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Factors of an integer",
      "description": [
        "<p>Write a function that returns the factors  of a positive integer.</p><p>These factors are the positive integers by which the number being factored can be divided to yield a positive integer result.</p>",
        "///"
      ],
      "solutions": [
        "function factors(num)\n{\n let n_factors = [], i, sqr=Math.floor(Math.sqrt(num));\n\n for (i = 1; i <=sqr ; i += 1)\n  if (num % i === 0)\n  {\n   n_factors.push(i);\n   if (num / i !== i)\n    n_factors.push(num / i);\n  }\n n_factors.sort(function(a, b){return a - b;});\n return n_factors;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>factors</code> is a function.",
          "testString": "assert(typeof factors === 'function', '<code>factors</code> is a function.');"
        },
        {
          "text": "<code>factors(45)</code> should return <code>[1,3,5,9,15,45]</code>.",
          "testString": "assert.deepEqual(factors(45), ans[0], '<code>factors(45)</code> should return <code>[1,3,5,9,15,45]</code>.');"
        },
        {
          "text": "<code>factors(53)</code> should return <code>[1,53]</code>.",
          "testString": "assert.deepEqual(factors(53), ans[1], '<code>factors(53)</code> should return <code>[1,53]</code>.');"
        },
        {
          "text": "<code>factors(64)</code> should return <code>[1,2,4,8,16,32,64]</code>.",
          "testString": "assert.deepEqual(factors(64), ans[2], '<code>factors(64)</code> should return <code>[1,2,4,8,16,32,64]</code>.');"
        }
      ],
      "id": "597f1e7fbc206f0e9ba95dc4",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function factors (num) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const ans=[[1,3,5,9,15,45],[1,53],[1,2,4,8,16,32,64]];"
          ]
        }
      }
    },
    {
      "title": "Farey sequence",
      "description": [
        "<p>Write a function that returns the Farey sequence of order n. The function should have one parameter that is n. It should return the sequence as an array. Read the following for more details : </p><p>The  <a href=\"https://en.wikipedia.org/wiki/Farey sequence\" title=\"wp: Farey sequence\">Farey sequence</a>   F<sub>n</sub>  of order  n  is the sequence of completely reduced fractions between  0  and  1  which, when in lowest terms, have denominators less than or equal to  n,  arranged in order of increasing size.</p><p>The  Farey sequence  is sometimes incorrectly called a  Farey series.</p>",
        "<p>Each Farey sequence:</p>",
        "<p>::*  starts with the value  0,  denoted by the fraction  $ \\frac{0}{1} $</p>",
        "<p>::*  ends with the value  1,  denoted by the fraction  $ \\frac{1}{1}$.</p>",
        "<p>The Farey sequences of orders  1  to  5  are:</p><p>${\\bf\\it{F}}_1 = \\frac{0}{1}, \\frac{1}{1}$</p>",
        "<p></p>",
        "<p>${\\bf\\it{F}}_2 = \\frac{0}{1}, \\frac{1}{2}, \\frac{1}{1}$</p>",
        "<p></p>",
        "<p>${\\bf\\it{F}}_3 = \\frac{0}{1}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{1}{1}$</p>",
        "<p></p>",
        "<p>${\\bf\\it{F}}_4 = \\frac{0}{1}, \\frac{1}{4}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{3}{4}, \\frac{1}{1}$</p>",
        "<p></p>",
        "<p>${\\bf\\it{F}}_5 = \\frac{0}{1}, \\frac{1}{5}, \\frac{1}{4}, \\frac{1}{3}, \\frac{2}{5}, \\frac{1}{2}, \\frac{3}{5}, \\frac{2}{3}, \\frac{3}{4}, \\frac{4}{5}, \\frac{1}{1}$</p>"
      ],
      "solutions": [
        "function farey(n){\n\tlet farSeq=[];\n\tfor(let den = 1; den <= n; den++){\n\t\tfor(let num = 1; num < den; num++){\n\t\t\tfarSeq.push({\n\t\t\t\tstr:num+\"/\"+den,\n\t\t\t\tval:num/den});\n\t\t}\n\t}\n\tfarSeq.sort(function(a,b){\n\t\treturn a.val-b.val;\n\t});\n\tfarSeq=farSeq.map(function(a){\n\t\treturn a.str;\n\t});\n\treturn farSeq;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>farey</code> is a function.",
          "testString": "assert(typeof farey === 'function', '<code>farey</code> is a function.');"
        },
        {
          "text": "<code>farey(3)</code> should return an array",
          "testString": "assert(Array.isArray(farey(3)), '<code>farey(3)</code> should return an array');"
        },
        {
          "text": "<code>farey(3)</code> should return <code>[\"1/3\",\"1/2\",\"2/3\"]</code>",
          "testString": "assert.deepEqual(farey(3), [\"1/3\",\"1/2\",\"2/3\"], '<code>farey(3)</code> should return <code>[\"1/3\",\"1/2\",\"2/3\"]</code>');"
        },
        {
          "text": "<code>farey(4)</code> should return <code>[\"1/4\",\"1/3\",\"1/2\",\"2/4\",\"2/3\",\"3/4\"]</code>",
          "testString": "assert.deepEqual(farey(4), [\"1/4\",\"1/3\",\"1/2\",\"2/4\",\"2/3\",\"3/4\"], '<code>farey(4)</code> should return <code>[\"1/4\",\"1/3\",\"1/2\",\"2/4\",\"2/3\",\"3/4\"]</code>');"
        },
        {
          "text": "<code>farey(5)</code> should return <code>[\"1/5\",\"1/4\",\"1/3\",\"2/5\",\"1/2\",\"2/4\",\"3/5\",\"2/3\",\"3/4\",\"4/5\"]</code>",
          "testString": "assert.deepEqual(farey(5), [\"1/5\",\"1/4\",\"1/3\",\"2/5\",\"1/2\",\"2/4\",\"3/5\",\"2/3\",\"3/4\",\"4/5\"], '<code>farey(5)</code> should return <code>[\"1/5\",\"1/4\",\"1/3\",\"2/5\",\"1/2\",\"2/4\",\"3/5\",\"2/3\",\"3/4\",\"4/5\"]</code>');"
        }
      ],
      "id": "59c3ec9f15068017c96eb8a3",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function farey (n) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Fibonacci n-step number sequences",
      "description": [
        "<p>Write a function to generate Fibonacci n-step number sequences and Lucas sequences. The first parameter will be n. The second parameter will be the number of elements to be returned. The third parameter will specify whether to output the Fibonacci sequence or the Lucas sequence. If the parameter is \"f\" then return the Fibonacci sequence and if it is \"l\", then return the Lucas sequence. The sequences must be returned as an array. More details are given below : </p><p>These number series are an expansion of the ordinary <a href=\"http://rosettacode.org/wiki/Fibonacci sequence\" title=\"Fibonacci sequence\">Fibonacci sequence</a> where:</p>",
        "For $n = 2$ we have the Fibonacci sequence; with initial values $[1, 1]$ and $F_k^2 = F_{k-1}^2 + F_{k-2}^2$",
        "For $n = 3$ we have the tribonacci sequence; with initial values $[1, 1, 2]$ and $F_k^3 = F_{k-1}^3 + F_{k-2}^3 + F_{k-3}^3$",
        "For $n = 4$ we have the tetranacci sequence; with initial values $[1, 1, 2, 4]$ and $F_k^4 = F_{k-1}^4 + F_{k-2}^4 + F_{k-3}^4 + F_{k-4}^4$...",
        "For general $n>2$ we have the Fibonacci $n$-step sequence - $F_k^n$; with initial values of the first $n$ values of the $(n-1)$'th Fibonacci $n$-step sequence $F_k^{n-1}$; and $k$'th value of this $n$'th sequence being $F_k^n = \\sum_{i=1}^{(n)} {F_{k-i}^{(n)}}$",
        "<p>For small values of $n$, <a href=\"https://en.wikipedia.org/wiki/Number prefix#Greek_series\" title=\"wp: Number prefix#Greek_series\">Greek numeric prefixes</a> are sometimes used to individually name each series.</p><p>{| style=\"text-align: left;\" border=\"4\" cellpadding=\"2\" cellspacing=\"2\"</p>",
        "<p>|+ Fibonacci $n$-step sequences</p>",
        "<p>|- style=\"background-color: rgb(255, 204, 255);\"</p>",
        "<p>! $n$ !! Series name !! Values</p>",
        "<p>|-</p>",
        "<p>|  2 ||  fibonacci || 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 ...</p>",
        "<p>|-</p>",
        "<p>|  3 || tribonacci || 1 1 2 4 7 13 24 44 81 149 274 504 927 1705 3136 ...</p>",
        "<p>|-</p>",
        "<p>|  4 || tetranacci || 1 1 2 4 8 15 29 56 108 208 401 773 1490 2872 5536 ...</p>",
        "<p>|-</p>",
        "<p>|  5 || pentanacci || 1 1 2 4 8 16 31 61 120 236 464 912 1793 3525 6930 ...</p>",
        "<p>|-</p>",
        "<p>|  6 ||  hexanacci || 1 1 2 4 8 16 32 63 125 248 492 976 1936 3840 7617 ...</p>",
        "<p>|-</p>",
        "<p>|  7 || heptanacci || 1 1 2 4 8 16 32 64 127 253 504 1004 2000 3984 7936 ...</p>",
        "<p>|-</p>",
        "<p>|  8 ||  octonacci || 1 1 2 4 8 16 32 64 128 255 509 1016 2028 4048 8080 ...</p>",
        "<p>|-</p>",
        "<p>|  9 ||  nonanacci || 1 1 2 4 8 16 32 64 128 256 511 1021 2040 4076 8144 ...</p>",
        "<p>|-</p>",
        "<p>| 10 ||  decanacci || 1 1 2 4 8 16 32 64 128 256 512 1023 2045 4088 8172 ...</p>",
        "<p>|}</p><p>Allied sequences can be generated where the initial values are changed:</p>",
        "<p> The <a href=\"https://en.wikipedia.org/wiki/Lucas number\" title=\"wp: Lucas number\">Lucas series</a> sums the two preceding values like the fibonacci series for $n=2$ but uses $[2, 1]$ as its initial values.</p><p><!-- Lucas numbers, Lucas number, Lucas series     [added to make searches easier.] --></p>"
      ],
      "solutions": [
        "function fib_luc(n, len, w) {\n\tfunction nacci(a, n, len) {\n\t\twhile (a.length < len) {\n\t\t    let sum = 0;\n\t\t    for (let i = Math.max(0, a.length - n); i < a.length; i++)\n\t\t        sum += a[i];\n\t\t    a.push(sum);\n\t\t}\n\t\treturn a;\n\t}\n\tif(w==\"f\"){\n    \treturn nacci(nacci([1,1], n, n), n, len);\n\t}else{\n    \treturn nacci(nacci([2,1], n, n), n, len);\n\t}\n}\n"
      ],
      "tests": [
        {
          "text": "<code>fib_luc</code> is a function.",
          "testString": "assert(typeof fib_luc === 'function', '<code>fib_luc</code> is a function.');"
        },
        {
          "text": "<code>fib_luc(2,10,\"f\")</code> should return <code>[1,1,2,3,5,8,13,21,34,55]</code>.",
          "testString": "assert.deepEqual(fib_luc(2,10,\"f\"),ans[0],'<code>fib_luc(2,10,\"f\")</code> should return <code>[1,1,2,3,5,8,13,21,34,55]</code>.');"
        },
        {
          "text": "<code>fib_luc(3,15,\"f\")</code> should return <code>[1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136]</code>.",
          "testString": "assert.deepEqual(fib_luc(3,15,\"f\"),ans[1],'<code>fib_luc(3,15,\"f\")</code> should return <code>[1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136]</code>.');"
        },
        {
          "text": "<code>fib_luc(4,15,\"f\")</code> should return <code>[1,1,2,4,8,15,29,56,108,208,401,773,1490,2872,5536]</code>.",
          "testString": "assert.deepEqual(fib_luc(4,15,\"f\"),ans[2],'<code>fib_luc(4,15,\"f\")</code> should return <code>[1,1,2,4,8,15,29,56,108,208,401,773,1490,2872,5536]</code>.');"
        },
        {
          "text": "<code>fib_luc(2,10,\"l\")</code> should return <code>[ 2, 1, 3, 4, 7, 11, 18, 29, 47, 76]</code>.",
          "testString": "assert.deepEqual(fib_luc(2,10,\"l\"),ans[3],'<code>fib_luc(2,10,\"l\")</code> should return <code>[ 2, 1, 3, 4, 7, 11, 18, 29, 47, 76]</code>.');"
        },
        {
          "text": "<code>fib_luc(3,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 10, 19, 35, 64, 118, 217, 399, 734, 1350, 2483, 4567 ]</code>.",
          "testString": "assert.deepEqual(fib_luc(3,15,\"l\"),ans[4],'<code>fib_luc(3,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 10, 19, 35, 64, 118, 217, 399, 734, 1350, 2483, 4567 ]</code>.');"
        },
        {
          "text": "<code>fib_luc(4,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 12, 22, 43, 83, 160, 308, 594, 1145, 2207, 4254, 8200 ]</code>.",
          "testString": "assert.deepEqual(fib_luc(4,15,\"l\"),ans[5],'<code>fib_luc(4,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 12, 22, 43, 83, 160, 308, 594, 1145, 2207, 4254, 8200 ]</code>.');"
        },
        {
          "text": "<code>fib_luc(5,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 12, 24, 46, 91, 179, 352, 692, 1360, 2674, 5257, 10335 ]</code>.",
          "testString": "assert.deepEqual(fib_luc(5,15,\"l\"),ans[6],'<code>fib_luc(5,15,\"l\")</code> should return <code>[ 2, 1, 3, 6, 12, 24, 46, 91, 179, 352, 692, 1360, 2674, 5257, 10335 ]</code>.');"
        }
      ],
      "id": "598eef80ba501f1268170e1e",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function fib_luc (n, len, w) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const ans = [[1,1,2,3,5,8,13,21,34,55],",
            "[1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136],",
            "[1,1,2,4,8,15,29,56,108,208,401,773,1490,2872,5536],",
            "[ 2, 1, 3, 4, 7, 11, 18, 29, 47, 76],",
            "[ 2, 1, 3, 6, 10, 19, 35, 64, 118, 217, 399, 734, 1350, 2483, 4567 ],",
            "[ 2, 1, 3, 6, 12, 22, 43, 83, 160, 308, 594, 1145, 2207, 4254, 8200 ],",
            "[ 2, 1, 3, 6, 12, 24, 46, 91, 179, 352, 692, 1360, 2674, 5257, 10335 ]];"
          ]
        }
      }
    },
    {
      "title": "Fibonacci sequence",
      "description": [
        "<p>Write a function to generate the  <big> n<sup>th</sup> </big>  Fibonacci number.</p>",
        "///<p>The <big> n<sup>th</sup> </big>  Fibonacci number is given by :",
        "///<p>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub></p>",
        "///<p>The first two terms of the series are 0, 1.</p>",
        "///<p>Hence, the series is : 0, 1, 1, 2, 3, 5, 8, 13...</p>",
        "///"
      ],
      "solutions": [
        "function fibonacci(n) {\n  let a = 0, b = 1, t;\n  while (--n > 0) {\n    t = a;\n    a = b;\n    b += t;\n  }\n  return a;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>fibonacci</code> is a function.",
          "testString": "assert(typeof fibonacci === 'function', '<code>fibonacci</code> is a function.');"
        },
        {
          "text": "<code>fibonacci(2)</code> should return a number.",
          "testString": "assert(typeof fibonacci(2) == 'number', '<code>fibonacci(2)</code> should return a number.');"
        },
        {
          "text": "<code>fibonacci(3)</code> should return 1.\")",
          "testString": "assert.equal(fibonacci(3),1,\"<code>fibonacci(3)</code> should return 1.\");"
        },
        {
          "text": "<code>fibonacci(5)</code> should return 3.\")",
          "testString": "assert.equal(fibonacci(5),3,\"<code>fibonacci(5)</code> should return 3.\");"
        },
        {
          "text": "<code>fibonacci(10)</code> should return 34.\")",
          "testString": "assert.equal(fibonacci(10),34,\"<code>fibonacci(10)</code> should return 34.\");"
        }
      ],
      "id": "597f24c1dda4e70f53c79c81",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function fibonacci(n) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Fibonacci word",
      "description": [
        "<p>Write a function to return the Fibonacci Words upto N. N will be provided as a parameter to the function. The function should return an array of objects. The objects should be of the form : { N: 1, Length: 1, Entropy: 0, Word: '1' }. More details are given below : </p><p>The  Fibonacci Word  may be created in a manner analogous to the  Fibonacci Sequence   <a href=\"http://hal.archives-ouvertes.fr/docs/00/36/79/72/PDF/The_Fibonacci_word_fractal.pdf\" title=\"link: http://hal.archives-ouvertes.fr/docs/00/36/79/72/PDF/The_Fibonacci_word_fractal.pdf\">as described here</a>:</p><p>Define  F_Word<sub>1</sub>  as  1</p>",
        "<p>Define  F_Word<sub>2</sub>  as  0</p>",
        "<p>Form   F_Word<sub>3</sub>  as  F_Word<sub>2</sub>   concatenated with  F_Word<sub>1</sub>   i.e.:  01</p>",
        "<p>Form   F_Word<sub>n</sub>  as  F_Word<sub>n-1</sub>  concatenated with  F_word<sub>n-2</sub></p>"
      ],
      "solutions": [
        "function fibWord(n) {\n    function entropy(s) {\n         //create an object containing each individual char\n      //and the amount of iterations per char \n        function prob(s) {\n            var h = Object.create(null);\n            s.split('').forEach(function(c) {\n               h[c] && h[c]++ || (h[c] = 1); \n            });\n            return h;\n        }\n\n        s = s.toString(); //just in case \n        var e = 0, l = s.length, h = prob(s);\n\n        for (var i in h ) {\n            var p = h[i]/l;\n            e -= p * Math.log(p) / Math.log(2);\n        }\n        return e;\n    }\n    var wOne = \"1\", wTwo = \"0\", wNth = [wOne, wTwo], w = \"\", o = [];\n \n    for (var i = 0; i < n; i++) {\n        if (i === 0 || i === 1) {\n            w = wNth[i];\n        } else {\n            w = wNth[i - 1] + wNth[i - 2];\n            wNth.push(w);\n        }\n        var l = w.length;\n        var e = entropy(w);\n \n        if (l <= 21) {\n        \to.push({\n            \tN: i + 1,\n            \tLength: l,\n            \tEntropy: e,\n            \tWord: w\n        \t});\n        } else {\n        \to.push({\n            \tN: i + 1,\n            \tLength: l,\n            \tEntropy: e,\n            \tWord: \"...\"\n        \t});\n        }            \n    }\n  return o;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>fibWord</code> is a function.",
          "testString": "assert(typeof fibWord === 'function', '<code>fibWord</code> is a function.');"
        },
        {
          "text": "<code>fibWord(5)</code> should return an array.",
          "testString": "assert(Array.isArray(fibWord(5)),'<code>fibWord(5)</code> should return an array.');"
        },
        {
          "text": "<code>fibWord(5)</code> should return <code>'+JSON.stringify(ans)+'</code>.",
          "testString": "assert.deepEqual(fibWord(5),ans,'<code>fibWord(5)</code> should return <code>'+JSON.stringify(ans)+'</code>.');"
        }
      ],
      "id": "5992e222d397f00d21122931",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function fibWord (n) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "let ans=[ { N: 1, Length: 1, Entropy: 0, Word: '1' },",
            "",
            "  { N: 2, Length: 1, Entropy: 0, Word: '0' },",
            "",
            "  { N: 3, Length: 2, Entropy: 1, Word: '01' },",
            "",
            "  { N: 4, Length: 3, Entropy: 0.9182958340544896, Word: '010' },",
            "",
            "  { N: 5, Length: 5, Entropy: 0.9709505944546688, Word: '01001' }];"
          ]
        }
      }
    },
    {
      "title": "Fractran",
      "description": [
        "<div class=\"rosetta\"><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--bold\"><a class=\"rosetta__link--wiki\" href=\"https://en.wikipedia.org/wiki/FRACTRAN\" title=\"wp: FRACTRAN\">FRACTRAN</a></span> is a Turing-complete esoteric programming language invented by the mathematician <a class=\"rosetta__link--wiki\" href=\"https://en.wikipedia.org/wiki/John Horton Conway\" title=\"wp: John Horton Conway\">John Horton Conway</a>.</p><br/><p class=\"rosetta__paragraph\">A FRACTRAN program is an ordered list of positive fractions $P = (f_1, f_2, \\ldots, f_m)$, together with an initial positive integer input $n$.</p>",
        "<br/><p class=\"rosetta__paragraph\">The program is run by updating the integer $n$ as follows:</p><br/><ul class=\"rosetta__unordered-list\"><li class=\"rosetta__list-item--unordered\">for the first fraction, $f_i$, in the list for which $nf_i$ is an integer, replace $n$ with $nf_i$ ;</li>",
        "<li class=\"rosetta__list-item--unordered\">repeat this rule until no fraction in the list produces an integer when multiplied by $n$, then halt.</li></ul>",
        "<br>",
        "<p class=\"rosetta__paragraph\">Conway gave a program for primes in FRACTRAN:</p><br/><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--indented\"> $17/91$, $78/85$, $19/51$, $23/38$, $29/33$, $77/29$, $95/23$, $77/19$, $1/17$, $11/13$, $13/11$, $15/14$, $15/2$, $55/1$</span></p><br/><p class=\"rosetta__paragraph\">Starting with $n=2$, this FRACTRAN program will change $n$ to $15=2\\times (15/2)$, then $825=15\\times (55/1)$, generating the following sequence of integers:</p><br/><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--indented\"> $2$, $15$, $825$, $725$, $1925$, $2275$, $425$, $390$, $330$, $290$, $770$, $\\ldots$</span></p><br/><p class=\"rosetta__paragraph\">After 2, this sequence contains the following powers of 2:</p><br/><p class=\"rosetta__paragraph\"><span class=\"rosetta__text--indented\">$2^2=4$, $2^3=8$, $2^5=32$, $2^7=128$, $2^{11}=2048$, $2^{13}=8192$, $2^{17}=131072$, $2^{19}=524288$, $\\ldots$</span></p><br/><p class=\"rosetta__paragraph\">which are the prime powers of 2.</p>",
        "<br/><dl class=\"rosetta__description-list\"><dt class=\"rosetta__description-title\">Task:</dt></dl>",
        "<p class=\"rosetta__paragraph\">Write a function that takes a fractran program as a string parameter and returns the first 10 numbers of the program as an array. If the result does not have 10 numbers then return the numbers as is.</p></div>"
      ],
      "solutions": [
        "function fractran(progStr){\n  var num = new Array();\n  var den = new Array();\n  var val ;\n  var out=\"\";\n  function compile(prog){\n    var regex = /\\s*(\\d*)\\s*\\/\\s*(\\d*)\\s*(.*)/m;\n    while(regex.test(prog)){\n      num.push(regex.exec(prog)[1]);\n      den.push(regex.exec(prog)[2]);\n      prog = regex.exec(prog)[3];\n    }\n  }\n\n  function step(val){\n    var i=0;\n    while(i<den.length && val%den[i] != 0) i++;\n    return num[i]*val/den[i];\n  }\n\n  var seq=[]\n\n  function exec(val){\n    var i = 0;\n    while(val && i<limit){\n      seq.push(val)\n      val = step(val);\n      i ++;\n    }\n  }\n\n  // Main\n  compile(progStr);\n  var limit = 10;\n  exec(2);\n  return seq;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>fractran</code> should be a function.",
          "testString": "assert(typeof fractran=='function','<code>fractran</code> should be a function.');"
        },
        {
          "text": "<code>fractran(\"'+tests[0]+'\")</code> should return an array.",
          "testString": "assert(Array.isArray(fractran(tests[0])),'<code>fractran(\"'+tests[0]+'\")</code> should return an array.');"
        },
        {
          "text": "<code>fractran(\"'+tests[0]+'\")</code> should return <code>'+JSON.stringify(results[0])+'</code>.",
          "testString": "assert.deepEqual(fractran(tests[0]),results[0],'<code>fractran(\"'+tests[0]+'\")</code> should return <code>'+JSON.stringify(results[0])+'</code>.');"
        },
        {
          "text": "<code>fractran(\"'+tests[1]+'\")</code> should return <code>'+JSON.stringify(results[1])+'</code>.",
          "testString": "assert.deepEqual(fractran(tests[1]),results[1],'<code>fractran(\"'+tests[1]+'\")</code> should return <code>'+JSON.stringify(results[1])+'</code>.');"
        },
        {
          "text": "<code>fractran(\"'+tests[2]+'\")</code> should return <code>'+JSON.stringify(results[2])+'</code>.",
          "testString": "assert.deepEqual(fractran(tests[2]),results[2],'<code>fractran(\"'+tests[2]+'\")</code> should return <code>'+JSON.stringify(results[2])+'</code>.');"
        },
        {
          "text": "<code>fractran(\"'+tests[3]+'\")</code> should return <code>'+JSON.stringify(results[3])+'</code>.",
          "testString": "assert.deepEqual(fractran(tests[3]),results[3],'<code>fractran(\"'+tests[3]+'\")</code> should return <code>'+JSON.stringify(results[3])+'</code>.');"
        },
        {
          "text": "<code>fractran(\"'+tests[4]+'\")</code> should return <code>'+JSON.stringify(results[4])+'</code>.",
          "testString": "assert.deepEqual(fractran(tests[4]),results[4],'<code>fractran(\"'+tests[4]+'\")</code> should return <code>'+JSON.stringify(results[4])+'</code>.');"
        }
      ],
      "id": "5a7dad05be01840e1778a0d1",
      "challengeType": 3,
      "releasedOn": "May 31, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function fractran (progStr) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "let tests=[",
            "  '3/2,1/3',",
            "  '3/2,5/3,1/5',",
            "  '3/2,6/3',",
            "  '2/7,7/2',",
            "  '17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1'",
            "]",
            "let results=[",
            "  [ 2, 3, 1 ],",
            "  [ 2, 3, 5, 1 ],",
            "  [ 2, 3, 6, 9, 18, 27, 54, 81, 162, 243 ],",
            "  [ 2, 7, 2, 7, 2, 7, 2, 7, 2, 7 ],",
            "  [ 2, 15, 825, 725, 1925, 2275, 425, 390, 330, 290 ]",
            "]"
          ]
        }
      }
    },
    {
      "title": "Gamma function",
      "description": [
        "Implement one algorithm (or more) to compute the <a href=\"https://en.wikipedia.org/wiki/Gamma function\">Gamma</a> ($\\Gamma$) function (in the real field only).",
        "The Gamma function can be defined as:",
        "<div style='padding-left: 4em;'><big><big>$\\Gamma(x) = \\displaystyle\\int_0^\\infty t^{x-1}e^{-t} dt$</big></big></div>"
      ],
      "solutions": [
        "function gamma(x) {\n  var p = [0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n  771.32342877765313, -176.61502916214059, 12.507343278686905,\n  -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7\n  ];\n   \n  var g = 7;\n  if (x < 0.5) {\n    return Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n  }\n\n  x -= 1;\n  var a = p[0];\n  var t = x + g + 0.5;\n  for (var i = 1; i < p.length; i++) {\n  a += p[i] / (x + i);\n  }\n   \n  var result=Math.sqrt(2 * Math.PI) * Math.pow(t, x + 0.5) * Math.exp(-t) * a;\n\n  return result;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>gamma</code> should be a function.",
          "testString": "assert(typeof gamma=='function','<code>gamma</code> should be a function.')"
        },
        {
          "text": "<code>gamma('+tests[0]+')</code> should return a number.",
          "testString": "assert(typeof gamma(tests[0])=='number','<code>gamma('+tests[0]+')</code> should return a number.')"
        },
        {
          "text": "<code>gamma('+tests[0]+')</code> should return <code>'+results[0]+'</code>.",
          "testString": "assert.equal(gamma(tests[0]),results[0],'<code>gamma('+tests[0]+')</code> should return <code>'+results[0]+'</code>.')"
        },
        {
          "text": "<code>gamma('+tests[1]+')</code> should return <code>'+results[1]+'</code>.",
          "testString": "assert.equal(gamma(tests[1]),results[1],'<code>gamma('+tests[1]+')</code> should return <code>'+results[1]+'</code>.')"
        },
        {
          "text": "<code>gamma('+tests[2]+')</code> should return <code>'+results[2]+'</code>.",
          "testString": "assert.equal(gamma(tests[2]),results[2],'<code>gamma('+tests[2]+')</code> should return <code>'+results[2]+'</code>.')"
        },
        {
          "text": "<code>gamma('+tests[3]+')</code> should return <code>'+results[3]+'</code>.",
          "testString": "assert.equal(gamma(tests[3]),results[3],'<code>gamma('+tests[3]+')</code> should return <code>'+results[3]+'</code>.')"
        },
        {
          "text": "<code>gamma('+tests[4]+')</code> should return <code>'+results[4]+'</code>.",
          "testString": "assert.equal(gamma(tests[4]),results[4],'<code>gamma('+tests[4]+')</code> should return <code>'+results[4]+'</code>.')"
        }
      ],
      "id": "5a23c84252665b21eecc7e76",
      "challengeType": 5,
      "releasedOn": "June 1, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function gamma (x) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "let tests=[.1,.2,.3,.4,.5];",
            "let results=[",
            "  9.513507698668736,",
            "  4.590843711998803,",
            "  2.9915689876875904,",
            "  2.218159543757687,",
            "  1.7724538509055159",
            "];"
          ]
        }
      }
    },
    {
      "title": "Gaussian elimination",
      "description": [
        "Write a function to solve \\(A.x = b\\) using Gaussian elimination then backwards substitution. \\(A\\) being an \\(n \\times n\\) matrix. Also, \\(x\\) and \\(b\\) are \\(n\\) by 1 vectors. To improve accuracy, please use partial pivoting and scaling."
      ],
      "solutions": [
        "function gaussianElimination(A, b) {\n  // Lower Upper Decomposition\n  function ludcmp(A) {\n  \t// A is a matrix that we want to decompose into Lower and Upper matrices.\n  \tvar d = true\n  \tvar n = A.length\n  \tvar idx = new Array(n) // Output vector with row permutations from partial pivoting\n  \tvar vv = new Array(n) // Scaling information\n   \n  \tfor (var i=0; i<n; i++) {\n  \t\tvar max = 0\n  \t\tfor (var j=0; j<n; j++) {\n  \t\t\tvar temp = Math.abs(A[i][j])\n  \t\t\tif (temp > max) max = temp\n  \t\t}\n  \t\tif (max == 0) return // Singular Matrix!\n  \t\tvv[i] = 1 / max // Scaling\n  \t}\n   \n\t\tvar Acpy = new Array(n)\n\t\tfor (var i=0; i<n; i++) {\n\t\t\tvar Ai = A[i]\n\t\t\tlet Acpyi = new Array(Ai.length)\n\t\t\tfor (j=0; j<Ai.length; j+=1) Acpyi[j] = Ai[j]\n\t\t\tAcpy[i] = Acpyi\n\t\t}\n\t\tA = Acpy\n   \n  \tvar tiny = 1e-20 // in case pivot element is zero\n  \tfor (var i=0; ; i++) {\n  \t\tfor (var j=0; j<i; j++) {\n  \t\t\tvar sum = A[j][i]\n  \t\t\tfor (var k=0; k<j; k++) sum -= A[j][k] * A[k][i];\n  \t\t\tA[j][i] = sum\n  \t\t}\n  \t\tvar jmax = 0\n  \t\tvar max = 0;\n  \t\tfor (var j=i; j<n; j++) {\n  \t\t\tvar sum = A[j][i]\n  \t\t\tfor (var k=0; k<i; k++) sum -= A[j][k] * A[k][i];\n  \t\t\tA[j][i] = sum\n  \t\t\tvar temp = vv[j] * Math.abs(sum)\n  \t\t\tif (temp >= max) {\n  \t\t\t\tmax = temp\n  \t\t\t\tjmax = j\n  \t\t\t}\n  \t\t}\n  \t\tif (i <= jmax) {\n  \t\t\tfor (var j=0; j<n; j++) {\n  \t\t\t\tvar temp = A[jmax][j]\n  \t\t\t\tA[jmax][j] = A[i][j]\n  \t\t\t\tA[i][j] = temp\n  \t\t\t}\n  \t\t\td = !d;\n  \t\t\tvv[jmax] = vv[i]\n  \t\t}\n  \t\tidx[i] = jmax;\n  \t\tif (i == n-1) break;\n  \t\tvar temp = A[i][i]\n  \t\tif (temp == 0) A[i][i] = temp = tiny\n  \t\ttemp = 1 / temp\n  \t\tfor (var j=i+1; j<n; j++) A[j][i] *= temp\n  \t}\n  \treturn {A:A, idx:idx, d:d}\n  }\n   \n  // Lower Upper Back Substitution\n  function lubksb(lu, b) {\n  \t// solves the set of n linear equations A*x = b.\n  \t// lu is the object containing A, idx and d as determined by the routine ludcmp.\n  \tvar A = lu.A\n  \tvar idx = lu.idx\n  \tvar n = idx.length\n\n\t\tvar bcpy = new Array(n)\n\t\tfor (var i=0; i<b.length; i+=1) bcpy[i] = b[i]\n\t\tb = bcpy\n   \n  \tfor (var ii=-1, i=0; i<n; i++) {\n  \t\tvar ix = idx[i]\n  \t\tvar sum = b[ix]\n  \t\tb[ix] = b[i]\n  \t\tif (ii > -1)\n  \t\t\tfor (var j=ii; j<i; j++) sum -= A[i][j] * b[j]\n  \t\telse if (sum)\n  \t\t\tii = i\n  \t\tb[i] = sum\n  \t}\n  \tfor (var i=n-1; i>=0; i--) {\n  \t\tvar sum = b[i]\n  \t\tfor (var j=i+1; j<n; j++) sum -= A[i][j] * b[j]\n  \t\tb[i] = sum / A[i][i]\n  \t}\n  \treturn b // solution vector x\n  }\n\n\tvar lu = ludcmp(A)\n\tif (lu === undefined) return // Singular Matrix!\n\treturn lubksb(lu, b)\n}\n\n\n"
      ],
      "tests": [
        {
          "text": "'<code>gaussianElimination</code> should be a function.'",
          "testString": "assert(typeof gaussianElimination=='function','<code>gaussianElimination</code> should be a function.');"
        },
        {
          "text": "'<code>gaussianElimination('+JSON.stringify(tests[0][0])+','+JSON.stringify(tests[0][1])+')</code> should return an array.'",
          "testString": "assert(Array.isArray(gaussianElimination(tests[0][0],tests[0][1])),'<code>gaussianElimination('+JSON.stringify(tests[0][0])+','+JSON.stringify(tests[0][1])+')</code> should return an array.');"
        },
        {
          "text": "'<code>gaussianElimination('+JSON.stringify(tests[0][0])+','+JSON.stringify(tests[0][1])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.'",
          "testString": "assert.deepEqual(gaussianElimination(tests[0][0],tests[0][1]),results[0],'<code>gaussianElimination('+JSON.stringify(tests[0][0])+','+JSON.stringify(tests[0][1])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.');"
        },
        {
          "text": "'<code>gaussianElimination('+JSON.stringify(tests[1][0])+','+JSON.stringify(tests[1][1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.'",
          "testString": "assert.deepEqual(gaussianElimination(tests[1][0],tests[1][1]),results[1],'<code>gaussianElimination('+JSON.stringify(tests[1][0])+','+JSON.stringify(tests[1][1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.');"
        },
        {
          "text": "'<code>gaussianElimination('+JSON.stringify(tests[2][0])+','+JSON.stringify(tests[2][1])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.'",
          "testString": "assert.deepEqual(gaussianElimination(tests[2][0],tests[2][1]),results[2],'<code>gaussianElimination('+JSON.stringify(tests[2][0])+','+JSON.stringify(tests[2][1])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.');"
        },
        {
          "text": "'<code>gaussianElimination('+JSON.stringify(tests[3][0])+','+JSON.stringify(tests[3][1])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.'",
          "testString": "assert.deepEqual(gaussianElimination(tests[3][0],tests[3][1]),results[3],'<code>gaussianElimination('+JSON.stringify(tests[3][0])+','+JSON.stringify(tests[3][1])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.');"
        },
        {
          "text": "'<code>gaussianElimination('+JSON.stringify(tests[4][0])+','+JSON.stringify(tests[4][1])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.'",
          "testString": "assert.deepEqual(gaussianElimination(tests[4][0],tests[4][1]),results[4],'<code>gaussianElimination('+JSON.stringify(tests[4][0])+','+JSON.stringify(tests[4][1])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.');"
        }
      ],
      "id": "5a23c84252665b21eecc7e77",
      "challengeType": 5,
      "releasedOn": "June 2, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function gaussianElimination (A,b) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "let tests=[",
            "  [ [[1,1],[1,-1]] , [5,1] ],",
            "  [ [[2,3],[2,1]] , [8,4] ],",
            "  [ [[1,3],[5,-2]] , [14,19] ],",
            "  [ [[1,1],[5,-1]] , [10,14] ],",
            "  [ [[1,2,3],[4,5,6],[7,8,8]] , [6,15,23] ]",
            "];",
            "let results=[",
            "  [ 3, 2 ],",
            "  [ 1, 2 ],",
            "  [ 5, 3 ],",
            "  [ 4, 6 ],",
            "  [ 1, 1, 1 ]",
            "]"
          ]
        }
      }
    },
    {
      "title": "General FizzBuzz",
"description": [
        "Write a generalized version of <a href=\"http://rosettacode.org/wiki/FizzBuzz\">FizzBuzz</a> that works for any list of factors, along with their words.",
        "This is basically a \"fizzbuzz\" implementation where the rules of the game are supplied to the user. Create a function to implement this. The function should take two parameters.",
        "The first will be an array with the FizzBuzz rules. For example: <code>[ [3,\"Fizz\"] , [5,\"Buzz\"] ]</code>.",
        "This indcates that <code>Fizz</code> should be printed if the number is a multiple of 3 and <code>Buzz</code> if it is a multiple of 5. If it is a multiple of both then the strings should be concatenated in the order specified in the array. In this case, <code>FizzBuzz</code> if the number is a multiple of 3 and 5.",
        "The second parameter is the number for which the function should return a string as stated above."
      ],
      "solutions": [
        "function genFizzBuzz(rules, num) {\n  let res='';\n  rules.forEach(function (e) {\n    if(num % e[0] == 0)\n      res+=e[1];\n  })\n\n  if(res==''){\n    res=num.toString();\n  }\n\n  return res;\n}\n\n\n\n"
      ],
      "tests": [
        {
          "text": "'<code>genFizzBuzz</code> should be a function.'",
          "testString": "assert(typeof genFizzBuzz=='function','<code>genFizzBuzz</code> should be a function.');"
        },
        {
          "text": "'<code>genFizzBuzz('+JSON.stringify(tests[0][0])+','+tests[0][1]+')</code> should return a type.'",
          "testString": "assert(typeof genFizzBuzz(tests[0][0],tests[0][1])=='string','<code>genFizzBuzz('+JSON.stringify(tests[0][0])+','+tests[0][1]+')</code> should return a type.');"
        },
        {
          "text": "'<code>genFizzBuzz('+JSON.stringify(tests[0][0])+','+tests[0][1]+')</code> should return <code>\"'+results[0]+'\"</code>.'",
          "testString": "assert.equal(genFizzBuzz(tests[0][0],tests[0][1]),results[0],'<code>genFizzBuzz('+JSON.stringify(tests[0][0])+','+tests[0][1]+')</code> should return <code>\"'+results[0]+'\"</code>.');"
        },
        {
          "text": "'<code>genFizzBuzz('+JSON.stringify(tests[1][0])+','+tests[1][1]+')</code> should return <code>\"'+results[1]+'\"</code>.'",
          "testString": "assert.equal(genFizzBuzz(tests[1][0],tests[1][1]),results[1],'<code>genFizzBuzz('+JSON.stringify(tests[1][0])+','+tests[1][1]+')</code> should return <code>\"'+results[1]+'\"</code>.');"
        },
        {
          "text": "'<code>genFizzBuzz('+JSON.stringify(tests[2][0])+','+tests[2][1]+')</code> should return <code>\"'+results[2]+'\"</code>.'",
          "testString": "assert.equal(genFizzBuzz(tests[2][0],tests[2][1]),results[2],'<code>genFizzBuzz('+JSON.stringify(tests[2][0])+','+tests[2][1]+')</code> should return <code>\"'+results[2]+'\"</code>.');"
        },
        {
          "text": "'<code>genFizzBuzz('+JSON.stringify(tests[3][0])+','+tests[3][1]+')</code> should return <code>\"'+results[3]+'\"</code>.'",
          "testString": "assert.equal(genFizzBuzz(tests[3][0],tests[3][1]),results[3],'<code>genFizzBuzz('+JSON.stringify(tests[3][0])+','+tests[3][1]+')</code> should return <code>\"'+results[3]+'\"</code>.');"
        },
        {
          "text": "'<code>genFizzBuzz('+JSON.stringify(tests[4][0])+','+tests[4][1]+')</code> should return <code>\"'+results[4]+'\"</code>.'",
          "testString": "assert.equal(genFizzBuzz(tests[4][0],tests[4][1]),results[4],'<code>genFizzBuzz('+JSON.stringify(tests[4][0])+','+tests[4][1]+')</code> should return <code>\"'+results[4]+'\"</code>.');"
        },
        {
          "text": "'<code>genFizzBuzz('+JSON.stringify(tests[5][0])+','+tests[5][1]+')</code> should return <code>\"'+results[5]+'\"</code>.'",
          "testString": "assert.equal(genFizzBuzz(tests[5][0],tests[5][1]),results[5],'<code>genFizzBuzz('+JSON.stringify(tests[5][0])+','+tests[5][1]+')</code> should return <code>\"'+results[5]+'\"</code>.');"
        },
        {
          "text": "'<code>genFizzBuzz('+JSON.stringify(tests[6][0])+','+tests[6][1]+')</code> should return <code>\"'+results[6]+'\"</code>.'",
          "testString": "assert.equal(genFizzBuzz(tests[6][0],tests[6][1]),results[6],'<code>genFizzBuzz('+JSON.stringify(tests[6][0])+','+tests[6][1]+')</code> should return <code>\"'+results[6]+'\"</code>.');"
        }
      ],
      "id": "5a23c84252665b21eecc7e78",
      "challengeType": 5,
      "releasedOn": "June 2, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function genFizzBuzz (rules, num) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "let tests=[",
            "  [ [[3, 'Fizz'],[5, 'Buzz']], 6 ],",
            "  [ [[3, 'Fizz'],[5, 'Buzz']], 10 ],",
            "  [ [[3, 'Buzz'],[5, 'Fizz']], 12 ],",
            "  [ [[3, 'Buzz'],[5, 'Fizz']], 13 ],",
            "  [ [[3, 'Buzz'],[5, 'Fizz']], 15 ],",
            "  [ [[3, 'Fizz'],[5, 'Buzz']], 15 ],",
            "  [ [[3, 'Fizz'],[5, 'Buzz'],[7, 'Baxx']], 105 ],",
            "]",
            "let results=[",
            "  \"Fizz\",",
            "  \"Buzz\",",
            "  \"Buzz\",",
            "  \"13\",",
            "  \"BuzzFizz\",",
            "  \"FizzBuzz\",",
            "  \"FizzBuzzBaxx\"",
            "]"
          ]
        }
      }
    },
    {
      "title": "Generate lower case ASCII alphabet",
      "description": [
        "Write a function to generate an array of lower case ASCII characters, for a given range. For example: for range 1 to 4 the function should return <code>['a','b','c','d']</code>."
      ],
      "solutions": [
        "function lascii(cFrom, cTo) {\n\n  function cRange(cFrom, cTo) {\n    var iStart = cFrom.charCodeAt(0);\n\n    return Array.apply(\n      null, Array(cTo.charCodeAt(0) - iStart + 1)\n    ).map(function (_, i) {\n\n      return String.fromCharCode(iStart + i);\n\n    });\n  }\n\n  return cRange(cFrom, cTo);\n\n}\n"
      ],
      "tests": [
        {
          "text": "'<code>lascii</code> should be a function.'",
          "testString": "assert(typeof lascii=='function','<code>lascii</code> should be a function.');"
        },
        {
          "text": "'<code>lascii(\"a\",\"d\")</code> should return an array.'",
          "testString": "assert(Array.isArray(lascii('a','d')),'<code>lascii(\"a\",\"d\")</code> should return an array.');"
        },
        {
          "text": "\"<code>lascii('a','d')</code> should return <code>[ 'a', 'b', 'c', 'd' ]</code>.\"",
          "testString": "assert.deepEqual(lascii(\"a\",\"d\"),results[0],\"<code>lascii('a','d')</code> should return <code>[ 'a', 'b', 'c', 'd' ]</code>.\");"
        },
        {
          "text": "\"<code>lascii('c','i')</code> should return <code>[ 'c', 'd', 'e', 'f', 'g', 'h', 'i' ]</code>.\"",
          "testString": "assert.deepEqual(lascii(\"c\",\"i\"),results[1],\"<code>lascii('c','i')</code> should return <code>[ 'c', 'd', 'e', 'f', 'g', 'h', 'i' ]</code>.\");"
        },
        {
          "text": "\"<code>lascii('m','q')</code> should return <code>[ 'm', 'n', 'o', 'p', 'q' ]</code>.\"",
          "testString": "assert.deepEqual(lascii(\"m\",\"q\"),results[2],\"<code>lascii('m','q')</code> should return <code>[ 'm', 'n', 'o', 'p', 'q' ]</code>.\");"
        },
        {
          "text": "\"<code>lascii('k','n')</code> should return <code>[ 'k', 'l', 'm', 'n' ]</code>.\")",
          "testString": "assert.deepEqual(lascii(\"k\",\"n\"),results[3],\"<code>lascii('k','n')</code> should return <code>[ 'k', 'l', 'm', 'n' ]</code>.\");"
        },
        {
          "text": "\"<code>lascii('t','z')</code> should return <code>[ 't', 'u', 'v', 'w', 'x', 'y', 'z' ]</code>.\"",
          "testString": "assert.deepEqual(lascii(\"t\",\"z\"),results[4],\"<code>lascii('t','z')</code> should return <code>[ 't', 'u', 'v', 'w', 'x', 'y', 'z' ]</code>.\");"
        }
      ],
      "id": "5a23c84252665b21eecc7e7a",
      "challengeType": 5,
      "releasedOn": "June 2, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function lascii (cFrom, cTo) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "let results=[",
            "  [ 'a', 'b', 'c', 'd' ],",
            "  [ 'c', 'd', 'e', 'f', 'g', 'h', 'i' ],",
            "  [ 'm', 'n', 'o', 'p', 'q' ],",
            "  [ 'k', 'l', 'm', 'n' ],",
            "  [ 't', 'u', 'v', 'w', 'x', 'y', 'z' ]",
            "]"
          ]
        }
      }
    },
    {
      "title": "Generator/Exponential",
      "description": ["A generator is an executable entity (like a function or procedure) that contains code that yields a sequence of values, one at a time, so that each time you call the generator, the next value in the sequence is provided.", "Generators are often built on top of coroutines or objects so that the internal state of the object is handled “naturally”.", "Generators are often used in situations where a sequence is potentially infinite, and where it is possible to construct the next value of the sequence with only minimal state.", "Write a function that uses generators to generate squares and cubes. Create a new generator that filters all cubes from the generator of squares.", "The function should return the \\( n^{th} \\) value of the filtered generator.", "For example for \\(n=7\\), the function should return 81 as the sequence would be 4,9,16,25,36,49,81. Here 64 is filtered out, as it is a cube."],
      "solutions": ["function exponentialGenerator(n){\n  function* PowersGenerator(m) {\n  \tvar n=0;\n  \twhile(1) {\n  \t\tyield Math.pow(n, m);\n  \t\tn += 1;\n  \t}\n  }\n\n  function* FilteredGenerator(g, f){\n  \tvar value = g.next().value;\n  \tvar filter = f.next().value;\n  \twhile(1) {\n  \t\tif( value < filter ) {\n  \t\t\tyield value;\n  \t\t\tvalue = g.next().value;\n  \t\t} else if ( value > filter ) {\n  \t\t\tfilter = f.next().value;\n  \t\t} else {\n  \t\t\tvalue = g.next().value;\n  \t\t\tfilter = f.next().value;\n  \t\t}\n  \t}\n  }\n\n  var squares = PowersGenerator(2);\n  var cubes = PowersGenerator(3);\n\n  var filtered = FilteredGenerator(squares, cubes);\n\n  var curr=0;\n  for(var i=0;i<n;i++) curr=filtered.next();\n\n  return curr.value;\n}\n"],
      "tests": [{
        "text": "'<code>exponentialGenerator</code> should be a function.'",
        "testString": "assert(typeof exponentialGenerator=='function','<code>exponentialGenerator</code> should be a function.');"
      }, {
        "text": "'<code>exponentialGenerator()</code> should return a number.'",
        "testString": "assert(typeof exponentialGenerator(10)=='number','<code>exponentialGenerator()</code> should return a number.');"
      }, {
        "text": "'<code>exponentialGenerator(10)</code> should return <code>144</code>.'",
        "testString": "assert.equal(exponentialGenerator(10),144,'<code>exponentialGenerator(10)</code> should return <code>144</code>.');"
      }, {
        "text": "'<code>exponentialGenerator(12)</code> should return <code>196</code>.'",
        "testString": "assert.equal(exponentialGenerator(12),196,'<code>exponentialGenerator(12)</code> should return <code>196</code>.');"
      }, {
        "text": "'<code>exponentialGenerator(14)</code> should return <code>256</code>.'",
        "testString": "assert.equal(exponentialGenerator(14),256,'<code>exponentialGenerator(14)</code> should return <code>256</code>.');"
      }, {
        "text": "'<code>exponentialGenerator(20)</code> should return <code>484</code>.'",
        "testString": "assert.equal(exponentialGenerator(20),484,'<code>exponentialGenerator(20)</code> should return <code>484</code>.');"
      }, {
        "text": "'<code>exponentialGenerator(25)</code> should return <code>784</code>.'",
        "testString": "assert.equal(exponentialGenerator(25),784,'<code>exponentialGenerator(25)</code> should return <code>784</code>.');"
      }],
      "id": "5a23c84252665b21eecc7e7b",
      "challengeType": 5,
      "releasedOn": "June 7, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": ["function exponentialGenerator (n) {", "  // Good luck!", "}"],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Gray code",
      "description": ["<a href=\"https://en.wikipedia.org/wiki/Gray code\">Gray code</a> is a form of binary encoding where transitions between consecutive numbers differ by only one bit.", "This is a useful encoding for reducing hardware data hazards with values that change rapidly and/or connect to slower hardware as inputs. ", "It is also useful for generating inputs for <a href=\"https://en.wikipedia.org/wiki/Karnaugh map\">Karnaugh maps</a> in order from left to right or top to bottom. ", "Create a function to encode a number to and decode a number from Gray code. The function should will have 2 parameters. ", "The first would be a boolean. The function should encode for true and decode for false. The second parameter would be the number to be encoded/decoded.", "Display the normal binary representations, Gray code representations, and decoded Gray code values for all 5-bit binary numbers (0-31 inclusive, leading 0's not necessary).", "There are many possible Gray codes. The following encodes what is called \"binary reflected Gray code.\"<br>Encoding (MSB is bit 0, b is binary, g is Gray code): ", "<code><br>if b[i-1] = 1<br><span style=\"padding-left:1em\">g[i] = not b[i]</span><br>else<br><span style=\"padding-left:1em\">g[i] = b[i]</span><br>", "</code>  Or: <br><code> g = b xor (b logically right shifted 1 time)</code><br>Decoding (MSB is bit 0, b is binary, g is Gray code): <br>", "<code>b[0] = g[0]<br>for other bits:<br>b[i] = g[i] xor b[i-1]<br></code>"],
      "solutions": ["function gray(enc, number){\n  if(enc){\n      return number ^ (number >> 1);\n  }else{\n      let n = number;\n\n      while (number >>= 1) {\n          n ^= number;\n      }\n      return n;\n  }\n}\n"],
      "tests": [{
        "text": "'<code>gray</code> should be a function.'",
        "testString": "assert(typeof gray=='function','<code>gray</code> should be a function.');"
      }, {
        "text": "'<code>gray(true,177)</code> should return a number.'",
        "testString": "assert(typeof gray(true,177)=='number','<code>gray(true,177)</code> should return a number.');"
      }, {
        "text": "'<code>gray(true,177)</code> should return <code>233</code>.'",
        "testString": "assert.equal(gray(true,177),233,'<code>gray(true,177)</code> should return <code>233</code>.');"
      }, {
        "text": "'<code>gray(true,425)</code> should return <code>381</code>.'",
        "testString": "assert.equal(gray(true,425),381,'<code>gray(true,425)</code> should return <code>381</code>.');"
      }, {
        "text": "'<code>gray(true,870)</code> should return <code>725</code>.'",
        "testString": "assert.equal(gray(true,870),725,'<code>gray(true,870)</code> should return <code>725</code>.');"
      }, {
        "text": "'<code>gray(false,233)</code> should return <code>177</code>.'",
        "testString": "assert.equal(gray(false,233),177,'<code>gray(false,233)</code> should return <code>177</code>.');"
      }, {
        "text": "'<code>gray(false,381)</code> should return <code>425</code>.'",
        "testString": "assert.equal(gray(false,381),425,'<code>gray(false,381)</code> should return <code>425</code>.');"
      }, {
        "text": "'<code>gray(false,725)</code> should return <code>870</code>.'",
        "testString": "assert.equal(gray(false,725),870,'<code>gray(false,725)</code> should return <code>870</code>.');"
      }],
      "id": "5a23c84252665b21eecc7e80",
      "challengeType": 5,
      "releasedOn": "June 7, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": ["function gray(enc, number) {", " // Good luck!", "}"],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Greatest common divisor",
      "description": ["Write a function that returns the greatest common divisor of two integers."],
      "solutions": ["function gcd(a, b) {\n  return b==0 ? Math.abs(a):gcd(b, a % b);\n}\n"],
      "tests": [{
        "text": "'<code>gcd</code> should be a function.'",
        "testString": "assert(typeof gcd=='function','<code>gcd</code> should be a function.');"
      }, {
        "text": "'<code>gcd(24,36)</code> should return a number.'",
        "testString": "assert(typeof gcd(24,36)=='number','<code>gcd(24,36)</code> should return a number.');"
      }, {
        "text": "'<code>gcd(24,36)</code> should return <code>12</code>.'",
        "testString": "assert.equal(gcd(24,36),12,'<code>gcd(24,36)</code> should return <code>12</code>.');"
      }, {
        "text": "'<code>gcd(30,48)</code> should return <code>6</code>.'",
        "testString": "assert.equal(gcd(30,48),6,'<code>gcd(30,48)</code> should return <code>6</code>.');"
      }, {
        "text": "'<code>gcd(10,15)</code> should return <code>5</code>.'",
        "testString": "assert.equal(gcd(10,15),5,'<code>gcd(10,15)</code> should return <code>5</code>.');"
      }, {
        "text": "'<code>gcd(100,25)</code> should return <code>25</code>.'",
        "testString": "assert.equal(gcd(100,25),25,'<code>gcd(100,25)</code> should return <code>25</code>.');"
      }, {
        "text": "'<code>gcd(13,250)</code> should return <code>1</code>.'",
        "testString": "assert.equal(gcd(13,250),1,'<code>gcd(13,250)</code> should return <code>1</code>.');"
      }, {
        "text": "'<code>gcd(1300,250)</code> should return <code>50</code>.'",
        "testString": "assert.equal(gcd(1300,250),50,'<code>gcd(1300,250)</code> should return <code>50</code>.');"
      }],
      "id": "5a23c84252665b21eecc7e82",
      "challengeType": 5,
      "releasedOn": "June 7, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": ["function gcd(a, b) {", "  // Good luck!", "}"],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Greatest subsequential sum",
      "description": ["Given a sequence of integers, find a continuous subsequence which maximizes the sum of its elements, that is, the elements of no other single subsequence add up to a value larger than this one.", "An empty subsequence is considered to have the sum of \\( 0 \\);  thus if all elements are negative, the result must be the empty sequence."],
      "solutions": ["function maximumSubsequence(population) {\n  function sumValues(arr) {\n      var result = 0;\n      for (var i = 0, len = arr.length; i < len; i++) {\n          result += arr[i];\n      }\n      return result;\n  }\n  var greatest;\n  var maxValue = 0;\n  var subsequence = [];\n\n  for (var i = 0, len = population.length; i < len; i++) {\n      for (var j = i; j <= len; j++) {\n          var subsequence = population.slice(i, j);\n          var value = sumValues(subsequence);\n          if (value > maxValue) {\n              maxValue = value;\n              greatest = subsequence;\n          };\n      }\n  }\n\n  return greatest;\n}\n\n\n"],
      "tests": [{
        "text": "'<code>maximumSubsequence</code> should be a function.'",
        "testString": "assert(typeof maximumSubsequence=='function','<code>maximumSubsequence</code> should be a function.');"
      }, {
        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return an array.'",
        "testString": "assert(Array.isArray(maximumSubsequence(tests[0])),'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return an array.');"
      }, {
        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.'",
        "testString": "assert.deepEqual(maximumSubsequence(tests[0]),results[0],'<code>maximumSubsequence('+JSON.stringify(tests[0])+')</code> should return <code>'+JSON.stringify(results[0])+'</code>.');"
      }, {
        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.'",
        "testString": "assert.deepEqual(maximumSubsequence(tests[1]),results[1],'<code>maximumSubsequence('+JSON.stringify(tests[1])+')</code> should return <code>'+JSON.stringify(results[1])+'</code>.');"
      }, {
        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[2])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.'",
        "testString": "assert.deepEqual(maximumSubsequence(tests[2]),results[2],'<code>maximumSubsequence('+JSON.stringify(tests[2])+')</code> should return <code>'+JSON.stringify(results[2])+'</code>.');"
      }, {
        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[3])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.'",
        "testString": "assert.deepEqual(maximumSubsequence(tests[3]),results[3],'<code>maximumSubsequence('+JSON.stringify(tests[3])+')</code> should return <code>'+JSON.stringify(results[3])+'</code>.');"
      }, {
        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[4])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.'",
        "testString": "assert.deepEqual(maximumSubsequence(tests[4]),results[4],'<code>maximumSubsequence('+JSON.stringify(tests[4])+')</code> should return <code>'+JSON.stringify(results[4])+'</code>.');"
      }, {
        "text": "'<code>maximumSubsequence('+JSON.stringify(tests[5])+')</code> should return <code>'+JSON.stringify(results[5])+'</code>.'",
        "testString": "assert.deepEqual(maximumSubsequence(tests[5]),results[5],'<code>maximumSubsequence('+JSON.stringify(tests[5])+')</code> should return <code>'+JSON.stringify(results[5])+'</code>.');"
      }],
      "id": "5a23c84252665b21eecc7e84",
      "challengeType": 5,
      "releasedOn": "June 7, 2018",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": ["function maximumSubsequence (population) {", "  // Good luck!", "}"],
          "head": [],
          "tail": ["let tests=[ [1,2,-1,3,10,-10],", "            [0, 8, 10, -2, -4, -1, -5, -3],", "            [9, 9, -10, 1],", "            [7, 1, -5, -3, -8, 1],", "            [-3, 6, -1, 4, -4, -6],", "            [-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1]]", "let results=[ [ 1, 2, -1, 3, 10 ],", "          [ 0, 8, 10 ],", "          [ 9, 9 ],", "          [ 7, 1 ],", "          [ 6, -1, 4 ],", "          [ 3, 5, 6, -2, -1, 4 ] ]"]
        }
      }
    },
    {
      "title": "Hailstone sequence",
      "description": [
        "<p>The Hailstone sequence of numbers can be generated from a starting positive integer,  n  by:</p>",
        " If  n  is   1   then the sequence ends.",
        " If  n  is  even then the next  n  of the sequence <code> = n/2 </code>",
        " If  n  is  odd   then the next  n  of the sequence <code> = (3 * n) + 1 </code><p>The (unproven) <a href=\"https://en.wikipedia.org/wiki/Collatz conjecture\" title=\"wp: Collatz conjecture\">Collatz conjecture</a> is that the hailstone sequence for any starting number always terminates.</p>",
        "<p>The hailstone sequence is also known as hailstone numbers (because the values are usually subject to multiple descents and ascents like hailstones in a cloud), or as the Collatz sequence.</p>",
        "Task:",
        "Create a routine to generate the hailstone sequence for a number.",
        "Use the routine to show that the hailstone sequence for the number 27 has 112 elements starting with <code>27, 82, 41, 124</code> and ending with <code>8, 4, 2, 1</code>",
        "Show the number less than 100,000 which has the longest hailstone sequence together with that sequence's length.   (But don't show the actual sequence!)See also:",
        " <a href=\"http://xkcd.com/710\" title=\"link: http://xkcd.com/710\">xkcd</a> (humourous)."
      ],
      "solutions": [
        "// noprotect\nfunction hailstoneSequence () {\n  const res = [];\n\n  function hailstone(n) {\n    const seq = [n];\n    while (n > 1) {\n      n = n % 2 ? 3 * n + 1 : n / 2;\n      seq.push(n);\n    }\n    return seq;\n  }\n\n  const h = hailstone(27);\n  const hLen = h.length;\n  res.push([...h.slice(0, 4), ...h.slice(hLen - 4, hLen)]);\n\n  let n = 0;\n  let max = 0;\n  for (let i = 100000; --i;) {\n    const seq = hailstone(i);\n    const sLen = seq.length;\n\n    if (sLen > max) {\n      n = i;\n      max = sLen;\n    }\n  }\n  res.push([max, n]);\n\n  return res;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>hailstoneSequence</code> is a function.",
          "testString": "assert(typeof hailstoneSequence === 'function', '<code>hailstoneSequence</code> is a function.');"
        },
        {
          "text": "<code>hailstoneSequence()</code> should return <code>[[27,82,41,124,8,4,2,1], [351, 77031]]</code>",
          "testString": "assert.deepEqual(hailstoneSequence(), res, '<code>hailstoneSequence()</code> should return <code>[[27,82,41,124,8,4,2,1], [351, 77031]]</code>');"
        }
      ],
      "id": "595608ff8bcd7a50bd490181",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// noprotect",
            "function hailstoneSequence () {",
            "  const res = [];",
            "  // Good luck!",
            "",
            "  return res;",
            "}"
          ],
          "head": [],
          "tail": [
            "const res = [[27, 82, 41, 124, 8, 4, 2, 1], [351, 77031]];"
          ]
        }
      }
    },
    {
      "title": "Happy numbers",
      "description": [
        "<p>A happy number is defined by the following process:</p>",
        "<p>Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.</p>",
        "<p>Implement a function that returns true if the number is happy, or false if not.</p>"
      ],
      "solutions": [
        "function happy (number) {\n  let m;\n  let digit;\n  const cycle = [];\n\n  while (number !== 1 && cycle[number] !== true) {\n    cycle[number] = true;\n    m = 0;\n    while (number > 0) {\n      digit = number % 10;\n      m += Math.pow(digit, 2);\n      number = (number - digit) / 10;\n    }\n    number = m;\n  }\n  return (number === 1);\n}\n"
      ],
      "tests": [
        {
          "text": "<code>happy</code> is a function.",
          "testString": "assert(typeof happy === 'function', '<code>happy</code> is a function.');"
        },
        {
          "text": "<code>happy(1)</code> should return a boolean.",
          "testString": "assert(typeof happy(1) === 'boolean', '<code>happy(1)</code> should return a boolean.');"
        },
        {
          "text": "<code>happy(1)</code> should return true.",
          "testString": "assert(happy(1), '<code>happy(1)</code> should return true.');"
        },
        {
          "text": "<code>happy(2)</code> should return false.",
          "testString": "assert(!happy(2), '<code>happy(2)</code> should return false.');"
        },
        {
          "text": "<code>happy(7)</code> should return true.",
          "testString": "assert(happy(7), '<code>happy(7)</code> should return true.');"
        },
        {
          "text": "<code>happy(10)</code> should return true.",
          "testString": "assert(happy(10), '<code>happy(10)</code> should return true.');"
        },
        {
          "text": "<code>happy(13)</code> should return true.",
          "testString": "assert(happy(13), '<code>happy(13)</code> should return true.');"
        },
        {
          "text": "<code>happy(19)</code> should return true.",
          "testString": "assert(happy(19), '<code>happy(19)</code> should return true.');"
        },
        {
          "text": "<code>happy(23)</code> should return true.",
          "testString": "assert(happy(23), '<code>happy(23)</code> should return true.');"
        },
        {
          "text": "<code>happy(28)</code> should return true.",
          "testString": "assert(happy(28), '<code>happy(28)</code> should return true.');"
        },
        {
          "text": "<code>happy(31)</code> should return true.",
          "testString": "assert(happy(31), '<code>happy(31)</code> should return true.');"
        },
        {
          "text": "<code>happy(32)</code> should return true:.",
          "testString": "assert(happy(32), '<code>happy(32)</code> should return true:.');"
        },
        {
          "text": "<code>happy(33)</code> should return false.",
          "testString": "assert(!happy(33), '<code>happy(33)</code> should return false.');"
        }
      ],
      "id": "594810f028c0303b75339ad1",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function happy (number) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Harshad or Niven series",
      "description": [
        "<p>The <a href=\"http://mathworld.wolfram.com/HarshadNumber.html\" title=\"link: http://mathworld.wolfram.com/HarshadNumber.html\">Harshad</a> or Niven numbers are positive integers ≥ 1 that are divisible by the sum of their digits.</p><p>For example,  42  is a <a href=\"http://rosettacode.org/wiki/oeis:A005349\" title=\"oeis:A005349\">Harshad number</a> as  42  is divisible by  (4 + 2)  without remainder.</p>",
        "Assume that the series is defined as the numbers in increasing order.",
        "Task:",
        "<p>Implement a function to generate successive members of the Harshad sequence.</p><p>Use it to list the first twenty members of the sequence and list the first Harshad number greater than 1000.</p>"
      ],
      "solutions": [
        "function isHarshadOrNiven() {\n  const res = {\n    firstTwenty: [],\n    firstOver1000: undefined\n  };\n\n  function isHarshad(n) {\n    let s = 0;\n    const nStr = n.toString();\n    for (let i = 0; i < nStr.length; ++i) {\n      s += parseInt(nStr.charAt(i), 10);\n    }\n    return n % s === 0;\n  }\n\n  let count = 0;\n  const harshads = [];\n\n  for (let n = 1; count < 20; ++n) {\n    if (isHarshad(n)) {\n      count++;\n      harshads.push(n);\n    }\n  }\n\n  res.firstTwenty = harshads;\n\n  let h = 1000;\n  while (!isHarshad(++h));\n  res.firstOver1000 = h;\n\n  return res;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>isHarshadOrNiven</code> is a function.",
          "testString": "assert(typeof isHarshadOrNiven === 'function', '<code>isHarshadOrNiven</code> is a function.');"
        },
        {
          "text": "<code>isHarshadOrNiven()</code> should return <code>{\"firstTwenty\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40, 42],\"firstOver1000\": 1002}</code>",
          "testString": "assert.deepEqual(isHarshadOrNiven(), res, '<code>isHarshadOrNiven()</code> should return <code>{\"firstTwenty\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40, 42],\"firstOver1000\": 1002}</code>');"
        }
      ],
      "id": "595668ca4cfe1af2fb9818d4",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function isHarshadOrNiven () {",
            "  const res = {",
            "    firstTwenty: [],",
            "    firstOver1000: undefined",
            "  };",
            "  // Change after this line",
            "",
            "  return res;",
            "}"
          ],
          "head": [],
          "tail": [
            "const res = {",
            "  firstTwenty: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40, 42],",
            "  firstOver1000: 1002",
            "};"
          ]
        }
      }
    },
    {
      "title": "Hash from two arrays",
      "description": [
        "Task:",
        "<p>Using two Arrays of equal length, create a Hash object where the elements from one array (the keys) are linked to the elements of the other (the values)</p>",
        "Related task:",
        " <a href=\"http://rosettacode.org/wiki/Associative arrays/Creation\" title=\"Associative arrays/Creation\">Associative arrays/Creation</a>"
      ],
      "solutions": [
        "function arrToObj (keys, vals) {\n  return keys.reduce((map, key, index) => {\n    map[key] = vals[index];\n    return map;\n  }, {});\n}"
      ],
      "tests": [
        {
          "text": "<code>arrToObj</code> is a function.",
          "testString": "assert(typeof arrToObj === 'function', '<code>arrToObj</code> is a function.');"
        },
        {
          "text": "<code>arrToObj([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\", \"d\", \"e\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\" }</code>",
          "testString": "assert.deepEqual(arrToObj(...testCases[0]), res[0], '<code>arrToObj([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\", \"d\", \"e\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\" }</code>');"
        },
        {
          "text": "<code>arrToObj([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\", \"d\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: undefined }</code>",
          "testString": "assert.deepEqual(arrToObj(...testCases[1]), res[1], '<code>arrToObj([1, 2, 3, 4, 5], [\"a\", \"b\", \"c\", \"d\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: undefined }</code>');"
        },
        {
          "text": "<code>arrToObj([1, 2, 3], [\"a\", \"b\", \"c\", \"d\", \"e\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\" }</code>",
          "testString": "assert.deepEqual(arrToObj(...testCases[2]), res[2], '<code>arrToObj([1, 2, 3], [\"a\", \"b\", \"c\", \"d\", \"e\"])</code> should return <code>{ 1: \"a\", 2: \"b\", 3: \"c\" }</code>');"
        },
        {
          "text": "<code>arrToObj([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3 , \"d\": 4, \"e\": 5 }</code>",
          "testString": "assert.deepEqual(arrToObj(...testCases[3]), res[3], '<code>arrToObj([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3 , \"d\": 4, \"e\": 5 }</code>');"
        },
        {
          "text": "<code>arrToObj([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3 , \"d\": 4, \"e\": undefined }</code>",
          "testString": "assert.deepEqual(arrToObj(...testCases[4]), res[4], '<code>arrToObj([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3 , \"d\": 4, \"e\": undefined }</code>');"
        },
        {
          "text": "<code>arrToObj([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3  }</code>",
          "testString": "assert.deepEqual(arrToObj(...testCases[5]), res[5], '<code>arrToObj([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5])</code> should return <code>{ \"a\": 1, \"b\": 2, \"c\": 3  }</code>');"
        }
      ],
      "id": "595671d4d2cdc305f0d5b36f",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function arrToObj (keys, vals) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = [",
            "  [[1, 2, 3, 4, 5], ['a', 'b', 'c', 'd', 'e']],",
            "  [[1, 2, 3, 4, 5], ['a', 'b', 'c', 'd']],",
            "  [[1, 2, 3], ['a', 'b', 'c', 'd', 'e']],",
            "  [['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]],",
            "  [['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4]],",
            "  [['a', 'b', 'c'], [1, 2, 3, 4, 5]]",
            "];",
            "",
            "const res = [",
            "  { 1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e' },",
            "  { 1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: undefined },",
            "  { 1: 'a', 2: 'b', 3: 'c' },",
            "  { a: 1, b: 2, c: 3, d: 4, e: 5 },",
            "  { a: 1, b: 2, c: 3, d: 4, e: undefined },",
            "  { a: 1, b: 2, c: 3 }",
            "];"
          ]
        }
      }
    },
    {
      "title": "Hash join",
      "description": [
        "<p>An <a href=\"https://en.wikipedia.org/wiki/Join_(SQL)#Inner_join\" title=\"wp: Join_(SQL)#Inner_join\">inner join</a> is an operation that combines two data tables into one table, based on matching column values. The simplest way of implementing this operation is the <a href=\"https://en.wikipedia.org/wiki/Nested loop join\" title=\"wp: Nested loop join\">nested loop join</a> algorithm, but a more scalable alternative is the <a href=\"https://en.wikipedia.org/wiki/hash join\" title=\"wp: hash join\">hash join</a> algorithm.</p>",
        "<p>Implement the \"hash join\" algorithm, and demonstrate that it passes the test-case listed below.</p><p>You should represent the tables as data structures that feel natural in your programming language.</p>",
        "<p>The \"hash join\" algorithm consists of two steps:</p>",
        "Hash phase: Create a <a href=\"https://en.wikipedia.org/wiki/Multimap\" title=\"wp: Multimap\">multimap</a> from one of the two tables, mapping from each join column value to all the rows that contain it.",
        " The multimap must support hash-based lookup which scales better than a simple linear search, because that's the whole point of this algorithm.",
        " Ideally we should create the multimap for the smaller table, thus minimizing its creation time and memory size.",
        "Join phase: Scan the other table, and find matching rows by looking in the multimap created before.",
        "<p>In pseudo-code, the algorithm could be expressed as follows:</p>",
        "<pre>",
        "let A = the first input table (or ideally, the larger one)",
        "let B = the second input table (or ideally, the smaller one)",
        "let j<sub>A</sub> = the join column ID of table A",
        "let j<sub>B</sub> = the join column ID of table B",
        "let M<sub>B</sub> = a multimap for mapping from single values to multiple rows of table B (starts out empty)",
        "let C = the output table (starts out empty)",
        "for each row b in table B:",
        "  place b in multimap M<sub>B</sub> under key b(j<sub>B</sub>)",
        "for each row a in table A:",
        "  for each row b in multimap M<sub>B</sub> under key a(j<sub>A</sub>):",
        "    let c = the concatenation of row a and row b",
        "    place row c in table C</p>",
        "</pre>",
        "Test-case",
        "<p>Input</p>",
        "<table>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\">",
        "<table style=\"border:none; border-collapse:collapse;\">",
        "<tr>",
        "<td style=\"border:none\"> <i>A =</i>",
        "</td>",
        "<td style=\"border:none\">",
        "<table>",
        "<tr>",
        "<th style=\"padding: 4px; margin: 5px;\"> Age </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> Name",
        "</th></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 27 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 18 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Glory",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 18 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Popeye",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan",
        "</td></tr></table>",
        "</td>",
        "<td style=\"border:none; padding-left:1.5em;\" rowspan=\"2\">",
        "</td>",
        "<td style=\"border:none\"> <i>B =</i>",
        "</td>",
        "<td style=\"border:none\">",
        "<table>",
        "<tr>",
        "<th style=\"padding: 4px; margin: 5px;\"> Character </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> Nemesis",
        "</th></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Whales",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Spiders",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Ghosts",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Zombies",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> Glory </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Buffy",
        "</td></tr></table>",
        "</td></tr>",
        "<tr>",
        "<td style=\"border:none\"> <i>j<sub>A</sub> =</i>",
        "</td>",
        "<td style=\"border:none\"> <i><code>Name</code> (i.e. column 1)</i>",
        "</td>",
        "<td style=\"border:none\"> <i>j<sub>B</sub> =</i>",
        "</td>",
        "<td style=\"border:none\"> <i><code>Character</code> (i.e. column 0)</i>",
        "</td></tr></table>",
        "</td>",
        "<td style=\"padding: 4px; margin: 5px;\">",
        "</td></tr></table>",
        "<p>Output</p>",
        "<table>",
        "<tr>",
        "<th style=\"padding: 4px; margin: 5px;\"> A.Age </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> A.Name </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> B.Character </th>",
        "<th style=\"padding: 4px; margin: 5px;\"> B.Nemesis",
        "</th></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 27 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Whales",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 27 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Jonah </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Spiders",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 18 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Ghosts",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 18 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Zombies",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Glory </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Glory </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Buffy",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Ghosts",
        "</td></tr>",
        "<tr>",
        "<td style=\"padding: 4px; margin: 5px;\"> 28 </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Alan </td>",
        "<td style=\"padding: 4px; margin: 5px;\"> Zombies",
        "</td></tr></table>",
        "<p></p><p></p><p>The order of the rows in the output table is not significant.</p>",
        "<p>If you're using numerically indexed arrays to represent table rows (rather than referring to columns by name), you could represent the output rows in the form <code style=\"white-space:nowrap\">[[27, \"Jonah\"], [\"Jonah\", \"Whales\"]]</code>.</p><hr>"
      ],
      "solutions": [
        "function hashJoin (hash1, hash2) {\n  const hJoin = (tblA, tblB, strJoin) => {\n    const [jA, jB] = strJoin.split('=');\n    const M = tblB.reduce((a, x) => {\n      const id = x[jB];\n      return (\n        a[id] ? a[id].push(x) : (a[id] = [x]),\n        a\n      );\n    }, {});\n\n    return tblA.reduce((a, x) => {\n      const match = M[x[jA]];\n      return match ? (\n                a.concat(match.map(row => dictConcat(x, row)))\n            ) : a;\n    }, []);\n  };\n\n  const dictConcat = (dctA, dctB) => {\n    const ok = Object.keys;\n    return ok(dctB).reduce(\n            (a, k) => (a[`B_${k}`] = dctB[k]) && a,\n            ok(dctA).reduce(\n                (a, k) => (a[`A_${k}`] = dctA[k]) && a, {}\n            )\n        );\n  };\n\n  return hJoin(hash1, hash2, 'name=character');\n}\n\n"
      ],
      "tests": [
        {
          "text": "<code>hashJoin</code> is a function.",
          "testString": "assert(typeof hashJoin === 'function', '<code>hashJoin</code> is a function.');"
        },
        {
          "text": "<code>hashJoin([{ age: 27, name: \"Jonah\" }, { age: 18, name: \"Alan\" }, { age: 28, name: \"Glory\" }, { age: 18, name: \"Popeye\" }, { age: 28, name: \"Alan\" }], [{ character: \"Jonah\", nemesis: \"Whales\" }, { character: \"Jonah\", nemesis: \"Spiders\" }, { character: \"Alan\", nemesis: \"Ghosts\" }, { character:\"Alan\", nemesis: \"Zombies\" }, { character: \"Glory\", nemesis: \"Buffy\" }, { character: \"Bob\", nemesis: \"foo\" }])</code> should return <code>[{\"A_age\": 27,\"A_name\": \"Jonah\", \"B_character\": \"Jonah\", \"B_nemesis\": \"Whales\"}, {\"A_age\": 27,\"A_name\": \"Jonah\", \"B_character\": \"Jonah\", \"B_nemesis\": \"Spiders\"}, {\"A_age\": 18,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Ghosts\"}, {\"A_age\": 18,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Zombies\"}, {\"A_age\": 28,\"A_name\": \"Glory\", \"B_character\": \"Glory\", \"B_nemesis\": \"Buffy\"}, {\"A_age\": 28,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Ghosts\"}, {\"A_age\": 28,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Zombies\"}]</code>",
          "testString": "assert.deepEqual(hashJoin(hash1, hash2), res, '<code>hashJoin([{ age: 27, name: \"Jonah\" }, { age: 18, name: \"Alan\" }, { age: 28, name: \"Glory\" }, { age: 18, name: \"Popeye\" }, { age: 28, name: \"Alan\" }], [{ character: \"Jonah\", nemesis: \"Whales\" }, { character: \"Jonah\", nemesis: \"Spiders\" }, { character: \"Alan\", nemesis: \"Ghosts\" }, { character:\"Alan\", nemesis: \"Zombies\" }, { character: \"Glory\", nemesis: \"Buffy\" }, { character: \"Bob\", nemesis: \"foo\" }])</code> should return <code>[{\"A_age\": 27,\"A_name\": \"Jonah\", \"B_character\": \"Jonah\", \"B_nemesis\": \"Whales\"}, {\"A_age\": 27,\"A_name\": \"Jonah\", \"B_character\": \"Jonah\", \"B_nemesis\": \"Spiders\"}, {\"A_age\": 18,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Ghosts\"}, {\"A_age\": 18,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Zombies\"}, {\"A_age\": 28,\"A_name\": \"Glory\", \"B_character\": \"Glory\", \"B_nemesis\": \"Buffy\"}, {\"A_age\": 28,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Ghosts\"}, {\"A_age\": 28,\"A_name\": \"Alan\", \"B_character\": \"Alan\", \"B_nemesis\": \"Zombies\"}]</code>');"
        }
      ],
      "id": "5956795bc9e2c415eb244de1",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function hashJoin (hash1, hash2) {",
            "  // Good luck!",
            "  return [];",
            "}"
          ],
          "head": [],
          "tail": [
            "const hash1 = [",
            "    { age: 27, name: 'Jonah' },",
            "    { age: 18, name: 'Alan' },",
            "    { age: 28, name: 'Glory' },",
            "    { age: 18, name: 'Popeye' },",
            "    { age: 28, name: 'Alan' }",
            "];",
            "",
            "const hash2 = [",
            "    { character: 'Jonah', nemesis: 'Whales' },",
            "    { character: 'Jonah', nemesis: 'Spiders' },",
            "    { character: 'Alan', nemesis: 'Ghosts' },",
            "    { character: 'Alan', nemesis: 'Zombies' },",
            "    { character: 'Glory', nemesis: 'Buffy' },",
            "    { character: 'Bob', nemesis: 'foo' }",
            "];",
            "",
            "const res = [",
            "    { A_age: 27, A_name: 'Jonah', B_character: 'Jonah', B_nemesis: 'Whales' },",
            "    { A_age: 27, A_name: 'Jonah', B_character: 'Jonah', B_nemesis: 'Spiders' },",
            "    { A_age: 18, A_name: 'Alan', B_character: 'Alan', B_nemesis: 'Ghosts' },",
            "    { A_age: 18, A_name: 'Alan', B_character: 'Alan', B_nemesis: 'Zombies' },",
            "    { A_age: 28, A_name: 'Glory', B_character: 'Glory', B_nemesis: 'Buffy' },",
            "    { A_age: 28, A_name: 'Alan', B_character: 'Alan', B_nemesis: 'Ghosts' },",
            "    { A_age: 28, A_name: 'Alan', B_character: 'Alan', B_nemesis: 'Zombies' }",
            "];",
            "",
            "const bench1 = [{ name: 'u2v7v', num: 1 }, { name: 'n53c8', num: 10 }, { name: 'oysce', num: 9 }, { name: '0mto2s', num: 1 }, { name: 'vkh5id', num: 4 }, { name: '5od0cf', num: 8 }, { name: 'uuulue', num: 10 }, { name: '3rgsbi', num: 9 }, { name: 'kccv35r', num: 4 }, { name: '80un74', num: 9 }, { name: 'h4pp3', num: 6 }, { name: '51bit', num: 7 }, { name: 'j9ndf', num: 8 }, { name: 'vf3u1', num: 10 }, { name: 'g0bw0om', num: 10 }, { name: 'j031x', num: 7 }, { name: 'ij3asc', num: 9 }, { name: 'byv83y', num: 8 }, { name: 'bjzp4k', num: 4 }, { name: 'f3kbnm', num: 10 }];",
            "const bench2 = [{ friend: 'o8b', num: 8 }, { friend: 'ye', num: 2 }, { friend: '32i', num: 5 }, { friend: 'uz', num: 3 }, { friend: 'a5k', num: 4 }, { friend: 'uad', num: 7 }, { friend: '3w5', num: 10 }, { friend: 'vw', num: 10 }, { friend: 'ah', num: 4 }, { friend: 'qv', num: 7 }, { friend: 'ozv', num: 2 }, { friend: '9ri', num: 10 }, { friend: '7nu', num: 4 }, { friend: 'w3', num: 9 }, { friend: 'tgp', num: 8 }, { friend: 'ibs', num: 1 }, { friend: 'ss7', num: 6 }, { friend: 'g44', num: 9 }, { friend: 'tab', num: 9 }, { friend: 'zem', num: 10 }];"
          ]
        }
      }
    },
    {
      "title": "Heronian triangles",
      "description": [
        "<p><a href=\"https://en.wikipedia.org/wiki/Heron's formula\" title=\"wp: Heron's formula\">Hero's formula</a> for the area of a triangle given the length of its three sides  <big> a,</big>  <big>b,</big>  and  <big>c</big>  is given by:</p><p><big>$$A = \\sqrt{s(s-a)(s-b)(s-c)},$$</big></p><p>where  <big>s</big>  is half the perimeter of the triangle; that is,</p><p><big>$$s=\\frac{a+b+c}{2}.$$</big></p>",
        "<p><a href=\"http://www.had2know.com/academics/heronian-triangles-generator-calculator.html\" title=\"link: http://www.had2know.com/academics/heronian-triangles-generator-calculator.html\">Heronian triangles</a> are triangles whose sides and area are all integers.</p>",
        "<p> An example is the triangle with sides  3, 4, 5  whose area is  6  (and whose perimeter is  12). </p>",
        "<p>Note that any triangle whose sides are all an integer multiple of  3, 4, 5;  such as  6, 8, 10,  will also be a Heronian triangle.</p><p>Define a Primitive Heronian triangle as a Heronian triangle where the greatest common divisor</p>",
        "<p>of all three sides is  1  (unity).</p><p>This will exclude, for example, triangle  6, 8, 10.</p>",
        "Task:",
        "<p>Implement a function based on Hero's formula that returns the first <code>n<sub>th</sub></code> ordered triangles in an array of arrays.</p>"
      ],
      "solutions": [
        "// noprotect\nfunction heronianTriangle (n) {\n  const list = [];\n  const result = [];\n\n  let j = 0;\n  for (let c = 1; c <= 200; c++) {\n    for (let b = 1; b <= c; b++) {\n      for (let a = 1; a <= b; a++) {\n        if (gcd(gcd(a, b), c) === 1 && isHeron(heronArea(a, b, c))) {\n          list[j++] = new Array(a, b, c, heronArea(a, b, c));\n        }\n      }\n    }\n  }\n\n  sort(list);\n\n  for (let i = 0; i < n; i++) {\n    result[i] = [list[i][0], list[i][1], list[i][2]];\n  }\n\n  return result;\n\n  function heronArea(a, b, c) {\n    const s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  }\n\n  function isHeron(h) { return h % 1 === 0 && h > 0; }\n\n  function gcd(a, b) {\n    let leftover = 1;\n    let dividend = a > b ? a : b;\n    let divisor = a > b ? b : a;\n    while (leftover !== 0) {\n      leftover = dividend % divisor;\n      if (leftover > 0) {\n        dividend = divisor;\n        divisor = leftover;\n      }\n    }\n    return divisor;\n  }\n\n  function sort(arg) {\n    let swapped = true;\n    let temp = [];\n    while (swapped) {\n      swapped = false;\n      for (let i = 1; i < arg.length; i++) {\n        if (arg[i][4] < arg[i - 1][4] || arg[i][4] === arg[i - 1][4] && arg[i][3] < arg[i - 1][3]) {\n          temp = arg[i];\n          arg[i] = arg[i - 1];\n          arg[i - 1] = temp;\n          swapped = true;\n        }\n      }\n    }\n  }\n}\n"
      ],
      "tests": [
        {
          "text": "<code>heronianTriangle</code> is a function.",
          "testString": "assert(typeof heronianTriangle === 'function', '<code>heronianTriangle</code> is a function.');"
        },
        {
          "text": "<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17]]</code>",
          "testString": "assert.deepEqual(heronianTriangle(testCases[0]), res[0], '<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17]]</code>');"
        },
        {
          "text": "<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15]],</code>",
          "testString": "assert.deepEqual(heronianTriangle(testCases[1]), res[1], '<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15]],</code>');"
        },
        {
          "text": "<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53]],</code>",
          "testString": "assert.deepEqual(heronianTriangle(testCases[2]), res[2], '<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53]],</code>');"
        },
        {
          "text": "<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53], [19, 20, 37],[16, 17, 17], [17, 17, 30], [16, 25, 39], [13, 20, 21]]</code>",
          "testString": "assert.deepEqual(heronianTriangle(testCases[3]), res[3], '<code>heronianTriangle()</code> should return <code>[[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53], [19, 20, 37],[16, 17, 17], [17, 17, 30], [16, 25, 39], [13, 20, 21]]</code>');"
        }
      ],
      "id": "595b98f8b5a2245e243aa831",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// noprotect",
            "function heronianTriangle (n) {",
            "  // Good luck!",
            "",
            "  return [];",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCases = [10, 15, 20, 25];",
            "",
            "const res = [",
            "  [[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17]],",
            "  [[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15]],",
            "  [[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53]],",
            "  [[3, 4, 5], [5, 5, 6], [5, 5, 8], [4, 13, 15], [5, 12, 13], [9, 10, 17], [3, 25, 26], [7, 15, 20], [10, 13, 13], [8, 15, 17], [13, 13, 24], [6, 25, 29], [11, 13, 20], [5, 29, 30], [13, 14, 15], [10, 17, 21], [7, 24, 25], [8, 29, 35], [12, 17, 25], [4, 51, 53], [19, 20, 37], [16, 17, 17], [17, 17, 30], [16, 25, 39], [13, 20, 21]]",
            "];"
          ]
        }
      }
    },
    {
      "title": "Hofstadter Figure-Figure sequences",
      "description": [
        "<p>These two sequences of positive integers are defined as:</p>",
        "<p><big>$$R(1)=1\\ ;\\ S(1)=2 \\\\R(n)=R(n-1)+S(n-1), \\quad n>1.$$</big></p>",
        "<p>The sequence <big>$S(n)$</big> is further defined as the sequence of positive integers not present in <big>$R(n)$</big>.</p><p>Sequence <big>$R$</big> starts:</p>",
        "<p>1, 3, 7, 12, 18, ...</p>",
        "<p>Sequence <big>$S$</big> starts:</p>",
        "<p>2, 4, 5, 6, 8, ...</p>",
        "Task:",
        "Create two functions named ffr and ffs that when given n return R(n) or S(n) respectively.(Note that R(1) = 1 and S(1) = 2 to avoid off-by-one errors).",
        "No maximum value for n should be assumed.",
        "Sloane's <a href=\"http://oeis.org/A005228\" title=\"link: http://oeis.org/A005228\">A005228</a> and <a href=\"http://oeis.org/A030124\" title=\"link: http://oeis.org/A030124\">A030124</a>.",
        "<a href=\"http://mathworld.wolfram.com/HofstadterFigure-FigureSequence.html\" title=\"link: http://mathworld.wolfram.com/HofstadterFigure-FigureSequence.html\">Wolfram MathWorld</a>",
        "Wikipedia: <a href=\"https://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Figure-Figure_sequences\" title=\"wp: Hofstadter_sequence#Hofstadter_Figure-Figure_sequences\">Hofstadter Figure-Figure sequences</a>."
      ],
      "solutions": [
        "// noprotect\nconst R = [null, 1];\nconst S = [null, 2];\n\nfunction extendSequences (n) {\n  let current = Math.max(R[R.length - 1], S[S.length - 1]);\n  let i;\n  while (R.length <= n || S.length <= n) {\n    i = Math.min(R.length, S.length) - 1;\n    current += 1;\n    if (current === R[i] + S[i]) {\n      R.push(current);\n    } else {\n      S.push(current);\n    }\n  }\n}\n\nfunction ffr (n) {\n  extendSequences(n);\n  return R[n];\n}\n\nfunction ffs (n) {\n  extendSequences(n);\n  return S[n];\n}\n"
      ],
      "tests": [
        {
          "text": "<code>ffr</code> is a function.",
          "testString": "assert(typeof ffr === 'function', '<code>ffr</code> is a function.');"
        },
        {
          "text": "<code>ffs</code> is a function.",
          "testString": "assert(typeof ffs === 'function', '<code>ffs</code> is a function.');"
        },
        {
          "text": "<code>ffr</code> should return integer.",
          "testString": "assert(Number.isInteger(ffr(1)), '<code>ffr</code> should return integer.');"
        },
        {
          "text": "<code>ffs</code> should return integer.",
          "testString": "assert(Number.isInteger(ffs(1)), '<code>ffs</code> should return integer.');"
        },
        {
          "text": "<code>ffr()</code> should return <code>69</code>",
          "testString": "assert.equal(ffr(ffrParamRes[0][0]), ffrParamRes[0][1], '<code>ffr()</code> should return <code>69</code>');"
        },
        {
          "text": "<code>ffr()</code> should return <code>1509</code>",
          "testString": "assert.equal(ffr(ffrParamRes[1][0]), ffrParamRes[1][1], '<code>ffr()</code> should return <code>1509</code>');"
        },
        {
          "text": "<code>ffr()</code> should return <code>5764</code>",
          "testString": "assert.equal(ffr(ffrParamRes[2][0]), ffrParamRes[2][1], '<code>ffr()</code> should return <code>5764</code>');"
        },
        {
          "text": "<code>ffr()</code> should return <code>526334</code>",
          "testString": "assert.equal(ffr(ffrParamRes[3][0]), ffrParamRes[3][1], '<code>ffr()</code> should return <code>526334</code>');"
        },
        {
          "text": "<code>ffs()</code> should return <code>14</code>",
          "testString": "assert.equal(ffs(ffsParamRes[0][0]), ffsParamRes[0][1], '<code>ffs()</code> should return <code>14</code>');"
        },
        {
          "text": "<code>ffs()</code> should return <code>59</code>",
          "testString": "assert.equal(ffs(ffsParamRes[1][0]), ffsParamRes[1][1], '<code>ffs()</code> should return <code>59</code>');"
        },
        {
          "text": "<code>ffs()</code> should return <code>112</code>",
          "testString": "assert.equal(ffs(ffsParamRes[2][0]), ffsParamRes[2][1], '<code>ffs()</code> should return <code>112</code>');"
        },
        {
          "text": "<code>ffs()</code> should return <code>1041</code>",
          "testString": "assert.equal(ffs(ffsParamRes[3][0]), ffsParamRes[3][1], '<code>ffs()</code> should return <code>1041</code>');"
        }
      ],
      "id": "59622f89e4e137560018a40e",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// noprotect",
            "function ffr(n) {",
            "  return n;",
            "}",
            "",
            "function ffs(n) {",
            "  return n;",
            "}"
          ],
          "head": [],
          "tail": [
            "const ffrParamRes = [[10, 69], [50, 1509], [100, 5764], [1000, 526334]];",
            "const ffsParamRes = [[10, 14], [50, 59], [100, 112], [1000, 1041]];",
            ""
          ]
        }
      }
    },
    {
      "title": "Hofstadter Q sequence",
      "description": [
        "<p>The <a href=\"https://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Q_sequence\" title=\"wp: Hofstadter_sequence#Hofstadter_Q_sequence\">Hofstadter Q sequence</a> is defined as:</p>",
        "<p>$Q(1)=Q(2)=1, \\\\ Q(n)=Q\\big(n-Q(n-1)\\big)+Q\\big(n-Q(n-2)), \\quad n>2.$</p>",
        "<p>It is defined like the <a href=\"http://rosettacode.org/wiki/Fibonacci sequence\" title=\"Fibonacci sequence\">Fibonacci sequence</a>, but whereas the next term in the Fibonacci sequence is the sum of the previous two terms, in the Q sequence the previous two terms tell you how far to go back in the Q sequence to find the two numbers to sum to make the next term of the sequence.</p>",
        "Task:",
        "Implement the Hofstadter Q Sequence equation into JavaScript"
      ],
      "solutions": [
        "function hofstadterQ (n) {\n  const memo = [1, 1, 1];\n  const Q = function (i) {\n    let result = memo[i];\n    if (typeof result !== 'number') {\n      result = Q(i - Q(i - 1)) + Q(i - Q(i - 2));\n      memo[i] = result;\n    }\n    return result;\n  };\n  return Q(n);\n}\n"
      ],
      "tests": [
        {
          "text": "<code>hofstadterQ</code> is a function.",
          "testString": "assert(typeof hofstadterQ === 'function', '<code>hofstadterQ</code> is a function.');"
        },
        {
          "text": "<code>hofstadterQ()</code> should return <code>integer</code>",
          "testString": "assert(Number.isInteger(hofstadterQ(1000)), '<code>hofstadterQ()</code> should return <code>integer</code>');"
        },
        {
          "text": "<code>hofstadterQ(1000)</code> should return <code>502</code>",
          "testString": "assert.equal(hofstadterQ(testCase[0]), res[0], '<code>hofstadterQ(1000)</code> should return <code>502</code>');"
        },
        {
          "text": "<code>hofstadterQ(1500)</code> should return <code>755</code>",
          "testString": "assert.equal(hofstadterQ(testCase[1]), res[1], '<code>hofstadterQ(1500)</code> should return <code>755</code>');"
        },
        {
          "text": "<code>hofstadterQ(2000)</code> should return <code>1005</code>",
          "testString": "assert.equal(hofstadterQ(testCase[2]), res[2], '<code>hofstadterQ(2000)</code> should return <code>1005</code>');"
        },
        {
          "text": "<code>hofstadterQ(2500)</code> should return <code>1261</code>",
          "testString": "assert.equal(hofstadterQ(testCase[3]), res[3], '<code>hofstadterQ(2500)</code> should return <code>1261</code>');"
        }
      ],
      "id": "59637c4d89f6786115efd814",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function hofstadterQ (n) {",
            "  // Good luck!",
            "  return n;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testCase = [1000, 1500, 2000, 2500];",
            "const res = [502, 755, 1005, 1261];"
          ]
        }
      }
    },
    {
      "title": "Sailors, coconuts and a monkey problem",
      "description": [
        " <p>",
        "   Five sailors are shipwrecked on an island and",
        "   collect a large pile of coconuts during the day.",
        " </p>",
        " <p>That night the first sailor wakes up and decides",
        "   to take his first share early  so tries to divide the pile of coconuts equally",
        "   into five piles but finds that there is one coconut left over, so he tosses it",
        "   to a monkey and then hides \"his\" one of the five equally sized piles of",
        "   coconuts and pushes the other four piles together to form a single visible pile",
        "   of coconuts again and goes to bed.",
        " </p>",
        " <p>",
        "   To cut a long story short, each of the sailors in",
        "   turn gets up once during the night and performs the same actions of dividing",
        "   the coconut pile into five, finding that one coconut is left over and giving",
        "   that single remainder coconut to the monkey.",
        " </p>",
        " <p>",
        "   In the morning (after the surreptitious and",
        "   separate action of each of the five sailors during the night), the remaining",
        "   coconuts are divided into five equal piles for each of the sailors, whereupon",
        "   it is found that the pile of coconuts divides equally amongst the sailors with",
        "   no remainder. (Nothing for the monkey in the morning.)",
        " </p>",
        "",
        " The task:",
        "",
        "",
        "     Create a function that returns the",
        "     the minimum possible size",
        "     of the initial pile of coconuts collected during the day for N",
        "     sailors.",
        "",
        "",
        " Note:",
        "",
        "",
        "     Of course the tale is told in a",
        "     world where the collection of any amount of coconuts in a day and multiple",
        "     divisions of the pile, etc can occur in time fitting the story line, so as",
        "     not to affect the mathematics.",
        "",
        "",
        "",
        " C.f:",
        "",
        "   <a",
        "       href=\"https://www.youtube.com/watch?v=U9qU20VmvaU\" title=\"link: https://www.youtube.com/watch?v=U9qU20VmvaU\">",
        "       Monkeys and Coconuts - Numberphile</a> (Video) Analytical solution.",
        "",
        "",
        "     <a",
        "       href=\"http://oeis.org/A002021\" title=\"link: http://oeis.org/A002021\">A002021 Pile of coconuts problem</a> The On-Line",
        "     Encyclopedia of Integer Sequences. (Although some of its references may use",
        "     the alternate form of the tale).",
        "",
        "",
        ""
      ],
      "solutions": [
        "// noprotect\nfunction splitCoconuts(intSailors) {\n  let intNuts = intSailors;\n  let result = splitCoconutsHelper(intNuts, intSailors);\n  while (!result) {\n    intNuts += 1;\n    result = splitCoconutsHelper(intNuts, intSailors);\n  }\n\n  return intNuts;\n}\n\nfunction splitCoconutsHelper(intNuts, intSailors, intDepth) {\n  const nDepth = intDepth !== undefined ? intDepth : intSailors;\n  const portion = Math.floor(intNuts / intSailors);\n  const remain = intNuts % intSailors;\n\n  if (portion <= 0 || remain !== (nDepth ? 1 : 0)) {\n    return null;\n  }\n\n  if (nDepth) {\n    return splitCoconutsHelper(\n      intNuts - portion - remain, intSailors, nDepth - 1\n    );\n  }\n\n  return intNuts;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>splitCoconuts</code> is a function.",
          "testString": "assert(typeof splitCoconuts === 'function', '<code>splitCoconuts</code> is a function.');"
        },
        {
          "text": "<code>splitCoconuts(5)</code> should return 3121.",
          "testString": "assert(splitCoconuts(5) === 3121, '<code>splitCoconuts(5)</code> should return 3121.');"
        },
        {
          "text": "<code>splitCoconuts(6)</code> should return 233275.",
          "testString": "assert(splitCoconuts(6) === 233275, '<code>splitCoconuts(6)</code> should return 233275.');"
        },
        {
          "text": "<code>splitCoconuts(7)</code> should return 823537.",
          "testString": "assert(splitCoconuts(7) === 823537, '<code>splitCoconuts(7)</code> should return 823537.');"
        }
      ],
      "id": "59da22823d04c95919d46269",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// noprotect",
            "function splitCoconuts(intSailors) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "SEDOLs",
      "null": [],
      "description": [
        "    Task:",
        "",
        "  <p>",
        "    For each number list of 6-digit ",
        "    <a href=\"https://en.wikipedia.org/wiki/SEDOL\" title=\"wp: SEDOL\">SEDOL</a>s,",
        "    calculate and append the checksum digit.",
        "  </p>",
        "",
        "  <p>",
        "    That is, given the input string on the left, your function should return the",
        "    corresponding string on the right:",
        "  </p>",
        "",
        "    <pre>",
        "     710889 => 7108899",
        "     B0YBKJ => B0YBKJ7",
        "     406566 => 4065663",
        "     B0YBLH => B0YBLH2",
        "     228276 => 2282765",
        "     B0YBKL => B0YBKL9",
        "     557910 => 5579107",
        "     B0YBKR => B0YBKR5",
        "     585284 => 5852842",
        "     B0YBKT => B0YBKT7",
        "     B00030 => B000300",
        "    </pre>",
        "",
        "  <p>",
        "    Check also that each input is correctly formed, especially",
        "    with respect to valid characters allowed in a SEDOL string. Your function",
        "    should return <code>null</code> on invalid input.",
        "  </p>"
      ],
      "solutions": [
        "function sedol(input) {\n  const checkDigit = sedolCheckDigit(input);\n  if (checkDigit !== null) {\n    return input + checkDigit;\n  }\n  return null;\n}\n\nconst weight = [1, 3, 1, 7, 3, 9, 1];\nfunction sedolCheckDigit(char6) {\n  if (char6.search(/^[0-9BCDFGHJKLMNPQRSTVWXYZ]{6}$/) === -1) {\n    return null;\n  }\n\n  let sum = 0;\n  for (let i = 0; i < char6.length; i++) {\n    sum += weight[i] * parseInt(char6.charAt(i), 36);\n  }\n  const check = (10 - (sum % 10)) % 10;\n  return check.toString();\n}\n"
      ],
      "tests": [
        {
          "text": "<code>sedol</code> is a function.",
          "testString": "assert(typeof sedol === 'function', '<code>sedol</code> is a function.');"
        },
        {
          "text": "<code>sedol('a')</code> should return null.\")",
          "testString": "assert(sedol('a') === null, \"<code>sedol('a')</code> should return null.\");"
        },
        {
          "text": "<code>sedol('710889')</code> should return '7108899'.\")",
          "testString": "assert(sedol('710889') === '7108899', \"<code>sedol('710889')</code> should return '7108899'.\");"
        },
        {
          "text": "<code>sedol('BOATER')</code> should return null.\")",
          "testString": "assert(sedol('BOATER') === null, \"<code>sedol('BOATER')</code> should return null.\");"
        },
        {
          "text": "<code>sedol('228276')</code> should return '2282765'.\")",
          "testString": "assert(sedol('228276') === '2282765', \"<code>sedol('228276')</code> should return '2282765'.\");"
        }
      ],
      "id": "59d9c6bc214c613ba73ff012",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function sedol (input) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "S-Expressions",
      "description": [
        "<p>",
        "<a href=\"https://en.wikipedia.org/wiki/S-Expression\" title=\"wp: S-Expression\">S-Expressions</a> are one convenient way to parse and store data.",
        "</p>",
        "Task:",
        "<p>",
        "    Write a simple reader/parser for S-Expressions that handles quoted and unquoted strings, integers and floats.",
        "</p>",
        "<p>",
        "The function should read a single but nested S-Expression from a string and",
        "return it as a (nested) array.",
        "</p>",
        "<p>",
        "    Newlines and other whitespace may be ignored unless contained within a quoted string.",
        "</p>",
        "<p>“<tt>()</tt>”  inside quoted strings are not interpreted, but treated as part of the string.",
        "</p>",
        "<p>",
        "Handling escaped quotes inside a string is optional;  thus “<tt>(foo\"bar)</tt>” maybe treated as a string “<tt>foo\"bar</tt>”, or as an error.",
        "</p>",
        "<p>",
        "For this, the reader need not recognize “<tt>\\</tt>” for escaping, but should, in addition, recognize numbers if the language has appropriate datatypes.",
        "</p>",
        "<p>",
        "Note that with the exception of “<tt>()\"</tt>” (“<tt>\\</tt>” if escaping is supported) and whitespace there are no special characters. Anything else is allowed without quotes.",
        "</p>",
        "<p>The reader should be able to read the following input</p>",
        "<p>",
        "<pre>",
        "    ((data \"quoted data\" 123 4.5)",
        "    (data (!@# (4.5) \"(more\" \"data)\")))",
        "</pre>",
        "</p>",
        "<p>",
        "and turn it into a native datastructure. (see the",
        "<a href=\"http://rosettacode.org/wiki/#Pike\" title=\"#Pike\">Pike</a>, ",
        "<a href=\"http://rosettacode.org/wiki/#Python\" title=\"#Python\">Python</a> and",
        "<a href=\"http://rosettacode.org/wiki/#Ruby\" title=\"#Ruby\">Ruby</a> implementations",
        "for examples of native data structures.)",
        "</p>"
      ],
      "solutions": [
        "function parseSexpr(str) {\n  const t = str.match(/\\s*(\"[^\"]*\"|\\(|\\)|\"|[^\\s()\"]+)/g);\n  for (var o, c = 0, i = t.length - 1; i >= 0; i--) {\n    var n,\n      ti = t[i].trim();\n    if (ti == '\"') return;\n    else if (ti == '(') t[i] = '[', c += 1;\n    else if (ti == ')') t[i] = ']', c -= 1;\n    else if ((n = +ti) == ti) t[i] = n;\n    else t[i] = `'${ti.replace('\\'', '\\\\\\'')}'`;\n    if (i > 0 && ti != ']' && t[i - 1].trim() != '(') t.splice(i, 0, ',');\n    if (!c) if (!o) o = true; else return;\n  }\n  return c ? undefined : eval(t.join(''));\n}\n"
      ],
      "tests": [
        {
          "text": "<code>parseSexpr</code> is a function.",
          "testString": "assert(typeof parseSexpr === 'function', '<code>parseSexpr</code> is a function.');"
        },
        {
          "text": "<code>parseSexpr('(data1 data2 data3)')</code> should return ['data1', 'data2', 'data3']\")",
          "testString": "assert.deepEqual(parseSexpr(simpleSExpr), simpleSolution, \"<code>parseSexpr('(data1 data2 data3)')</code> should return ['data1', 'data2', 'data3']\");"
        },
        {
          "text": "<code>parseSexpr('(data1 data2 data3)')</code> should return an array with 3 elements\")",
          "testString": "assert.deepEqual(parseSexpr(basicSExpr), basicSolution, \"<code>parseSexpr('(data1 data2 data3)')</code> should return an array with 3 elements\");"
        }
      ],
      "id": "59667989bf71cf555dd5d2ff",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function parseSexpr(str) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const simpleSExpr = '(data1 data2 data3)';",
            "const simpleSolution = ['data1', 'data2', 'data3'];",
            "",
            "const basicSExpr = '((data \"quoted data\" 123 4.5) (data (!@# (4.5) \"(more\" \"data)\")))';",
            "const basicSolution = [[\"data\",\"\\\"quoted data\\\"\",123,4.5],[\"data\",[\"!@#\",[4.5],\"\\\"(more\\\"\",\"\\\"data)\\\"\"]]];"
          ]
        }
      }
    },
    {
      "title": "Taxicab numbers",
      "description": [
        "A &nbsp; <a href=\"https://en.wikipedia.org/wiki/Hardy–Ramanujan number\" title=\"wp: Hardy–Ramanujan number\">taxicab number</a>",
        "&nbsp; (the definition that is being used here) &nbsp; is a positive integer that can be expressed as the sum of two positive cubes in more than one way.",
        "The first taxicab number is &nbsp; 1729, &nbsp; which is:",
        "1<sup>3</sup> &nbsp; + &nbsp; 12<sup>3</sup> &nbsp; &nbsp; &nbsp; and",
        "9<sup>3</sup> &nbsp; + &nbsp; 10<sup>3</sup>.",
        "Taxicab numbers are also known as:",
        "  * &nbsp; taxi numbers",
        "  * &nbsp; taxi-cab numbers",
        "  * &nbsp; taxi cab numbers",
        "  * &nbsp; Hardy-Ramanujan numbers",
        "Task:",
        "Write a function that returns the lowest N taxicab numbers.",
        "For each of the taxicab numbers, show the number as well as it's constituent cubes.",
        "See also:",
        "[http://oeis.org/A001235 A001235 taxicab numbers] on The On-Line Encyclopedia of Integer Sequences.",
        "  <a href=\"http://mathworld.wolfram.com/Hardy-RamanujanNumber.html\">Hardy-Ramanujan Number</a> on MathWorld.",
        "  <a href=\"http://mathworld.wolfram.com/TaxicabNumber.html\">taxicab number</a> on MathWorld.",
        "  <a href=\"https://en.wikipedia.org/wiki/Taxicab_number\">taxicab number</a> on Wikipedia."
      ],
      "solutions": [
        "function taxicabNumbers(nNumbers) {\n  const cubeN = [];\n  const s3s = {};\n\n  const e = 100;\n  for (let n = 1; n < e; n += 1) {\n    cubeN[n] = n * n * n;\n  }\n\n  for (let a = 1; a < e - 1; a += 1) {\n    const a3 = cubeN[a];\n    for (let b = a; b < e; b += 1) {\n      const b3 = cubeN[b];\n      const s3 = a3 + b3;\n\n      let abs = s3s[s3];\n      if (!abs) {\n        s3s[s3] = abs = [];\n      }\n      abs.push([a, b]);\n    }\n  }\n\n  let i = 0;\n  const res = [];\n  Object.keys(s3s).forEach(s3 => {\n    const abs = s3s[s3];\n    if (abs.length >= 2) { // No two cube pairs found\n      i += 1;\n      if (i <= nNumbers) {\n        res.push(s3);\n      }\n    }\n  });\n  return res.map(item => parseInt(item, 10));\n}\n"
      ],
      "tests": [
        {
          "text": "<code>taxicabNumbers </code> is a function.",
          "testString": "assert(typeof taxicabNumbers === 'function', '<code>taxicabNumbers </code> is a function.');"
        },
        {
          "text": "<code>taxicabNumbers </code> should return an array.",
          "testString": "assert(typeof taxicabNumbers(2) === 'object', '<code>taxicabNumbers </code> should return an array.');"
        },
        {
          "text": "<code>taxicabNumbers </code> should return an array of numbers.",
          "testString": "assert(typeof taxicabNumbers(100)[0] === 'number', '<code>taxicabNumbers </code> should return an array of numbers.');"
        },
        {
          "text": "<code>taxicabNumbers(4) </code> must return [1729, 4104, 13832, 20683].",
          "testString": "assert.deepEqual(taxicabNumbers(4), res4, '<code>taxicabNumbers(4) </code> must return [1729, 4104, 13832, 20683].');"
        },
        {
          "text": "taxicabNumbers(25) should return [1729, 4104, 13832, 20683, 32832, 39312, 40033, 46683, 64232, 65728, 110656, 110808, 134379, 149389, 165464, 171288, 195841, 216027, 216125, 262656, 314496, 320264, 327763, 373464, 402597]",
          "testString": "assert.deepEqual(taxicabNumbers(25), res25, 'taxicabNumbers(25) should return [1729, 4104, 13832, 20683, 32832, 39312, 40033, 46683, 64232, 65728, 110656, 110808, 134379, 149389, 165464, 171288, 195841, 216027, 216125, 262656, 314496, 320264, 327763, 373464, 402597]');"
        },
        {
          "text": "taxicabNumbers(39) resulting numbers from 20 - 29 should be [314496,320264,327763,373464,402597,439101,443889,513000,513856].",
          "testString": "assert.deepEqual(taxicabNumbers(39).slice(20, 29), res39From20To29, 'taxicabNumbers(39) resulting numbers from 20 - 29 should be [314496,320264,327763,373464,402597,439101,443889,513000,513856].');"
        }
      ],
      "id": "594ecc0d9a8cf816e3340187",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function taxicabNumbers (n) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const res4 = [1729, 4104, 13832, 20683];",
            "const res25 = [",
            "  1729, 4104, 13832, 20683, 32832, 39312, 40033, 46683, 64232, 65728, 110656,",
            "  110808, 134379, 149389, 165464, 171288, 195841, 216027, 216125, 262656, 314496, 320264, 327763,",
            "  373464, 402597",
            "];",
            "",
            "const res39From20To29 = [314496, 320264, 327763, 373464, 402597, 439101, 443889, 513000, 513856];"
          ]
        }
      }
    },
    {
      "title": "Tokenize a string with escaping",
      "description": [
        "<p>",
        "Write a function or program that can split a string at each non-escaped occurrence of a separator character.",
        "</p>",
        "<p>",
        "It should accept three input parameters:",
        "</p>",
        "  The <b>string</b>",
        "  The <b>separator character</b>",
        "  The <b>escape character</b>",
        "<p>It should output a list of strings.</p>",
        "<p>Rules for splitting:</p>",
        "  The fields that were separated by the separators, become the elements of the output list.",
        "  Empty fields should be preserved, even at the start and end.",
        "<p>Rules for escaping:</p>",
        "  \"Escaped\" means preceded by an occurrence of the escape character that is not already escaped itself.",
        "  When the escape character precedes a character that has no special meaning, it still counts as an escape (but does not do anything special).",
        "  Each occurrences of the escape character that was used to escape something, should not become part of the output.",
        "<p>Demonstrate that your function satisfies the following test-case:",
        "  Given string <pre>one^|uno||three^^^^|four^^^|^cuatro|</pre> and using",
        "  <pre>|</pre> as a separator and <pre>^</pre> as escape character, your",
        "  function should output the following array:",
        "</p>",
        "  <pre>",
        "  ['one|uno', '', 'three^^', 'four^|quatro', '']",
        "  </pre>"
      ],
      "solutions": [
        "// tokenize :: String -> Character -> Character -> [String]\nfunction tokenize(str, charDelim, charEsc) {\n  const dctParse = str.split('')\n    .reduce((a, x) => {\n      const blnEsc = a.esc;\n      const blnBreak = !blnEsc && x === charDelim;\n      const blnEscChar = !blnEsc && x === charEsc;\n\n      return {\n        esc: blnEscChar,\n        token: blnBreak ? '' : (\n          a.token + (blnEscChar ? '' : x)\n        ),\n        list: a.list.concat(blnBreak ? a.token : [])\n      };\n    }, {\n      esc: false,\n      token: '',\n      list: []\n    });\n\n  return dctParse.list.concat(\n    dctParse.token\n  );\n}\n"
      ],
      "tests": [
        {
          "text": "<code>tokenize</code> is a function.",
          "testString": "assert(typeof tokenize === 'function', '<code>tokenize</code> is a function.');"
        },
        {
          "text": "<code>tokenize</code> should return an array.",
          "testString": "assert(typeof tokenize('a', 'b', 'c') === 'object', '<code>tokenize</code> should return an array.');"
        },
        {
          "text": "<code>tokenize('one^|uno||three^^^^|four^^^|^cuatro|', '|', '^') </code> should return ['one|uno', '', 'three^^', 'four^|cuatro', '']\")",
          "testString": "assert.deepEqual(tokenize(testStr1, '|', '^'), res1, \"<code>tokenize('one^|uno||three^^^^|four^^^|^cuatro|', '|', '^') </code> should return ['one|uno', '', 'three^^', 'four^|cuatro', '']\");"
        },
        {
          "text": "<code>tokenize('a@&bcd&ef&&@@hi', '&', '@')</code> should return <code>['a&bcd', 'ef', '', '@hi']</code>",
          "testString": "assert.deepEqual(tokenize(testStr2, '&', '@'), res2, '<code>tokenize(\"a@&bcd&ef&&@@hi\", \"&\", \"@\")</code> should return <code>[\"a&bcd\", \"ef\", \"\", \"@hi\"]</code>');"
        }
      ],
      "id": "594faaab4e2a8626833e9c3d",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function tokenize(str, esc, sep) {",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testStr1 = 'one^|uno||three^^^^|four^^^|^cuatro|';",
            "const res1 = ['one|uno', '', 'three^^', 'four^|cuatro', ''];",
            "",
            "// TODO add more tests",
            "const testStr2 = 'a@&bcd&ef&&@@hi';",
            "const res2 = ['a&bcd', 'ef', '', '@hi'];"
          ]
        }
      }
    },
    {
      "title": "Topological sort",
      "description": [
        "<p>",
        "Given a mapping between items, and items they depend on, a ",
        "<a href=\"https://en.wikipedia.org/wiki/Topological sorting\" title=\"wp: Topological sorting\">topological sort</a> orders ",
        "items so that no item precedes an item it depends upon.",
        "</p>",
        "<p>",
        "The compiling of a library in the ",
        "<a href=\"https://en.wikipedia.org/wiki/VHDL\" title=\"wp: VHDL\">VHDL</a> language",
        "has the constraint that a library must be compiled after any library it depends on.",
        "</p>",
        "Task:",
        "<p>",
        "Write a function that will return a valid compile order of VHDL libraries from their dependencies.",
        "</p>",
        "  Assume library names are single words. ",
        "  Items mentioned as only dependents have no dependents of their own, but their order of compiling must be given.",
        "  Any self dependencies should be ignored. ",
        "  Any un-orderable dependencies should be ignored.",
        "<p>Use the following data as an example:</p>",
        "<pre>",
        "LIBRARY          LIBRARY DEPENDENCIES",
        "=======          ====================",
        "des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee",
        "dw01             ieee dw01 dware gtech",
        "dw02             ieee dw02 dware",
        "dw03             std synopsys dware dw03 dw02 dw01 ieee gtech",
        "dw04             dw04 ieee dw01 dware gtech",
        "dw05             dw05 ieee dware",
        "dw06             dw06 ieee dware",
        "dw07             ieee dware",
        "dware            ieee dware",
        "gtech            ieee gtech",
        "ramlib           std ieee",
        "std_cell_lib     ieee std_cell_lib",
        "synopsys",
        "</pre>",
        "<p>",
        "<small>Note: the above data would be un-orderable if, for example, <code>dw04</code> is added to the list of dependencies of <code>dw01</code>.</small>",
        "</p>",
        "C.f.:",
        "",
        "    <a href=\"http://rosettacode.org/wiki/Topological sort/Extracted top item\" title=\"Topological sort/Extracted top item\">Topological sort/Extracted top item</a>.",
        "",
        "<p>There are two popular algorithms for topological sorting:</p>",
        "<p>",
        "  Kahn's 1962 topological sort, and depth-first search:",
        "  <a href=\"https://en.wikipedia.org/wiki/Topological sorting\" title=\"wp: Topological sorting\">topological sort</a>",
        "</p>",
        "<p>",
        "  Jason Sachs:",
        "  <a href=\"http://www.embeddedrelated.com/showarticle/799.php\" title=\"link: http://www.embeddedrelated.com/showarticle/799.php\">",
        "  \"Ten little algorithms, part 4: topological sort\"",
        "  </a>.",
        "</p>"
      ],
      "solutions": [
        "function topologicalSort(libs) {\n  // A map of the input data, with the keys as the packages, and the values as\n  // and array of packages on which it depends.\n  const D = libs\n    .split('\\n')\n    .map(e => e.split(' ').filter(ep => ep !== ''))\n    .reduce((p, c) =>\n      p.set(c[0], c.filter((e, i) => (i > 0 && e !== c[0] ? e : null))), new Map());\n  [].concat(...D.values()).forEach(e => {\n    D.set(e, D.get(e) || []);\n  });\n\n  // The above map rotated so that it represents a DAG of the form\n  // Map {\n  //    A => [ A, B, C],\n  //    B => [C],\n  //    C => []\n  // }\n  // where each key represents a node, and the array contains the edges.\n  const G = [...D.keys()].reduce((p, c) =>\n    p.set(\n      c,\n      [...D.keys()].filter(e => D.get(e).includes(c))),\n    new Map()\n  );\n\n  // An array of leaf nodes; nodes with 0 in degrees.\n  const Q = [...D.keys()].filter(e => D.get(e).length === 0);\n\n  // The result array.\n  const S = [];\n  while (Q.length) {\n    const u = Q.pop();\n    S.push(u);\n    G.get(u).forEach(v => {\n      D.set(v, D.get(v).filter(e => e !== u));\n      if (D.get(v).length === 0) {\n        Q.push(v);\n      }\n    });\n  }\n\n  return S;\n}\n"
      ],
      "tests": [
        {
          "text": "<code>topologicalSort</code> is a function.",
          "testString": "assert(typeof topologicalSort === 'function', '<code>topologicalSort</code> is a function.');"
        },
        {
          "text": "<code>topologicalSort</code> must return correct library order..",
          "testString": "assert.deepEqual(topologicalSort(libsSimple), ['bbb', 'aaa'], '<code>topologicalSort</code> must return correct library order..');"
        },
        {
          "text": "<code>topologicalSort</code> must return correct library order..",
          "testString": "assert.deepEqual(topologicalSort(libsVHDL), solutionVHDL, '<code>topologicalSort</code> must return correct library order..');"
        },
        {
          "text": "<code>topologicalSort</code> must return correct library order..",
          "testString": "assert.deepEqual(topologicalSort(libsCustom), solutionCustom, '<code>topologicalSort</code> must return correct library order..');"
        },
        {
          "text": "<code>topologicalSort</code> must ignore unorderable dependencies..",
          "testString": "assert.deepEqual(topologicalSort(libsUnorderable), solutionUnorderable, '<code>topologicalSort</code> must ignore unorderable dependencies..');"
        }
      ],
      "id": "594fa2746886f41f7d8bf225",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function topologicalSort(libs) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const libsSimple =",
            "  `aaa bbb",
            "  bbb`;",
            "",
            "const libsVHDL =",
            "  `des_system_lib   std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee",
            "  dw01             ieee dw01 dware gtech",
            "  dw02             ieee dw02 dware",
            "  dw03             std synopsys dware dw03 dw02 dw01 ieee gtech",
            "  dw04             dw04 ieee dw01 dware gtech",
            "  dw05             dw05 ieee dware",
            "  dw06             dw06 ieee dware",
            "  dw07             ieee dware",
            "  dware            ieee dware",
            "  gtech            ieee gtech",
            "  ramlib           std ieee",
            "  std_cell_lib     ieee std_cell_lib",
            "  synopsys`;",
            "",
            "const solutionVHDL = [",
            "  'ieee', 'std_cell_lib', 'gtech', 'dware', 'dw07', 'dw06',",
            "  'dw05', 'dw02', 'dw01', 'dw04', 'std', 'ramlib', 'synopsys',",
            "  'dw03', 'des_system_lib'",
            "];",
            "",
            "const libsCustom =",
            "  `a b c d",
            "  b c d",
            "  d c",
            "  c base",
            "  base`;",
            "const solutionCustom = ['base', 'c', 'd', 'b', 'a'];",
            "",
            "const libsUnorderable =",
            "  `TestLib Base MainLib",
            "  MainLib TestLib",
            "  Base`;",
            "",
            "const solutionUnorderable = ['Base'];"
          ]
        }
      }
    },
    {
      "title": "Top rank per group",
      "description": [
        "Task:",
        "<p>Find the top N ranked data in each group, where N  is provided as a parameter. Name of the rank and the group are also provided as parameter.</p>",
        "Given the following data:",
        "<pre>",
        "[",
        "  { name: 'Tyler Bennett', id: 'E10297', salary: 32000, dept: 'D101' },",
        "  { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050' },",
        "  { name: 'George Woltman', id: 'E00127', salary: 53500, dept: 'D101' },",
        "  { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' },",
        "  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D202' },",
        "  { name: 'David McClellan', id: 'E04242', salary: 41500, dept: 'D101' },",
        "  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D202' },",
        "  { name: 'Nathan Adams', id: 'E41298', salary: 21900, dept: 'D050' },",
        "  { name: 'Richard Potter', id: 'E43128', salary: 15900, dept: 'D101' },",
        "  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D202' },",
        "  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },",
        "  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D190' },",
        "  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D190' }",
        "];",
        "</pre>",
        "one could rank top 10 employees in each department by calling",
        "<code>topRankPerGroup(10, data, 'dept', 'salary')</code>",
        "Given the following data:",
        "<pre>",
        "[",
        "  { name: 'Friday 13th', genre: 'horror', rating: 9.9 },",
        "  { name: \"Nightmare on Elm's Street\", genre: 'horror', rating: 5.7 },",
        "  { name: 'Titanic', genre: 'drama', rating: 7.3 },",
        "  { name: 'Maze Runner', genre: 'scifi', rating: 7.1 },",
        "  { name: 'Blade runner', genre: 'scifi', rating: 8.9 }",
        "];",
        "</pre>",
        "one could rank the top-rated movie in each genre by calling",
        "<code>topRankPerGroup(1, data, 'genre', 'rating')</code>"
      ],
      "solutions": [
        "const collectDept = function (arrOfObj, groupName) {\n  const collect = arrOfObj.reduce((rtnObj, obj) => {\n    if (rtnObj[obj[groupName]] === undefined) {\n      rtnObj[obj[groupName]] = [];\n    }\n    rtnObj[obj[groupName]].push(obj);\n    return rtnObj;\n  }, {} // initial value to reduce\n  );\n\n  return Object.keys(collect).sort().map(key => collect[key]);\n};\n\nconst sortRank = function (arrOfRankArrs, rankName) {\n  return arrOfRankArrs.map(item => item.sort((a, b) => {\n    if (a[rankName] > b[rankName]) { return -1; }\n    if (a[rankName] < b[rankName]) { return 1; }\n    return 0;\n  }));\n};\n\nfunction topRankPerGroup(n, data, groupName, rankName) {\n  if (n < 0) { return; }\n  return sortRank(collectDept(data, groupName),\n    rankName).map(list => list.slice(0, n));\n}\n"
      ],
      "tests": [
        {
          "text": "<code>topRankPerGroup</code> is a function.",
          "testString": "assert(typeof topRankPerGroup === 'function', '<code>topRankPerGroup</code> is a function.');"
        },
        {
          "text": "<code>topRankPerGroup</code> returns undefined on negative n values.",
          "testString": "assert(typeof topRankPerGroup(-1, []) === 'undefined', '<code>topRankPerGroup</code> returns undefined on negative n values.');"
        },
        {
          "text": "First department must be D050",
          "testString": "assert.equal(res1[0][0].dept, 'D050', 'First department must be D050');"
        },
        {
          "text": "First department must be D050",
          "testString": "assert.equal(res1[0][1].salary, 21900, 'First department must be D050');"
        },
        {
          "text": "The last department must be D202",
          "testString": "assert.equal(res1[3][3].dept, 'D202', 'The last department must be D202');"
        },
        {
          "text": "<code>topRankPerGroup(1, ...)</code> must return only top ranking result per group.",
          "testString": "assert.equal(res2[2].length, 1, '<code>topRankPerGroup(1, ...)</code> must return only top ranking result per group.');"
        },
        {
          "text": "<code>topRankPerGroup(1, ...)</code> must return only top ranking result per group.",
          "testString": "assert.equal(res3[2][1].name, 'Maze Runner', '<code>topRankPerGroup(1, ...)</code> must return only top ranking result per group.');"
        }
      ],
      "id": "595011cba5a81735713873bd",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function topRankPerGroup(n, data, groupName, rankName) {",
            "  // Good luck!",
            "  return true;",
            "}"
          ],
          "head": [],
          "tail": [
            "const testData1 = [",
            "  { name: 'Tyler Bennett', id: 'E10297', salary: 32000, dept: 'D101' },",
            "  { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050' },",
            "  { name: 'George Woltman', id: 'E00127', salary: 53500, dept: 'D101' },",
            "  { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' },",
            "  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D202' },",
            "  { name: 'David McClellan', id: 'E04242', salary: 41500, dept: 'D101' },",
            "  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D202' },",
            "  { name: 'Nathan Adams', id: 'E41298', salary: 21900, dept: 'D050' },",
            "  { name: 'Richard Potter', id: 'E43128', salary: 15900, dept: 'D101' },",
            "  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D202' },",
            "  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },",
            "  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D190' },",
            "  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D190' }",
            "];",
            "",
            "const res1 = topRankPerGroup(10, testData1, 'dept', 'salary');",
            "",
            "const testData2 = [",
            "  { name: 'Friday 13th', genre: 'horror', rating: 9.9 },",
            "  { name: \"Nightmare on Elm's Street\", genre: 'horror', rating: 5.7 },",
            "  { name: 'Titanic', genre: 'drama', rating: 7.3 },",
            "  { name: 'Maze Runner', genre: 'scifi', rating: 7.1 },",
            "  { name: 'Blade runner', genre: 'scifi', rating: 8.9 }",
            "];",
            "",
            "const res2 = topRankPerGroup(1, testData2, 'genre', 'rating');",
            "const res3 = topRankPerGroup(2, testData2, 'genre', 'rating');",
            "",
            "//console.log(JSON.stringify(topRankPerGroup(10, testData1)));"
          ]
        }
      }
    },
    {
      "title": "Towers of Hanoi",
      "description": [
        "    Task:",
        "<p>Solve the <a href=\"https://en.wikipedia.org/wiki/Towers_of_Hanoi\" title=\"wp: Towers_of_Hanoi\">Towers of Hanoi</a>  problem.</p>",
        "<p>",
        "Your solution should accept the number of discs as the first parameters, and",
        "three string used to identify each of the three stacks of discs, for example",
        "<code>towerOfHanoi(4, 'A', 'B', 'C')</code>. The function should return an",
        "array of arrays containing the list of moves, source -> destination. For",
        "example, the array <code>[['A', 'C'], ['B', 'A']]</code> indicates that the",
        "1st move was to move a disc from stack A to C, and the 2nd move was to move a",
        "disc from stack B to A.",
        "</p>"
      ],
      "solutions": [
        "function towerOfHanoi(n, a, b, c) {\n  const res = [];\n  towerOfHanoiHelper(n, a, c, b, res);\n  return res;\n}\n\nfunction towerOfHanoiHelper(n, a, b, c, res) {\n  if (n > 0) {\n    towerOfHanoiHelper(n - 1, a, c, b, res);\n    res.push([a, c]);\n    towerOfHanoiHelper(n - 1, b, a, c, res);\n  }\n}\n"
      ],
      "tests": [
        {
          "text": "<code>towerOfHanoi</code> is a function.",
          "testString": "assert(typeof towerOfHanoi === 'function', '<code>towerOfHanoi</code> is a function.');"
        },
        {
          "text": "<code>towerOfHanoi(3, ...)</code> should return 7 moves.",
          "testString": "assert(res3.length === 7, '<code>towerOfHanoi(3, ...)</code> should return 7 moves.');"
        },
        {
          "text": "<code>towerOfHanoi(3, 'A', 'B', 'C')</code> should return [['A','B'],['A','C'],['B','C'],['A','B'],['C','A'],['C','B'],['A','B']].\")",
          "testString": "assert.deepEqual(towerOfHanoi(3, 'A', 'B', 'C'), res3Moves, \"<code>towerOfHanoi(3, 'A', 'B', 'C')</code> should return [['A','B'],['A','C'],['B','C'],['A','B'],['C','A'],['C','B'],['A','B']].\");"
        },
        {
          "text": "<code>towerOfHanoi(5, \"X\", \"Y\", \"Z\")</code> 10th move should be Y -> X.",
          "testString": "assert.deepEqual(res5[9], ['Y', 'X'], '<code>towerOfHanoi(5, \"X\", \"Y\", \"Z\")</code> 10th move should be Y -> X.');"
        },
        {
          "text": "<code>towerOfHanoi(7, 'A', 'B', 'C')</code> first ten moves are [['A','B'],['A','C'],['B','C'],['A','B'],['C','A'],['C','B'],['A','B'],['A','C'],['B','C'],['B','A']].\")",
          "testString": "assert.deepEqual(towerOfHanoi(7, 'A', 'B', 'C').slice(0, 10), res7First10Moves, \"<code>towerOfHanoi(7, 'A', 'B', 'C')</code> first ten moves are [['A','B'],['A','C'],['B','C'],['A','B'],['C','A'],['C','B'],['A','B'],['A','C'],['B','C'],['B','A']].\");"
        }
      ],
      "id": "5951ed8945deab770972ae56",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function towerOfHanoi (n, a, b, c) {",
            "  // Good luck!",
            "  return [[]];",
            "}"
          ],
          "head": [],
          "tail": [
            "const res3 = towerOfHanoi(3, 'A', 'B', 'C');",
            "const res3Moves = [['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B'], ['C', 'A'], ['C', 'B'], ['A', 'B']];",
            "const res5 = towerOfHanoi(5, 'X', 'Y', 'Z');",
            "const res7First10Moves = [['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B'], ['C', 'A'], ['C', 'B'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['B', 'A']];"
          ]
        }
      }
    },
    {
      "title": "Vector cross product",
      "description": [
        "A vector is defined as having three dimensions as being represented by an ordered collection of three numbers: &nbsp; (X, Y, Z).",
        "<p>",
        "Task:",
        "",
        "    Write a function that takes two vectors (arrays) as input and computes their cross product.",
        "",
        "Your function should return <code>null</code> on",
        "invalid inputs (ie vectors of different lengths).",
        "</p>"
      ],
      "solutions": [
        "function crossProduct(a, b) {\n  if (!a || !b) {\n    return null;\n  }\n\n  // Check lengths\n  if (a.length !== 3 || b.length !== 3) {\n    return null;\n  }\n\n  return [\n    (a[1] * b[2]) - (a[2] * b[1]),\n    (a[2] * b[0]) - (a[0] * b[2]),\n    (a[0] * b[1]) - (a[1] * b[0])\n  ];\n}\n"
      ],
      "tests": [
        {
          "text": "dotProduct must be a function",
          "testString": "assert.equal(typeof crossProduct, 'function', 'dotProduct must be a function');"
        },
        {
          "text": "dotProduct() must return null",
          "testString": "assert.equal(crossProduct(), null, 'dotProduct() must return null');"
        },
        {
          "text": "crossProduct([1, 2, 3], [4, 5, 6]) must return [-3, 6, -3].",
          "testString": "assert.deepEqual(res12, exp12, 'crossProduct([1, 2, 3], [4, 5, 6]) must return [-3, 6, -3].');"
        }
      ],
      "id": "594810f028c0303b75339ad2",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function crossProduct() {",
            "    // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const tv1 = [1, 2, 3];",
            "const tv2 = [4, 5, 6];",
            "const res12 = crossProduct(tv1, tv2);",
            "const exp12 = [-3, 6, -3];"
          ]
        }
      }
    },
    {
      "title": "Vector dot product",
      "description": [
        "<p>",
        "A vector is defined as having three dimensions as being represented by an ordered collection of three numbers: &nbsp; (X, Y, Z).",
        "</p>",
        "<p>",
        "Task:",
        "",
        "    Write a function that takes any numbers of vectors (arrays) as input and computes their dot product.",
        "",
        "Your function should return <code>null</code> on",
        "invalid inputs (ie vectors of different lengths).",
        "</p>"
      ],
      "solutions": [
        "function dotProduct(...vectors) {\n  if (!vectors || !vectors.length) {\n    return null;\n  }\n  if (!vectors[0] || !vectors[0].length) {\n    return null;\n  }\n  const vectorLen = vectors[0].length;\n  const numVectors = vectors.length;\n\n  // If all vectors not same length, return null\n  for (let i = 0; i < numVectors; i++) {\n    if (vectors[i].length !== vectorLen) {\n      return null;  // return undefined\n    }\n  }\n\n  let prod = 0;\n  let sum = 0;\n  let j = vectorLen;\n  let i = numVectors;\n  // Sum terms\n  while (j--) {\n    i = numVectors;\n    prod = 1;\n\n    while (i--) {\n      prod *= vectors[i][j];\n    }\n    sum += prod;\n  }\n  return sum;\n}\n"
      ],
      "tests": [
        {
          "text": "dotProduct must be a function",
          "testString": "assert.equal(typeof dotProduct, 'function', 'dotProduct must be a function');"
        },
        {
          "text": "dotProduct() must return null",
          "testString": "assert.equal(dotProduct(), null, 'dotProduct() must return null');"
        },
        {
          "text": "dotProduct([[1], [1]]) must return 1.",
          "testString": "assert.equal(dotProduct([1], [1]), 1, 'dotProduct([[1], [1]]) must return 1.');"
        },
        {
          "text": "dotProduct([[1], [1, 2]]) must return null.",
          "testString": "assert.equal(dotProduct([1], [1, 2]), null, 'dotProduct([[1], [1, 2]]) must return null.');"
        },
        {
          "text": "dotProduct([1, 3, -5], [4, -2, -1]) must return 3.",
          "testString": "assert.equal(dotProduct([1, 3, -5], [4, -2, -1]), 3, 'dotProduct([1, 3, -5], [4, -2, -1]) must return 3.');"
        },
        {
          "text": "<code>dotProduct(...nVectors)</code> should return 156000",
          "testString": "assert.equal(dotProduct([ 0, 1, 2, 3, 4 ], [ 0, 2, 4, 6, 8 ], [ 0, 3, 6, 9, 12 ], [ 0, 4, 8, 12, 16 ], [ 0, 5, 10, 15, 20 ]), 156000, '<code>dotProduct(...nVectors)</code> should return 156000');"
        }
      ],
      "id": "594810f028c0303b75339ad3",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function dotProduct() {",
            "    // Good luck!",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "title": "Word wrap",
      "description": [
        "<p>",
        "Even today, with proportional fonts and complex layouts, there are still",
        "cases where you need to wrap text at a specified",
        "column.  The basic task is to wrap a paragraph of text in a simple way.",
        "Example text:",
        "</p>",
        "<pre>",
        "Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX algorithm.",
        "If your language provides this, you get easy extra credit,",
        "but you ''must reference documentation'' indicating that the algorithm",
        "is something better than a simple minimimum length algorithm.",
        "</pre>",
        "<p>",
        "Task:",
        "",
        "    Write a function that can wrap this text to any number of characters.",
        "",
        "As an example, the text wrapped to 80 characters should look like the following:",
        "</p>",
        "<pre>",
        "Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX",
        "algorithm. If your language provides this, you get easy extra credit, but you",
        "must reference documentation indicating that the algorithm is something better",
        "than a simple minimimum length algorithm.",
        "</pre>"
      ],
      "solutions": [
        "function wrap (text, limit) {\n  const noNewlines = text.replace('\\n', '');\n  if (noNewlines.length > limit) {\n    // find the last space within limit\n    const edge = noNewlines.slice(0, limit).lastIndexOf(' ');\n    if (edge > 0) {\n      const line = noNewlines.slice(0, edge);\n      const remainder = noNewlines.slice(edge + 1);\n      return line + '\\n' + wrap(remainder, limit);\n    }\n  }\n  return text;\n}\n"
      ],
      "tests": [
        {
          "text": "wrap must be a function.",
          "testString": "assert.equal(typeof wrap, 'function', 'wrap must be a function.');"
        },
        {
          "text": "wrap must return a string.",
          "testString": "assert.equal(typeof wrap('abc', 10), 'string', 'wrap must return a string.');"
        },
        {
          "text": "wrap(80) must return 4 lines.",
          "testString": "assert(wrapped80.split('\\n').length === 4, 'wrap(80) must return 4 lines.');"
        },
        {
          "text": "Your <code>wrap</code> function should return our expected text",
          "testString": "assert.equal(wrapped80.split('\\n')[0], firstRow80, 'Your <code>wrap</code> function should return our expected text');"
        },
        {
          "text": "wrap(42) must return 7 lines.",
          "testString": "assert(wrapped42.split('\\n').length === 7, 'wrap(42) must return 7 lines.');"
        },
        {
          "text": "Your <code>wrap</code> function should return our expected text",
          "testString": "assert.equal(wrapped42.split('\\n')[0], firstRow42, 'Your <code>wrap</code> function should return our expected text');"
        }
      ],
      "id": "594810f028c0303b75339ad4",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function wrap (text, limit) {",
            "  return text;",
            "}"
          ],
          "head": [],
          "tail": [
            "const text =",
            "`Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX algorithm.",
            "If your language provides this, you get easy extra credit,",
            "but you ''must reference documentation'' indicating that the algorithm",
            "is something better than a simple minimimum length algorithm.`;",
            "",
            "const wrapped80 = wrap(text, 80);",
            "const wrapped42 = wrap(text, 42);",
            "",
            "const firstRow80 =",
            "    'Wrap text using a more sophisticated algorithm such as the Knuth and Plass TeX';",
            "",
            "const firstRow42 = 'Wrap text using a more sophisticated';"
          ]
        }
      }
    },
    {
      "title": "Y combinator",
      "description": [
        "<p>",
        "In strict ",
        "<a href=\"https://en.wikipedia.org/wiki/Functional programming\" title=\"wp: functional programming\">functional programming</a> and",
        "the <a href=\"https://en.wikipedia.org/wiki/lambda calculus\" title=\"wp: lambda calculus\">lambda calculus</a>, ",
        "functions (lambda expressions) don't have state and are only allowed to refer to arguments of enclosing functions. ",
        "This rules out the usual definition of a recursive function wherein a function is associated with the state of a variable and this variable's state is used in the body of the function.",
        "</p>",
        "<p>",
        "The <a href=\"http://mvanier.livejournal.com/2897.html\">Y combinator</a> is itself a stateless function that,",
        "when applied to another stateless function, returns a recursive version of the function. The Y combinator is",
        "the simplest of the class of such functions, called ",
        "<a href=\"https://en.wikipedia.org/wiki/Fixed-point combinator\" title=\"wp: fixed-point combinator\">fixed-point combinators</a>.",
        "</p>",
        "Task:",
        "",
        "    Define the stateless Y combinator function and use it to compute",
        "    <a href=\"https://en.wikipedia.org/wiki/Factorial\" title=\"wp: factorial\">factorial</a>.",
        "",
        "<code>factorial(N)</code> function is already given to you.",
        "See also <a href=\"http://vimeo.com/45140590\">Jim Weirich: Adventures in Functional Programming</a>."
      ],
      "solutions": [
        "var Y = f => (x => x(x))(y => f(x => y(y)(x)));\n"
      ],
      "tests": [
        {
          "text": "Y must return a function",
          "testString": "assert.equal(typeof Y(f => n => n), 'function', 'Y must return a function');"
        },
        {
          "text": "factorial(1) must return 1.",
          "testString": "assert.equal(factorial(1), 1, 'factorial(1) must return 1.');"
        },
        {
          "text": "factorial(2) must return 2.",
          "testString": "assert.equal(factorial(2), 2, 'factorial(2) must return 2.');"
        },
        {
          "text": "factorial(3) must return 6.",
          "testString": "assert.equal(factorial(3), 6, 'factorial(3) must return 6.');"
        },
        {
          "text": "factorial(4) must return 24.",
          "testString": "assert.equal(factorial(4), 24, 'factorial(4) must return 24.');"
        },
        {
          "text": "factorial(10) must return 3628800.",
          "testString": "assert.equal(factorial(10), 3628800, 'factorial(10) must return 3628800.');"
        }
      ],
      "id": "594810f028c0303b75339ad5",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function Y(f) {",
            "  return function() {",
            "  // Good luck!",
            "  };",
            "}",
            "",
            "var factorial = Y(function(f) {",
            "  return function (n) {",
            "    return n > 1 ? n * f(n - 1) : 1;",
            "  };",
            "});"
          ],
          "head": [],
          "tail": [
            "var factorial = Y(f => n => (n > 1 ? n * f(n - 1) : 1));"
          ]
        }
      }
    },
    {
      "title": "Zeckendorf number representation",
      "description": [
        "<p>",
        "Just as numbers can be represented in a",
        "positional notation as sums of multiples of the powers of ten (decimal)",
        "or two (binary); all the positive integers can be represented as the sum",
        "of one or zero times the distinct members of the Fibonacci series.",
        "</p>",
        "<p>",
        "Recall that the first six distinct Fibonacci",
        "numbers are:  <code>1, 2, 3, 5, 8, 13</code>. The decimal number eleven can",
        "be written as <code>0*13 + 1*8 + 0*5 + 1*3 + 0*2 + 0*1</code> or",
        "<code>010100</code> in positional notation where the columns represent",
        "multiplication by a particular member of the sequence. Leading zeroes are",
        "dropped so that 11 decimal becomes <code>10100</code>.",
        "</p>",
        "<p>",
        "10100 is not the only way to make 11 from the Fibonacci numbers however",
        "<code>0*13 + 1*8 + 0*5 + 0*3 + 1*2 + 1*1</code> or 010011 would also",
        "represent decimal 11. For a true Zeckendorf number there is the added",
        "restriction that ''no two consecutive Fibonacci numbers can be used''",
        "which leads to the former unique solution.",
        "</p>",
        "<p>",
        " Task:",
        " Write a function that generates and returns an array of first N Zeckendorf numbers in order.",
        "</p>"
      ],
      "solutions": [
        "// zeckendorf :: Int -> String\nfunction zeckendorf(n) {\n  const f = (m, x) => (m < x ? [m, 0] : [m - x, 1]);\n  return (n === 0 ? ([0]) :\n    mapAccumL(f, n, reverse(\n      tail(fibUntil(n))\n    ))[1]).join('');\n}\n\n// fibUntil :: Int -> [Int]\nlet fibUntil = n => {\n  const xs = [];\n  until(\n      ([a]) => a > n,\n      ([a, b]) => (xs.push(a), [b, a + b]), [1, 1]\n  );\n  return xs;\n};\n\nlet mapAccumL = (f, acc, xs) => (\n  xs.reduce((a, x) => {\n    const pair = f(a[0], x);\n\n    return [pair[0], a[1].concat(pair[1])];\n  }, [acc, []])\n);\n\nlet until = (p, f, x) => {\n  let v = x;\n  while (!p(v)) v = f(v);\n  return v;\n};\n\nconst tail = xs => (\n   xs.length ? xs.slice(1) : undefined\n);\n\nconst reverse = xs => xs.slice(0).reverse();\n"
      ],
      "tests": [
        {
          "text": "zeckendorf must be function",
          "testString": "assert.equal(typeof zeckendorf, 'function', 'zeckendorf must be function');"
        },
        {
          "text": "Your <code>zeckendorf</code> function should return the correct answer",
          "testString": "assert.deepEqual(answer, solution20, 'Your <code>zeckendorf</code> function should return the correct answer');"
        }
      ],
      "id": "594810f028c0303b75339ad6",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function zeckendorf(n) {",
            "  // good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const range = (m, n) => (",
            "  Array.from({",
            "    length: Math.floor(n - m) + 1",
            "  }, (_, i) => m + i)",
            ");",
            "",
            "const solution20 = [",
            "  '1', '10', '100', '101', '1000', '1001', '1010', '10000', '10001',",
            "  '10010', '10100', '10101', '100000', '100001', '100010', '100100', '100101',",
            "  '101000', '101001', '101010'",
            "];",
            "",
            "const answer = range(1, 20).map(zeckendorf);"
          ]
        }
      }
    },
    {
      "title": "Zhang-Suen thinning algorithm",
      "description": [
        "This is an algorithm used to thin a black and white i.e. one bit per pixel images.",
        "For example, with an input image of:",
        "<pre>",
        " #################                   #############",
        " ##################               ################",
        " ###################            ##################",
        " ########     #######          ###################",
        "   ######     #######         #######       ######",
        "   ######     #######        #######",
        "   #################         #######",
        "   ################          #######",
        "   #################         #######",
        "   ######     #######        #######",
        "   ######     #######        #######",
        "   ######     #######         #######       ######",
        " ########     #######          ###################",
        " ########     ####### ######    ################## ######",
        " ########     ####### ######      ################ ######",
        " ########     ####### ######         ############# ######",
        "                                                           </pre>",
        "It produces the thinned output:",
        "<pre>",
        "",
        "    # ##########                       #######",
        "     ##        #                   ####       #",
        "     #          #                 ##",
        "     #          #                #",
        "     #          #                #",
        "     #          #                #",
        "     ############               #",
        "     #          #               #",
        "     #          #                #",
        "     #          #                #",
        "     #          #                #",
        "     #                            ##",
        "     #                             ############",
        "                       ###                          ###",
        "",
        "                                                           </pre>",
        "<h2>Algorithm</h2>",
        "Assume black pixels are one and white pixels zero, and that the input image is a rectangular N by M array of ones and zeroes.",
        "The algorithm operates on all black pixels P1 that can have eight neighbours. The neighbours are, in order, arranged as:",
        "<table border=\"1\">",
        "  <tr><td>P9</td><td>P2</td><td>P3</td></tr>",
        "  <tr><td>P8</td><td><b>P1</b></td><td>P4</td></tr>",
        "  <tr><td>P7</td><td>P6</td><td>P5</td></tr>",
        "</table>",
        "Obviously the boundary pixels of the image cannot have the full eight neighbours.",
        "",
        "    Define $A(P1)$ = the number of transitions from white to black, (0 -> 1) in the sequence P2,P3,P4,P5,P6,P7,P8,P9,P2. (Note the extra P2 at the end - it is circular).",
        "",
        "",
        "    Define $B(P1)$ = the number of black pixel neighbours of P1. ( = sum(P2 .. P9) )",
        "",
        "<h3>Step 1:</h3>",
        "All pixels are tested and pixels satisfying all the following conditions (simultaneously) are just noted at this stage.",
        "  (0) The pixel is black and has eight neighbours",
        "  (1) $2 <= B(P1) <= 6$",
        "  (2) $A(P1) = 1$",
        "  (3) At least one of P2 and P4 and P6 is white",
        "  (4) At least one of P4 and P6 and P8 is white",
        "After iterating over the image and collecting all the pixels satisfying all step 1 conditions, all these condition satisfying pixels are set to white.",
        "<h3>Step 2:</h3>",
        "All pixels are again tested and pixels satisfying all the following conditions are just noted at this stage.",
        "  (0) The pixel is black and has eight neighbours",
        "  (1) $2 <= B(P1) <= 6$",
        "  (2) $A(P1) = 1$",
        "  (3) At least one of P2 and P4 and '''P8''' is white",
        "  (4) At least one of '''P2''' and P6 and P8 is white",
        "After iterating over the image and collecting all the pixels satisfying all step 2 conditions, all these condition satisfying pixels are again set to white.",
        "Iteration:",
        "If any pixels were set in this round of either step 1 or step 2 then all steps are repeated until no image pixels are so changed.",
        "<p>",
        "Task:",
        "Write a routine to perform Zhang-Suen thinning on an image matrix of ones and zeroes.",
        "</p>"
      ],
      "solutions": [
        "function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nconst ZhangSuen = (function () {\n  function ZhangSuen() {\n  }\n\n  ZhangSuen.nbrs = [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1]];\n\n  ZhangSuen.nbrGroups = [[[0, 2, 4], [2, 4, 6]], [[0, 2, 6], [0, 4, 6]]];\n\n  ZhangSuen.toWhite = [];\n\n  ZhangSuen.main = function (image) {\n    ZhangSuen.grid = new Array(image);\n    for (let r = 0; r < image.length; r++) {\n      ZhangSuen.grid[r] = image[r].split('');\n    }\n    ZhangSuen.thinImage();\n    return ZhangSuen.getResult();\n  };\n\n  ZhangSuen.thinImage = function () {\n    let firstStep = false;\n    let hasChanged;\n    do {\n      hasChanged = false;\n      firstStep = !firstStep;\n      for (let r = 1; r < ZhangSuen.grid.length - 1; r++) {\n        for (let c = 1; c < ZhangSuen.grid[0].length - 1; c++) {\n          if (ZhangSuen.grid[r][c] !== '#') {\n            continue;\n          }\n          const nn = ZhangSuen.numNeighbors(r, c);\n          if (nn < 2 || nn > 6) {\n            continue;\n          }\n          if (ZhangSuen.numTransitions(r, c) !== 1) {\n            continue;\n          }\n          if (!ZhangSuen.atLeastOneIsWhite(r, c, firstStep ? 0 : 1)) {\n            continue;\n          }\n          ZhangSuen.toWhite.push(new Point(c, r));\n          hasChanged = true;\n        }\n      }\n      for (let i = 0; i < ZhangSuen.toWhite.length; i++) {\n        const p = ZhangSuen.toWhite[i];\n        ZhangSuen.grid[p.y][p.x] = ' ';\n      }\n      ZhangSuen.toWhite = [];\n    } while ((firstStep || hasChanged));\n  };\n\n  ZhangSuen.numNeighbors = function (r, c) {\n    let count = 0;\n    for (let i = 0; i < ZhangSuen.nbrs.length - 1; i++) {\n      if (ZhangSuen.grid[r + ZhangSuen.nbrs[i][1]][c + ZhangSuen.nbrs[i][0]] === '#') {\n        count++;\n      }\n    }\n    return count;\n  };\n\n  ZhangSuen.numTransitions = function (r, c) {\n    let count = 0;\n    for (let i = 0; i < ZhangSuen.nbrs.length - 1; i++) {\n      if (ZhangSuen.grid[r + ZhangSuen.nbrs[i][1]][c + ZhangSuen.nbrs[i][0]] === ' ') {\n        if (ZhangSuen.grid[r + ZhangSuen.nbrs[i + 1][1]][c + ZhangSuen.nbrs[i + 1][0]] === '#') {\n          count++;\n        }\n      }\n    }\n    return count;\n  };\n\n  ZhangSuen.atLeastOneIsWhite = function (r, c, step) {\n    let count = 0;\n    const group = ZhangSuen.nbrGroups[step];\n    for (let i = 0; i < 2; i++) {\n      for (let j = 0; j < group[i].length; j++) {\n        const nbr = ZhangSuen.nbrs[group[i][j]];\n        if (ZhangSuen.grid[r + nbr[1]][c + nbr[0]] === ' ') {\n          count++;\n          break;\n        }\n      }\n    }\n    return count > 1;\n  };\n\n  ZhangSuen.getResult = function () {\n    const result = [];\n    for (let i = 0; i < ZhangSuen.grid.length; i++) {\n      const row = ZhangSuen.grid[i].join('');\n      result.push(row);\n    }\n    return result;\n  };\n  return ZhangSuen;\n}());\n\nfunction thinImage(image) {\n  return ZhangSuen.main(image);\n}\n"
      ],
      "tests": [
        {
          "text": "<code>thinImage</code> must be a function",
          "testString": "assert.equal(typeof thinImage, 'function', '<code>thinImage</code> must be a function');"
        },
        {
          "text": "<code>thinImage</code> must return an array",
          "testString": "assert(Array.isArray(result), '<code>thinImage</code> must return an array');"
        },
        {
          "text": "<code>thinImage</code> must return an array of strings",
          "testString": "assert.equal(typeof result[0], 'string', '<code>thinImage</code> must return an array of strings');"
        },
        {
          "text": "<code>thinImage</code> must return an array of strings",
          "testString": "assert.deepEqual(result, expected, '<code>thinImage</code> must return an array of strings');"
        }
      ],
      "id": "594810f028c0303b75339ad7",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "const testImage = [",
            "  '                                                          ',",
            "  ' #################                   #############        ',",
            "  ' ##################               ################        ',",
            "  ' ###################            ##################        ',",
            "  ' ########     #######          ###################        ',",
            "  '   ######     #######         #######       ######        ',",
            "  '   ######     #######        #######                      ',",
            "  '   #################         #######                      ',",
            "  '   ################          #######                      ',",
            "  '   #################         #######                      ',",
            "  '   ######     #######        #######                      ',",
            "  '   ######     #######        #######                      ',",
            "  '   ######     #######         #######       ######        ',",
            "  ' ########     #######          ###################        ',",
            "  ' ########     ####### ######    ################## ###### ',",
            "  ' ########     ####### ######      ################ ###### ',",
            "  ' ########     ####### ######         ############# ###### ',",
            "  '                                                          '];",
            "",
            "function thinImage(image) {",
            "  // Good luck!",
            "}"
          ],
          "head": [],
          "tail": [
            "const imageForTests = [",
            "  '                                                          ',",
            "  ' #################                   #############        ',",
            "  ' ##################               ################        ',",
            "  ' ###################            ##################        ',",
            "  ' ########     #######          ###################        ',",
            "  '   ######     #######         #######       ######        ',",
            "  '   ######     #######        #######                      ',",
            "  '   #################         #######                      ',",
            "  '   ################          #######                      ',",
            "  '   #################         #######                      ',",
            "  '   ######     #######        #######                      ',",
            "  '   ######     #######        #######                      ',",
            "  '   ######     #######         #######       ######        ',",
            "  ' ########     #######          ###################        ',",
            "  ' ########     ####### ######    ################## ###### ',",
            "  ' ########     ####### ######      ################ ###### ',",
            "  ' ########     ####### ######         ############# ###### ',",
            "  '                                                          '];",
            "const expected = [",
            "  '                                                          ',",
            "  '                                                          ',",
            "  '    # ##########                       #######            ',",
            "  '     ##        #                   ####       #           ',",
            "  '     #          #                 ##                      ',",
            "  '     #          #                #                        ',",
            "  '     #          #                #                        ',",
            "  '     #          #                #                        ',",
            "  '     ############               #                         ',",
            "  '     #          #               #                         ',",
            "  '     #          #                #                        ',",
            "  '     #          #                #                        ',",
            "  '     #          #                #                        ',",
            "  '     #                            ##                      ',",
            "  '     #                             ############           ',",
            "  '                       ###                          ###   ',",
            "  '                                                          ',",
            "  '                                                          '",
            "];",
            "const result = thinImage(imageForTests);"
          ]
        }
      }
    },
    {
      "title": "Zig-zag matrix",
      "description": [
        "A &nbsp; ''zig-zag'' &nbsp; array is a square arrangement of the first &nbsp;",
        "$N^2$ &nbsp; integers, &nbsp; where the",
        "numbers increase sequentially as you zig-zag along the array's &nbsp;",
        "<a href=\"https://en.wiktionary.org/wiki/antidiagonal\">anti-diagonals</a>.",
        "For example, given &nbsp; '''5''', &nbsp; produce this array:",
        "<pre>",
        " 0  1  5  6 14",
        " 2  4  7 13 15",
        " 3  8 12 16 21",
        " 9 11 17 20 22",
        "10 18 19 23 24",
        "</pre>",
        "Write a function that takes the size of the zig-zag matrix, and returns the",
        "corresponding matrix as two-dimensional array."
      ],
      "solutions": [
        "function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}\n"
      ],
      "tests": [
        {
          "text": "ZigZagMatrix must be a function",
          "testString": "assert.equal(typeof ZigZagMatrix, 'function', 'ZigZagMatrix must be a function');"
        },
        {
          "text": "ZigZagMatrix should return array",
          "testString": "assert.equal(typeof ZigZagMatrix(1), 'object', 'ZigZagMatrix should return array');"
        },
        {
          "text": "ZigZagMatrix should return an array of nestes arrays",
          "testString": "assert.equal(typeof ZigZagMatrix(1)[0], 'object', 'ZigZagMatrix should return an array of nestes arrays');"
        },
        {
          "text": "ZigZagMatrix(1) should return [[0]]",
          "testString": "assert.deepEqual(ZigZagMatrix(1), zm1, 'ZigZagMatrix(1) should return [[0]]');"
        },
        {
          "text": "ZigZagMatrix(2) should return [[0, 1], [2, 3]]",
          "testString": "assert.deepEqual(ZigZagMatrix(2), zm2, 'ZigZagMatrix(2) should return [[0, 1], [2, 3]]');"
        },
        {
          "text": "ZigZagMatrix(5) must return specified matrix",
          "testString": "assert.deepEqual(ZigZagMatrix(5), zm5, 'ZigZagMatrix(5) must return specified matrix');"
        }
      ],
      "id": "594810f028c0303b75339ad8",
      "challengeType": 5,
      "releasedOn": "December 27, 2017",
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function ZigZagMatrix(n) {",
            "  // Good luck!",
            "  return [[], []];",
            "}"
          ],
          "head": [],
          "tail": [
            "const zm1 = [[0]];",
            "const zm2 = [[0, 1], [2, 3]];",
            "const zm5 = [",
            "  [0, 1, 5, 6, 14],",
            "  [2, 4, 7, 13, 15],",
            "  [3, 8, 12, 16, 21],",
            "  [9, 11, 17, 20, 22],",
            "  [10, 18, 19, 23, 24]",
            "];"
          ]
        }
      }
    }
  ]
}